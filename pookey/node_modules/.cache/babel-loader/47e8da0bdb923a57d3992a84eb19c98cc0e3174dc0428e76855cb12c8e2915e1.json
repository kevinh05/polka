{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/external/strobe.ts\nimport { keccakP } from \"@noble/hashes/sha3\";\nvar keccakF1600 = state => {\n  keccakP(new Uint32Array(state.buffer, state.byteOffset, Math.floor(state.byteLength / 4)), 24);\n};\nvar operationToFlagMap = {\n  [0 /* Ad */]: 2 /* FlagA */,\n  [1 /* Key */]: 2 /* FlagA */ | 4 /* FlagC */,\n  [2 /* Prf */]: 1 /* FlagI */ | 2 /* FlagA */ | 4 /* FlagC */,\n  [3 /* SendClr */]: 2 /* FlagA */ | 8 /* FlagT */,\n  [4 /* RecvClr */]: 1 /* FlagI */ | 2 /* FlagA */ | 8 /* FlagT */,\n  [5 /* SendEnc */]: 2 /* FlagA */ | 4 /* FlagC */ | 8 /* FlagT */,\n  [6 /* RecvEnc */]: 1 /* FlagI */ | 2 /* FlagA */ | 4 /* FlagC */ | 8 /* FlagT */,\n  [7 /* SendMac */]: 4 /* FlagC */ | 8 /* FlagT */,\n  [8 /* RecvMac */]: 1 /* FlagI */ | 4 /* FlagC */ | 8 /* FlagT */,\n  [9 /* Ratchet */]: 4 /* FlagC */\n};\nvar textEncoder = new TextEncoder();\nvar Strobe = class _Strobe {\n  constructor() {\n    __publicField(this, \"state\");\n    __publicField(this, \"initialized\");\n    __publicField(this, \"pos\");\n    __publicField(this, \"posBegin\");\n    __publicField(this, \"strobeR\");\n    __publicField(this, \"curFlags\");\n    __publicField(this, \"i0\");\n    /// <summary>\n    /// The size of the authentication tag used in AEAD functions\n    /// </summary>\n    __publicField(this, \"MacLen\", 16);\n  }\n  strobe_init(description) {\n    this.initialized = false;\n    const duplexRate = 1600 / 8 - 128 / 4;\n    this.strobeR = duplexRate - 2;\n    const f = Uint8Array.from([1, this.strobeR + 2, 1, 0, 1, 12 * 8\n    /* 12 = strlen(\"STROBEvX.Y.Z\") */]);\n    const s = new TextEncoder().encode(\"STROBEv1.0.2\");\n    const first = new Uint8Array(f.length + s.length);\n    first.set(f);\n    first.set(s, f.length);\n    this.posBegin = 0;\n    this.pos = 0;\n    this.state = new Uint8Array(200);\n    this.strobe_duplex(first, 0, first.byteLength, false, false, true);\n    this.initialized = true;\n    const operateBytes = textEncoder.encode(description);\n    this.operate(true, operationToFlagMap[0 /* Ad */], operateBytes, 0, operateBytes.length, 0, false);\n  }\n  clone() {\n    const s = new _Strobe();\n    s.state = Uint8Array.from(this.state);\n    s.initialized = this.initialized;\n    s.pos = this.pos;\n    s.posBegin = this.posBegin;\n    s.strobeR = this.strobeR;\n    s.curFlags = this.curFlags;\n    s.i0 = this.i0;\n    return s;\n  }\n  /* Mark current position and state, and run F.\n   * Should be compatible with CSHAKE.\n   */\n  run_f() {\n    if (this.initialized) {\n      this.state[this.pos] ^= this.posBegin;\n      this.state[this.pos + 1] ^= 4;\n      this.state[this.strobeR + 1] ^= 128;\n    }\n    keccakF1600(this.state);\n    this.posBegin = 0;\n    this.pos = 0;\n  }\n  /* Place a \"mark\" in the hash, which is distinct from the effect of writing any byte\n   * into the hash.  Then write the new mode into the hash.\n   */\n  strobe_mark(pptr, flags) {}\n  /* The core duplex mode */\n  strobe_duplex(data, startIndex, count, cbefore, cafter, forceF) {\n    const newData = data.slice(startIndex, count);\n    for (let i = 0; i < newData.byteLength; i++) {\n      if (cbefore) {\n        newData[i] ^= this.state[this.pos];\n      }\n      this.state[this.pos] ^= newData[i];\n      if (cafter) {\n        newData[i] = this.state[this.pos];\n      }\n      this.pos += 1;\n      if (this.pos === this.strobeR) {\n        this.run_f();\n      }\n    }\n    if (forceF && this.pos !== 0) {\n      this.run_f();\n    }\n    return newData;\n  }\n  /// <summary>\n  /// Operate runs an operation\n  /// For operations that only require a length, provide the length via the\n  /// length argument. For other operations provide a zero length.\n  /// Result is always retrieved through the return value. For boolean results,\n  /// check that the first index is 0 for true, 1 for false.\n  /// </summary>\n  operate(meta, flags, dataConst, starIndex, count, length, more) {\n    if (meta) {\n      flags |= 16 /* FlagM */;\n    }\n    let data;\n    if ((flags & (1 /* FlagI */ | 8 /* FlagT */)) !== (1 /* FlagI */ | 8 /* FlagT */) && (flags & (1 /* FlagI */ | 2 /* FlagA */)) !== 2 /* FlagA */) {\n      if (length === 0) {}\n      data = new Uint8Array(length);\n    } else {\n      if (length !== 0) {}\n      data = dataConst;\n    }\n    if (more) {\n      if (flags !== this.curFlags) {}\n    } else {\n      this.begin_op(flags);\n      this.curFlags = flags;\n    }\n    const cAfter = (flags & (4 /* FlagC */ | 1 /* FlagI */ | 8 /* FlagT */)) === (4 /* FlagC */ | 8 /* FlagT */);\n    const cBefore = (flags & 4 /* FlagC */) !== 0 && !cAfter;\n    const processed = this.duplex(data, starIndex, length === 0 ? count : length, cBefore, cAfter, false);\n    if ((flags & (1 /* FlagI */ | 2 /* FlagA */)) === (1 /* FlagI */ | 2 /* FlagA */)) {\n      return processed;\n    }\n    if ((flags & (1 /* FlagI */ | 8 /* FlagT */)) === 8 /* FlagT */) {\n      return processed;\n    }\n    if ((flags & (1 /* FlagI */ | 2 /* FlagA */ | 8 /* FlagT */)) === (1 /* FlagI */ | 8 /* FlagT */)) {\n      if (more) {}\n      let failures = 0;\n      processed.forEach(d => {\n        failures |= d;\n      });\n      return Uint8Array.from([failures]);\n    }\n    return null;\n  }\n  // beginOp: starts an operation\n  begin_op(flags) {\n    if ((flags & 8 /* FlagT */) !== 0) {\n      if (this.i0 === 2 /* None */) {\n        this.i0 = flags & 1 /* FlagI */;\n      }\n      flags ^= this.i0;\n    }\n    const oldBegin = this.posBegin;\n    this.posBegin = this.pos + 1;\n    const forceF = (flags & (4 /* FlagC */ | 32 /* FlagK */)) !== 0;\n    const data = new Uint8Array(2);\n    data[0] = oldBegin % 255;\n    data[1] = flags;\n    this.duplex(data, 0, data.length, false, false, forceF);\n  }\n  duplex(data, startIndex, count, cbefore, cafter, forceF) {\n    if (cbefore && cafter) {}\n    const newData = data.slice();\n    for (let i = 0; i < newData.length; i++) {\n      if (cbefore) {\n        newData[i] ^= this.state[this.pos];\n      }\n      this.state[this.pos] ^= newData[i];\n      if (cafter) {\n        newData[i] = this.state[this.pos];\n      }\n      this.pos += 1;\n      if (this.pos === this.strobeR) {\n        this.run_f();\n      }\n    }\n    if (forceF && this.pos !== 0) {\n      this.run_f();\n    }\n    return newData;\n  }\n  /// <summary>\n  /// Authenticate Additional Data.\n  /// Should be followed by a SendMAc or RecvMac in order to truly work\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"additionalData\">\n  /// Data to authenticate\n  /// </param>\n  ad(meta, additionalData) {\n    this.ad_f(meta, additionalData, 0, additionalData.length);\n  }\n  /// <summary>\n  /// Authenticate Additional Data.\n  /// Should be followed by a SendMAc or RecvMac in order to truly work\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"additionalData\">\n  /// Data to authenticate\n  /// </param>\n  /// <param name=\"startIndex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  ad_f(meta, additionalData, startIndex, count) {\n    this.operate(meta, operationToFlagMap[0 /* Ad */], additionalData, startIndex, count, 0, false);\n  }\n  /// <summary>\n  /// Send data in cleartext\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"cleartext\">\n  /// Cleartext to send\n  /// </param>\n  send_clr(meta, cleartext) {\n    return this.send_clr_f(meta, cleartext, 0, cleartext.length);\n  }\n  /// <summary>\n  /// Send data in cleartext\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"cleartext\">\n  /// Cleartext to send\n  /// </param>\n  /// <param name=\"startIndex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  send_clr_f(meta, cleartext, startIndex, count) {\n    return this.operate(meta, operationToFlagMap[3 /* SendClr */], cleartext, startIndex, count, 0, false);\n  }\n  /// <summary>\n  /// Receive data in cleartext\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"cleartext\">\n  /// Cleartext to send\n  /// </param>\n  recv_clr(meta, cleartext) {\n    return this.recv_clr_f(meta, cleartext, 0, cleartext.length);\n  }\n  /// <summary>\n  /// Receive data in cleartext\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"cleartext\">\n  /// Cleartext to send\n  /// </param>\n  /// <param name=\"startIdex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  recv_clr_f(meta, cleartext, startIdex, count) {\n    return this.operate(meta, operationToFlagMap[4 /* RecvClr */], cleartext, startIdex, count, 0, false);\n  }\n  /// <summary>\n  /// Produce an authentication tag.\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"outputLength\">\n  /// Expected tag length\n  /// </param>\n  send_mac(meta, outputLength) {\n    return this.operate(meta, operationToFlagMap[7 /* SendMac */], new Uint8Array(0), 0, 0, outputLength, false);\n  }\n  /// <summary>\n  /// Verify a received authentication tag.\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"mac\">\n  /// Tag to verify\n  /// </param>\n  recv_mac(meta, mac) {\n    return this.recv_mac_f(meta, mac, 0, mac.length);\n  }\n  /// <summary>\n  /// Verify a received authentication tag.\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"mac\">\n  /// Tag to verify\n  /// </param>\n  /// <param name=\"startIndex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  recv_mac_f(meta, mac, startIndex, count) {\n    const r = this.operate(meta, operationToFlagMap[8 /* RecvMac */], mac, startIndex, count, 0, false);\n    if (r === null) {\n      return false;\n    }\n    return r[0] === 0;\n  }\n  /// <summary>\n  /// Introduce forward secrecy in a protocol.\n  /// </summary>\n  /// <param name=\"length\">\n  /// Expected length\n  /// </param>\n  ratchet(length) {\n    this.operate(false, operationToFlagMap[9 /* Ratchet */], new Uint8Array(0), 0, 0, length, false);\n  }\n  /// <summary>\n  /// Encrypt plaintext.\n  /// Should be followed by SendMac in order to protect its integrity\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"plaintext\">\n  /// Plaintext to be encrypted\n  /// </param>\n  send_enc_unauthenticated(meta, plaintext) {\n    return this.send_enc_unauthenticated_f(meta, plaintext, 0, plaintext.length);\n  }\n  /// <summary>\n  /// Encrypt plaintext.\n  /// Should be followed by SendMac in order to protect its integrity\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"plaintext\">\n  /// Plaintext to be encrypted\n  /// </param>\n  /// <param name=\"startIndex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  send_enc_unauthenticated_f(meta, plaintext, startIndex, count) {\n    return this.operate(meta, operationToFlagMap[5 /* SendEnc */], plaintext, startIndex, count, 0, false);\n  }\n};\n\n// src/external/merlin.ts\nvar textEncoder2 = new TextEncoder();\nfunction getBytesU32(num) {\n  const r = new Uint8Array(4);\n  r[0] = num % 256;\n  r[1] = num << 8 % 256;\n  r[2] = num << 16 % 256;\n  r[3] = num << 24 % 256;\n  return r;\n}\nvar TranscriptRngBuilder = class {\n  constructor(strobe) {\n    __publicField(this, \"strobe\");\n    this.strobe = strobe;\n  }\n  RekeyWithWitnessBytes(label, witness) {\n    this.strobe.MetaAd(label, false);\n    this.strobe.MetaAd(getBytesU32(witness.length), true);\n    this.strobe.Key(witness, false);\n    return this;\n  }\n  Finalize(rng) {\n    const bytes = rng.GetRandomArrayU8_32();\n    const newStrobe = this.strobe.Clone();\n    newStrobe.MetaAd(textEncoder2.encode(\"rng\"), false);\n    newStrobe.Key(bytes, false);\n    return newStrobe;\n  }\n};\nvar Transcript = class _Transcript {\n  constructor() {\n    __publicField(this, \"obj\");\n    __publicField(this, \"MERLIN_PROTOCOL_LABEL\", \"Merlin v1.0\");\n  }\n  Init(label) {\n    this.obj = new Strobe();\n    this.obj.strobe_init(this.MERLIN_PROTOCOL_LABEL);\n    this.AppendMessage(textEncoder2.encode(\"dom-sep\"), textEncoder2.encode(label));\n  }\n  GetStrobe() {\n    return this.obj.clone();\n  }\n  Clone() {\n    const c = new _Transcript();\n    c.obj = this.obj.clone();\n    return c;\n  }\n  AppendMessage(label, message) {\n    this.MetaAd(label, false);\n    this.MetaAd(getBytesU32(message.length), true);\n    this.Ad(message, false);\n  }\n  MetaAd(data, more) {\n    const error = this.obj.operate(true, operationToFlagMap[0 /* Ad */], data, 0, data.length, 0, more);\n    if (error !== null) {}\n  }\n  Ad(data, more) {\n    const error = this.obj.operate(false, operationToFlagMap[0 /* Ad */], data, 0, data.length, 0, more);\n    if (error !== null) {}\n  }\n  Prf(expectedOutput, more) {\n    const ed = new Uint8Array(0);\n    const result = this.obj.operate(false, operationToFlagMap[2 /* Prf */], ed, 0, 0, expectedOutput, more);\n    if (result === null) {\n      throw new Error(\"Error in Prf: result is null\");\n    }\n    return result;\n  }\n  Key(data, more) {\n    const error = this.obj.operate(false, operationToFlagMap[1 /* Key */], data, 0, data.length, 0, more);\n    if (error !== null) {}\n  }\n  AppendU64(label, message) {\n    this.AppendMessage(label, message);\n  }\n  ChallengeBytes(label, size) {\n    const sz = getBytesU32(size);\n    this.MetaAd(label, false);\n    this.MetaAd(sz, true);\n    return this.Prf(size, false);\n  }\n  WitnessBytes(label, nonceSeeds, rng) {\n    const ns = new Array(1);\n    ns[0] = nonceSeeds;\n    return this.WitnessBytesRngL(label, ns, rng);\n  }\n  WitnessBytesRngL(label, nonce_seeds, rng) {\n    let br = this.BuildRng();\n    nonce_seeds.forEach(ns => {\n      br = br.RekeyWithWitnessBytes(label, ns);\n    });\n    return br.Finalize(rng);\n  }\n  WitnessBytesHdkd(label, dest_len, nonce_seeds) {\n    const dest = new Uint8Array(dest_len);\n    let br = this.BuildRng();\n    for (const ns of nonce_seeds) {\n      br = br.RekeyWithWitnessBytes(label, ns);\n    }\n    const r = br.Finalize(new RandomGenerator());\n    r.FillBytes(dest);\n    return dest;\n  }\n  BuildRng() {\n    return new TranscriptRngBuilder(this.Clone());\n  }\n  FillBytes(dest) {\n    const data_len = getBytesU32(dest.length);\n    this.MetaAd(data_len, false);\n    this.Prf(dest.length, false);\n  }\n};\n\n// src/signingContext.ts\nimport { randomBytes } from \"@noble/hashes/utils\";\n\n// src/scalar.ts\nvar LFACTOR = 1439961107955227;\nvar L = BigUint64Array.from([0x0002631a5cf5d3edn, 0x000dea2f79cd6581n, 0x000000000014def9n, 0x0000000000000000n, 0x0000100000000000n]);\nvar R = BigUint64Array.from([0x000f48bd6721e6edn, 0x0003bab5ac67e45an, 0x000fffffeb35e51bn, 0x000fffffffffffffn, 0x00000fffffffffffn]);\nvar RR = BigUint64Array.from([0x0009d265e952d13bn, 0x000d63c715bea69fn, 0x0005be65cb687604n, 0x0003dceec73d217fn, 0x000009411b7c309an]);\nvar U64size = BigInt(2 ** 64);\nvar Tuple2 = class {\n  constructor(a, b2) {\n    __publicField(this, \"i0\");\n    __publicField(this, \"i1\");\n    this.i0 = a;\n    this.i1 = b2;\n  }\n};\nfunction AsU8bn(a) {\n  return Number(a % 256n);\n}\nfunction ScalarBigintToBytesForm(scalar) {\n  const s = new Uint8Array(32);\n  s[0] = AsU8bn(scalar[0] >> 0n);\n  s[1] = AsU8bn(scalar[0] >> 8n);\n  s[2] = AsU8bn(scalar[0] >> 16n);\n  s[3] = AsU8bn(scalar[0] >> 24n);\n  s[4] = AsU8bn(scalar[0] >> 32n);\n  s[5] = AsU8bn(scalar[0] >> 40n);\n  s[6] = AsU8bn(scalar[0] >> 48n | scalar[1] << 4n);\n  s[7] = AsU8bn(scalar[1] >> 4n);\n  s[8] = AsU8bn(scalar[1] >> 12n);\n  s[9] = AsU8bn(scalar[1] >> 20n);\n  s[10] = AsU8bn(scalar[1] >> 28n);\n  s[11] = AsU8bn(scalar[1] >> 36n);\n  s[12] = AsU8bn(scalar[1] >> 44n);\n  s[13] = AsU8bn(scalar[2] >> 0n);\n  s[14] = AsU8bn(scalar[2] >> 8n);\n  s[15] = AsU8bn(scalar[2] >> 16n);\n  s[16] = AsU8bn(scalar[2] >> 24n);\n  s[17] = AsU8bn(scalar[2] >> 32n);\n  s[18] = AsU8bn(scalar[2] >> 40n);\n  s[19] = AsU8bn(scalar[2] >> 48n | scalar[3] << 4n);\n  s[20] = AsU8bn(scalar[3] >> 4n);\n  s[21] = AsU8bn(scalar[3] >> 12n);\n  s[22] = AsU8bn(scalar[3] >> 20n);\n  s[23] = AsU8bn(scalar[3] >> 28n);\n  s[24] = AsU8bn(scalar[3] >> 36n);\n  s[25] = AsU8bn(scalar[3] >> 44n);\n  s[26] = AsU8bn(scalar[4] >> 0n);\n  s[27] = AsU8bn(scalar[4] >> 8n);\n  s[28] = AsU8bn(scalar[4] >> 16n);\n  s[29] = AsU8bn(scalar[4] >> 24n);\n  s[30] = AsU8bn(scalar[4] >> 32n);\n  s[31] = AsU8bn(scalar[4] >> 40n);\n  return s;\n}\nfunction ScalarBytesToBigintForm(scalar) {\n  const dt = new BigUint64Array(5);\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 8; j++) {\n      dt[i] |= (BigInt(scalar[i * 8 + j]) << BigInt(j * 8)) % U64size;\n    }\n  }\n  const mask = (1n << 52n) - 1n;\n  const topMask = (1n << 48n) - 1n;\n  const s = new BigUint64Array(5);\n  s[0] = dt[0] & mask;\n  s[1] = (dt[0] >> 52n | dt[1] << 12n) & mask;\n  s[2] = (dt[1] >> 40n | dt[2] << 24n) & mask;\n  s[3] = (dt[2] >> 28n | dt[3] << 36n) & mask;\n  s[4] = dt[3] >> 16n & topMask;\n  return s;\n}\nfunction WrappingSub(a, b2) {\n  const r = (a - b2) % U64size;\n  return r > 0 ? r : U64size + r;\n}\nfunction ScalarSub(a, b2) {\n  const difference = new BigUint64Array(5);\n  const mask = (1n << 52n) - 1n;\n  let borrow = 0n;\n  for (let i = 0; i < 5; i++) {\n    borrow = WrappingSub(a[i], b2[i] + (borrow >> 63n));\n    difference[i] = (borrow & mask) % U64size;\n  }\n  const underflowMask = WrappingSub(borrow >> 63n ^ 1n, 1n);\n  let carry = 0n;\n  for (let i = 0; i < 5; i++) {\n    carry = BigInt((carry >> 52n) + difference[i] + (L[i] & underflowMask));\n    difference[i] = carry & mask;\n  }\n  return difference;\n}\nfunction ScalarAdd(a, b2) {\n  const sum = new BigUint64Array(5);\n  const mask = (1n << 52n) - 1n;\n  let carry = 0n;\n  for (let i = 0; i < 5; i++) {\n    carry = BigInt(a[i]) + BigInt(b2[i]) + (carry >> 52n);\n    sum[i] = carry & mask;\n  }\n  return ScalarSub(sum, L);\n}\nfunction ScalarMul(a, b2) {\n  const ab = MontgomeryReduce(MulInternal(a, b2));\n  return MontgomeryReduce(MulInternal(ab, RR));\n}\nfunction _m(x, y) {\n  return BigInt(x) * BigInt(y);\n}\nfunction _part1(sum) {\n  const p = sum * BigInt(LFACTOR) & (1n << 52n) - 1n;\n  return new Tuple2(p, sum + _m(p, BigInt(L[0])) >> 52n);\n}\nfunction _part2(sum) {\n  const w = sum % U64size & (1n << 52n) - 1n;\n  return new Tuple2(w, sum >> 52n);\n}\nfunction MontgomeryReduce(limbs) {\n  const l = L;\n  const n0 = _part1(limbs[0]);\n  const n1 = _part1(n0.i1 + limbs[1] + _m(n0.i0, BigInt(l[1])));\n  const n2 = _part1(n1.i1 + limbs[2] + _m(n0.i0, BigInt(l[2])) + _m(n1.i0, BigInt(l[1])));\n  const n3 = _part1(n2.i1 + limbs[3] + _m(n1.i0, BigInt(l[2])) + _m(n2.i0, BigInt(l[1])));\n  const n4 = _part1(n3.i1 + limbs[4] + _m(n0.i0, BigInt(l[4])) + _m(n2.i0, BigInt(l[2])) + _m(n3.i0, BigInt(l[1])));\n  const r0 = _part2(n4.i1 + limbs[5] + _m(n1.i0, BigInt(l[4])) + _m(n3.i0, BigInt(l[2])) + _m(n4.i0, BigInt(l[1])));\n  const r1 = _part2(r0.i1 + limbs[6] + _m(n2.i0, BigInt(l[4])) + _m(n4.i0, BigInt(l[2])));\n  const r2 = _part2(r1.i1 + limbs[7] + _m(n3.i0, BigInt(l[4])));\n  const r3 = _part2(r2.i1 + limbs[8] + _m(n4.i0, BigInt(l[4])));\n  const r4 = r3.i1;\n  return ScalarSub(BigUint64Array.from([r0.i0, r1.i0, r2.i0, r3.i0, r4]), l);\n}\nfunction MulInternal(a, b2) {\n  const z = Array(9);\n  z[0] = _m(a[0], b2[0]);\n  z[1] = _m(a[0], b2[1]) + _m(a[1], b2[0]);\n  z[2] = _m(a[0], b2[2]) + _m(a[1], b2[1]) + _m(a[2], b2[0]);\n  z[3] = _m(a[0], b2[3]) + _m(a[1], b2[2]) + _m(a[2], b2[1]) + _m(a[3], b2[0]);\n  z[4] = _m(a[0], b2[4]) + _m(a[1], b2[3]) + _m(a[2], b2[2]) + _m(a[3], b2[1]) + _m(a[4], b2[0]);\n  z[5] = _m(a[1], b2[4]) + _m(a[2], b2[3]) + _m(a[3], b2[2]) + _m(a[4], b2[1]);\n  z[6] = _m(a[2], b2[4]) + _m(a[3], b2[3]) + _m(a[4], b2[2]);\n  z[7] = _m(a[3], b2[4]) + _m(a[4], b2[3]);\n  z[8] = _m(a[4], b2[4]);\n  return z;\n}\nfunction MontgomeryMul(a, b2) {\n  return MontgomeryReduce(MulInternal(a, b2));\n}\nfunction FromBytesWide(data) {\n  const words = new BigUint64Array(8);\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      words[i] |= (BigInt(data[i * 8 + j]) << BigInt(j * 8)) % U64size;\n    }\n  }\n  const mask = (1n << 52n) - 1n;\n  let lo = new BigUint64Array(5);\n  let hi = new BigUint64Array(5);\n  lo[0] = words[0] & mask;\n  lo[1] = (words[0] >> 52n | words[1] << 12n) & mask;\n  lo[2] = (words[1] >> 40n | words[2] << 24n) & mask;\n  lo[3] = (words[2] >> 28n | words[3] << 36n) & mask;\n  lo[4] = (words[3] >> 16n | words[4] << 48n) & mask;\n  hi[0] = words[4] >> 4n & mask;\n  hi[1] = (words[4] >> 56n | words[5] << 8n) & mask;\n  hi[2] = (words[5] >> 44n | words[6] << 20n) & mask;\n  hi[3] = (words[6] >> 32n | words[7] << 32n) & mask;\n  hi[4] = words[7] >> 20n;\n  lo = MontgomeryMul(lo, R);\n  hi = MontgomeryMul(hi, RR);\n  return ScalarAdd(hi, lo);\n}\nfunction readUint8ArrayIntoBigIntArray(bytes) {\n  const bigInts = [];\n  for (let i = 0; i < bytes.length; i += 8) {\n    let num = 0n;\n    for (let j = i + 7; j >= i; j--) {\n      num = num << 8n | BigInt(bytes[j]);\n    }\n    bigInts.push(num);\n  }\n  return bigInts;\n}\nvar Scalar = class _Scalar {\n  constructor() {\n    __publicField(this, \"bytes\");\n  }\n  static FromBytes(data) {\n    if (data.length !== 32) {\n      throw new Error(`Invalid size of data: should be 32, got ${data.length}`);\n    }\n    const s = new _Scalar();\n    s.bytes = data;\n    return s;\n  }\n  static FromBits(bytes) {\n    if (bytes.length !== 32) {\n      throw new Error(`Invalid size of data: should be 32, got ${bytes.length}`);\n    }\n    const s = new _Scalar();\n    s.bytes = bytes;\n    s.bytes[31] &= 127;\n    return s;\n  }\n  ToBytes() {\n    return this.bytes.slice();\n  }\n  static FromBytesModOrderWide(data) {\n    const tt1 = FromBytesWide(data);\n    return ScalarBigintToBytesForm(tt1);\n  }\n  static ToRadix16(bytes) {\n    const output = [];\n    for (let i = 0; i < 32; i++) {\n      output[2 * i] = bytes[i] & 15;\n      output[2 * i + 1] = bytes[i] >> 4 & 15;\n    }\n    for (let i = 0; i < 63; i++) {\n      const carry = output[i] + 8 >> 4;\n      output[i] -= carry << 4;\n      output[i + 1] += carry;\n    }\n    return output;\n  }\n  static DivideScalarBytesByCofactor(bytes) {\n    const res = new Uint8Array(bytes.length);\n    let low = 0;\n    for (let i = bytes.length - 1; i >= 0; i--) {\n      const r = bytes[i] & 7;\n      bytes[i] >>= 3;\n      bytes[i] += low;\n      res[i] = bytes[i];\n      low = (r << 5) % 256;\n    }\n    return res;\n  }\n  static MultiplyScalarBytesByCofactor(bytes) {\n    const res = new Uint8Array(bytes.length);\n    let high = 0;\n    for (let i = 0; i < bytes.length; i++) {\n      const r = bytes[i] & 224;\n      bytes[i] = bytes[i] << 3;\n      bytes[i] += high;\n      res[i] = bytes[i];\n      high = r >> 5;\n    }\n    return res;\n  }\n  // sbyte[]\n  NonAdjacentForm(size) {\n    const naf = new Array(256).fill(0);\n    const decoded_xU64 = readUint8ArrayIntoBigIntArray(this.ToBytes());\n    const xU64 = [...decoded_xU64, ...new Array(5 - decoded_xU64.length).fill(0n)];\n    const width = 1n << BigInt(size);\n    const windowMask = width - 1n;\n    let pos = 0;\n    let carry = 0n;\n    while (pos < 256) {\n      const u64_idx = Math.floor(pos / 64);\n      const bit_idx = pos % 64;\n      let bit_buf;\n      if (bit_idx < 64 - size) {\n        bit_buf = xU64[Number(u64_idx)] >> BigInt(bit_idx);\n      } else {\n        bit_buf = xU64[u64_idx] >> BigInt(bit_idx) | xU64[u64_idx + 1] << BigInt(64 - bit_idx);\n      }\n      const window = carry + (bit_buf & windowMask);\n      if ((window & 1n) === 0n) {\n        pos += 1;\n        continue;\n      }\n      if (window < width / 2n) {\n        carry = 0n;\n        naf[pos] = Number(window);\n      } else {\n        carry = 1n;\n        naf[pos] = Number(window - width);\n      }\n      pos += size;\n    }\n    return naf;\n  }\n};\n\n// src/fieldElement.ts\nvar LOW_51_BIT_MASK = (1n << 51n) - 1n;\nfunction uint8ArrayToBigIntLE(input) {\n  return BigInt(input[0]) | BigInt(input[1]) << 8n | BigInt(input[2]) << 16n | BigInt(input[3]) << 24n | BigInt(input[4]) << 32n | BigInt(input[5]) << 40n | BigInt(input[6]) << 48n | BigInt(input[7]) << 56n;\n}\nvar WrappedRes = class {\n  constructor() {\n    __publicField(this, \"i0\");\n    __publicField(this, \"i1\");\n  }\n};\nfunction pow22501(fe) {\n  const t0 = fe.Square();\n  const t1 = t0.Square().Square();\n  const t2 = fe.Mul(t1);\n  const t3 = t0.Mul(t2);\n  const t4 = t3.Square();\n  const t5 = t2.Mul(t4);\n  const t6 = t5.Pow2k(5);\n  const t7 = t6.Mul(t5);\n  const t8 = t7.Pow2k(10);\n  const t9 = t8.Mul(t7);\n  const t10 = t9.Pow2k(20);\n  const t11 = t10.Mul(t9);\n  const t12 = t11.Pow2k(10);\n  const t13 = t12.Mul(t7);\n  const t14 = t13.Pow2k(50);\n  const t15 = t14.Mul(t13);\n  const t16 = t15.Pow2k(100);\n  const t17 = t16.Mul(t15);\n  const t18 = t17.Pow2k(50);\n  const t19 = t18.Mul(t13);\n  const pr = Array(2);\n  pr[0] = t19;\n  pr[1] = t3;\n  return pr;\n}\nfunction powP58(e) {\n  const t19 = pow22501(e);\n  const t20 = t19[0].Pow2k(2);\n  const t21 = e.Mul(t20);\n  return t21;\n}\nvar FieldElement = class _FieldElement {\n  constructor(data) {\n    __publicField(this, \"data\", Array(5));\n    this.data[0] = data[0];\n    this.data[1] = data[1];\n    this.data[2] = data[2];\n    this.data[3] = data[3];\n    this.data[4] = data[4];\n  }\n  static FromBytes(bytes) {\n    const res = this.Zero();\n    res.data[0] = uint8ArrayToBigIntLE(bytes.slice(0, 8)) & LOW_51_BIT_MASK;\n    res.data[1] = uint8ArrayToBigIntLE(bytes.slice(6, 6 + 8)) >> 3n & LOW_51_BIT_MASK;\n    res.data[2] = uint8ArrayToBigIntLE(bytes.slice(12, 12 + 8)) >> 6n & LOW_51_BIT_MASK;\n    res.data[3] = uint8ArrayToBigIntLE(bytes.slice(19, 19 + 8)) >> 1n & LOW_51_BIT_MASK;\n    res.data[4] = uint8ArrayToBigIntLE(bytes.slice(24, 24 + 8)) >> 12n & LOW_51_BIT_MASK;\n    return res;\n  }\n  Clone() {\n    return new _FieldElement(this.data.slice());\n  }\n  CtEq(a) {\n    const b1 = this.ToBytes();\n    const b2 = a.ToBytes();\n    if (b1.length !== b2.length) {\n      return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n      if (b1[i] !== b2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  Negate() {\n    return this.Reduce([36028797018963664n - this.data[0], 36028797018963952n - this.data[1], 36028797018963952n - this.data[2], 36028797018963952n - this.data[3], 36028797018963952n - this.data[4]]);\n  }\n  static SqrtRatioI(u, v) {\n    const v3 = v.Square().Mul(v);\n    const v7 = v3.Square().Mul(v);\n    let r = u.Mul(v3).Mul(powP58(u.Mul(v7)));\n    const check = v.Mul(r.Square());\n    const i = SQRT_M1;\n    const correct_sign_sqrt = check.CtEq(u);\n    const flipped_sign_sqrt = check.CtEq(u.Negate());\n    const flipped_sign_sqrt_i = check.CtEq(u.Negate().Mul(i));\n    const r_prime = r.Mul(SQRT_M1);\n    r.ConditionalAssign(r_prime, flipped_sign_sqrt || flipped_sign_sqrt_i);\n    const r_is_negative = r.IsNegative();\n    if (r_is_negative) {\n      r = r.Negate();\n    }\n    const was_nonzero_square = correct_sign_sqrt || flipped_sign_sqrt;\n    const res = new WrappedRes();\n    res.i0 = was_nonzero_square;\n    res.i1 = r;\n    return res;\n  }\n  ConditionalNegate(choice) {\n    const nself = this.Negate();\n    this.ConditionalAssign(nself, choice);\n  }\n  IsNegative() {\n    const dt = this.data[0] % 256n;\n    const dti = Number(dt) & 1;\n    return dti > 0;\n  }\n  ConditionalAssign(other, choice) {\n    this.data[0] = choice ? other.data[0] : this.data[0];\n    this.data[1] = choice ? other.data[1] : this.data[1];\n    this.data[2] = choice ? other.data[2] : this.data[2];\n    this.data[3] = choice ? other.data[3] : this.data[3];\n    this.data[4] = choice ? other.data[4] : this.data[4];\n  }\n  Pow2k(k) {\n    const a = this.Clone().data;\n    while (true) {\n      const a3_19 = 19n * a[3];\n      const a4_19 = 19n * a[4];\n      const c0 = _m(a[0], a[0]) + 2n * (_m(a[1], a4_19) + _m(a[2], a3_19));\n      let c1 = _m(a[3], a3_19) + 2n * (_m(a[0], a[1]) + _m(a[2], a4_19));\n      let c2 = _m(a[1], a[1]) + 2n * (_m(a[0], a[2]) + _m(a[4], a3_19));\n      let c3 = _m(a[4], a4_19) + 2n * (_m(a[0], a[3]) + _m(a[1], a[2]));\n      let c4 = _m(a[2], a[2]) + 2n * (_m(a[0], a[4]) + _m(a[1], a[3]));\n      c1 += c0 >> 51n;\n      a[0] = c0 % U64size & LOW_51_BIT_MASK;\n      c2 += c1 >> 51n;\n      a[1] = c1 % U64size & LOW_51_BIT_MASK;\n      c3 += c2 >> 51n;\n      a[2] = c2 % U64size & LOW_51_BIT_MASK;\n      c4 += c3 >> 51n;\n      a[3] = c3 % U64size & LOW_51_BIT_MASK;\n      const carry = c4 >> 51n;\n      a[4] = c4 % U64size & LOW_51_BIT_MASK;\n      a[0] = a[0] + carry * 19n % U64size;\n      a[1] += a[0] >> 51n;\n      a[0] &= LOW_51_BIT_MASK;\n      k--;\n      if (k === 0) {\n        break;\n      }\n    }\n    return new _FieldElement(a);\n  }\n  static One() {\n    return new _FieldElement([1n, 0n, 0n, 0n, 0n]);\n  }\n  static Zero() {\n    return new _FieldElement([0n, 0n, 0n, 0n, 0n]);\n  }\n  Mul(second) {\n    const a = this.data;\n    const b2 = second;\n    const b1_19 = b2.data[1] * 19n;\n    const b2_19 = b2.data[2] * 19n;\n    const b3_19 = b2.data[3] * 19n;\n    const b4_19 = b2.data[4] * 19n;\n    const c0 = _m(a[0], b2.data[0]) + _m(a[4], b1_19) + _m(a[3], b2_19) + _m(a[2], b3_19) + _m(a[1], b4_19);\n    let c1 = _m(a[1], b2.data[0]) + _m(a[0], b2.data[1]) + _m(a[4], b2_19) + _m(a[3], b3_19) + _m(a[2], b4_19);\n    let c2 = _m(a[2], b2.data[0]) + _m(a[1], b2.data[1]) + _m(a[0], b2.data[2]) + _m(a[4], b3_19) + _m(a[3], b4_19);\n    let c3 = _m(a[3], b2.data[0]) + _m(a[2], b2.data[1]) + _m(a[1], b2.data[2]) + _m(a[0], b2.data[3]) + _m(a[4], b4_19);\n    let c4 = _m(a[4], b2.data[0]) + _m(a[3], b2.data[1]) + _m(a[2], b2.data[2]) + _m(a[1], b2.data[3]) + _m(a[0], b2.data[4]);\n    const output = Array(5);\n    c1 += c0 >> 51n;\n    output[0] = (c0 & LOW_51_BIT_MASK) % U64size;\n    c2 += c1 >> 51n;\n    output[1] = (c1 & LOW_51_BIT_MASK) % U64size;\n    c3 += c2 >> 51n;\n    output[2] = (c2 & LOW_51_BIT_MASK) % U64size;\n    c4 += c3 >> 51n;\n    output[3] = (c3 & LOW_51_BIT_MASK) % U64size;\n    const carry = (c4 >> 51n) % U64size;\n    output[4] = (c4 & LOW_51_BIT_MASK) % U64size;\n    output[0] = output[0] + carry * 19n;\n    output[1] += output[0] >> 51n;\n    output[0] &= LOW_51_BIT_MASK;\n    return new _FieldElement(output);\n  }\n  Reduce(limbs) {\n    const c0 = limbs[0] >> 51n;\n    const c1 = limbs[1] >> 51n;\n    const c2 = limbs[2] >> 51n;\n    const c3 = limbs[3] >> 51n;\n    const c4 = limbs[4] >> 51n;\n    limbs[0] &= LOW_51_BIT_MASK;\n    limbs[1] &= LOW_51_BIT_MASK;\n    limbs[2] &= LOW_51_BIT_MASK;\n    limbs[3] &= LOW_51_BIT_MASK;\n    limbs[4] &= LOW_51_BIT_MASK;\n    limbs[0] += c4 * 19n;\n    limbs[1] += c0;\n    limbs[2] += c1;\n    limbs[3] += c2;\n    limbs[4] += c3;\n    return new _FieldElement(limbs);\n  }\n  Add(element) {\n    const f = new _FieldElement(this.data);\n    for (let i = 0; i < 5; i++) {\n      f.data[i] += element.data[i];\n    }\n    return f;\n  }\n  Sub(x) {\n    return this.Reduce([this.data[0] + 36028797018963664n - x.data[0], this.data[1] + 36028797018963952n - x.data[1], this.data[2] + 36028797018963952n - x.data[2], this.data[3] + 36028797018963952n - x.data[3], this.data[4] + 36028797018963952n - x.data[4]]);\n  }\n  Square() {\n    return this.Pow2k(1);\n  }\n  Square2() {\n    const square = this.Pow2k(1);\n    for (let i = 0; i < 5; i++) {\n      square.data[i] *= 2n;\n    }\n    return square;\n  }\n  BitXor(a) {\n    const res = new _FieldElement(this.data);\n    res.data[0] ^= a.data[0];\n    res.data[1] ^= a.data[1];\n    res.data[2] ^= a.data[2];\n    res.data[3] ^= a.data[3];\n    res.data[4] ^= a.data[4];\n    return res;\n  }\n  BitAnd(a) {\n    const res = new _FieldElement(this.data);\n    res.data[0] &= a;\n    res.data[1] &= a;\n    res.data[2] &= a;\n    res.data[3] &= a;\n    res.data[4] &= a;\n    return res;\n  }\n  ToBytes() {\n    const cp = this.Clone();\n    const limbs = cp.Reduce(this.Clone().data).data;\n    let q = limbs[0] + 19n >> 51n;\n    q = limbs[1] + q >> 51n;\n    q = limbs[2] + q >> 51n;\n    q = limbs[3] + q >> 51n;\n    q = limbs[4] + q >> 51n;\n    limbs[0] += 19n * q;\n    const low_51_bit_mask = (1n << 51n) - 1n;\n    limbs[1] += limbs[0] >> 51n;\n    limbs[0] = limbs[0] & low_51_bit_mask;\n    limbs[2] += limbs[1] >> 51n;\n    limbs[1] = limbs[1] & low_51_bit_mask;\n    limbs[3] += limbs[2] >> 51n;\n    limbs[2] = limbs[2] & low_51_bit_mask;\n    limbs[4] += limbs[3] >> 51n;\n    limbs[3] = limbs[3] & low_51_bit_mask;\n    limbs[4] = limbs[4] & low_51_bit_mask;\n    const s = new Uint8Array(32);\n    s[0] = Number(limbs[0] % 256n);\n    s[1] = Number((limbs[0] >> 8n) % 256n);\n    s[2] = Number((limbs[0] >> 16n) % 256n);\n    s[3] = Number((limbs[0] >> 24n) % 256n);\n    s[4] = Number((limbs[0] >> 32n) % 256n);\n    s[5] = Number((limbs[0] >> 40n) % 256n);\n    s[6] = Number((limbs[0] >> 48n) % 256n | (limbs[1] << 3n) % 256n);\n    s[7] = Number((limbs[1] >> 5n) % 256n);\n    s[8] = Number((limbs[1] >> 13n) % 256n);\n    s[9] = Number((limbs[1] >> 21n) % 256n);\n    s[10] = Number((limbs[1] >> 29n) % 256n);\n    s[11] = Number((limbs[1] >> 37n) % 256n);\n    s[12] = Number((limbs[1] >> 45n | limbs[2] << 6n) % 256n);\n    s[13] = Number((limbs[2] >> 2n) % 256n);\n    s[14] = Number((limbs[2] >> 10n) % 256n);\n    s[15] = Number((limbs[2] >> 18n) % 256n);\n    s[16] = Number((limbs[2] >> 26n) % 256n);\n    s[17] = Number((limbs[2] >> 34n) % 256n);\n    s[18] = Number((limbs[2] >> 42n) % 256n);\n    s[19] = Number((limbs[2] >> 50n | limbs[3] << 1n) % 256n);\n    s[20] = Number((limbs[3] >> 7n) % 256n);\n    s[21] = Number((limbs[3] >> 15n) % 256n);\n    s[22] = Number((limbs[3] >> 23n) % 256n);\n    s[23] = Number((limbs[3] >> 31n) % 256n);\n    s[24] = Number((limbs[3] >> 39n) % 256n);\n    s[25] = Number((limbs[3] >> 47n | limbs[4] << 4n) % 256n);\n    s[26] = Number((limbs[4] >> 4n) % 256n);\n    s[27] = Number((limbs[4] >> 12n) % 256n);\n    s[28] = Number((limbs[4] >> 20n) % 256n);\n    s[29] = Number((limbs[4] >> 28n) % 256n);\n    s[30] = Number((limbs[4] >> 36n) % 256n);\n    s[31] = Number((limbs[4] >> 44n) % 256n);\n    return s;\n  }\n  Invert() {\n    const r = pow22501(this);\n    const t20 = r[0].Pow2k(5);\n    const t21 = t20.Mul(r[1]);\n    return t21;\n  }\n};\nvar SQRT_M1 = new FieldElement([1718705420411056n, 234908883556509n, 2233514472574048n, 2117202627021982n, 765476049583133n]);\n\n// src/projectivePoint.ts\nvar ProjectivePoint = class _ProjectivePoint {\n  constructor() {\n    __publicField(this, \"X\");\n    __publicField(this, \"Y\");\n    __publicField(this, \"Z\");\n  }\n  Double() {\n    const XX = this.X.Square();\n    const YY = this.Y.Square();\n    const ZZ2 = this.Z.Square2();\n    const X_plus_Y = this.X.Add(this.Y);\n    const X_plus_Y_sq = X_plus_Y.Square();\n    const YY_plus_XX = YY.Add(XX);\n    const YY_minus_XX = YY.Sub(XX);\n    const r = new CompletedPoint();\n    r.X = X_plus_Y_sq.Sub(YY_plus_XX);\n    r.Y = YY_plus_XX;\n    r.Z = YY_minus_XX;\n    r.T = ZZ2.Sub(YY_minus_XX);\n    return r;\n  }\n  static Identity() {\n    const r = new _ProjectivePoint();\n    r.X = FieldElement.Zero();\n    r.Y = FieldElement.One();\n    r.Z = FieldElement.One();\n    return r;\n  }\n  ToExtended() {\n    return EdwardsPoint.EdwardsPointFromElems(this.X.Mul(this.Z), this.Y.Mul(this.Z), this.Z.Square(), this.X.Mul(this.Y));\n  }\n};\n\n// src/completedPoint.ts\nvar CompletedPoint = class {\n  constructor() {\n    __publicField(this, \"X\");\n    __publicField(this, \"Y\");\n    __publicField(this, \"Z\");\n    __publicField(this, \"T\");\n  }\n  ToProjective() {\n    const r = new ProjectivePoint();\n    r.X = this.X.Mul(this.T);\n    r.Y = this.Y.Mul(this.Z);\n    r.Z = this.Z.Mul(this.T);\n    return r;\n  }\n  ToExtended() {\n    return EdwardsPoint.EdwardsPointFromElems(this.X.Mul(this.T), this.Y.Mul(this.Z), this.Z.Mul(this.T), this.X.Mul(this.Y));\n  }\n};\n\n// src/affineNielsPoint.ts\nvar AffineNielsPoint = class _AffineNielsPoint {\n  constructor() {\n    __publicField(this, \"Y_plus_X\");\n    __publicField(this, \"Y_minus_X\");\n    __publicField(this, \"XY2d\");\n    this.Y_plus_X = FieldElement.One();\n    this.Y_minus_X = FieldElement.One();\n    this.XY2d = FieldElement.Zero();\n  }\n  static FromElements(Y_plus_X, Y_minus_X, XY2d) {\n    const res = new _AffineNielsPoint();\n    res.Y_plus_X = Y_plus_X;\n    res.Y_minus_X = Y_minus_X;\n    res.XY2d = XY2d;\n    return res;\n  }\n  static FromArray(array) {\n    if (array.length !== 15) {\n      throw new Error(\"Array length must be 15\");\n    }\n    return _AffineNielsPoint.FromElements(new FieldElement(array.slice(0, 5)), new FieldElement(array.slice(5, 10)), new FieldElement(array.slice(10, 15)));\n  }\n  static FromStringInRadix36Form(param) {\n    const array = param.split(\",\").map(x => BigInt(parseInt(x, 36)));\n    if (array.length !== 15) {\n      throw new Error(\"Array length must be 15\");\n    }\n    return _AffineNielsPoint.FromElements(new FieldElement(array.slice(0, 5)), new FieldElement(array.slice(5, 10)), new FieldElement(array.slice(10, 15)));\n  }\n  ConditionalAssign(a, choice) {\n    this.Y_plus_X.ConditionalAssign(a.Y_plus_X, choice);\n    this.Y_minus_X.ConditionalAssign(a.Y_minus_X, choice);\n    this.XY2d.ConditionalAssign(a.XY2d, choice);\n  }\n  BitXor(a) {\n    const r = new _AffineNielsPoint();\n    r.Y_plus_X = this.Y_plus_X.BitXor(a.Y_plus_X);\n    r.Y_minus_X = this.Y_minus_X.BitXor(a.Y_minus_X);\n    r.XY2d = this.XY2d.BitXor(this.XY2d);\n    return r;\n  }\n  ConditionalNegate(choice) {\n    const nself = this.Negate();\n    this.ConditionalAssign(nself, choice);\n  }\n  Negate() {\n    const r = new _AffineNielsPoint();\n    r.Y_plus_X = this.Y_minus_X.Clone();\n    r.Y_minus_X = this.Y_plus_X.Clone();\n    r.XY2d = this.XY2d.Negate();\n    return r;\n  }\n};\n\n// src/projectiveNielsPoint.ts\nvar ProjectiveNielsPoint = class _ProjectiveNielsPoint {\n  constructor() {\n    __publicField(this, \"Y_plus_X\");\n    __publicField(this, \"Y_minus_X\");\n    __publicField(this, \"Z\");\n    __publicField(this, \"T2d\");\n    this.Y_plus_X = FieldElement.Zero();\n    this.Y_minus_X = FieldElement.Zero();\n    this.Z = FieldElement.Zero();\n    this.T2d = FieldElement.Zero();\n  }\n  BitXor(a) {\n    const r = new _ProjectiveNielsPoint();\n    r.Y_plus_X = this.Y_plus_X.BitXor(a.Y_plus_X);\n    r.Y_minus_X = this.Y_minus_X.BitXor(a.Y_minus_X);\n    r.Z = this.Z.BitXor(a.Z);\n    r.T2d = this.T2d.BitXor(a.T2d);\n    return r;\n  }\n  BitAnd(a) {\n    const aa = BigInt(a);\n    const r = new _ProjectiveNielsPoint();\n    r.Y_plus_X = this.Y_plus_X.BitAnd(aa);\n    r.Y_minus_X = this.Y_minus_X.BitAnd(aa);\n    r.Z = this.Z.BitAnd(aa);\n    r.T2d = this.T2d.BitAnd(aa);\n    return r;\n  }\n  Negate() {\n    const r = new _ProjectiveNielsPoint();\n    r.Y_plus_X = this.Y_plus_X.Negate();\n    r.Y_minus_X = this.Y_minus_X.Negate();\n    r.Z = this.Z.Negate();\n    r.T2d = this.T2d.Negate();\n    return r;\n  }\n  Copy() {\n    const r = new _ProjectiveNielsPoint();\n    r.Y_plus_X = this.Y_plus_X.Clone();\n    r.Y_minus_X = this.Y_minus_X.Clone();\n    r.Z = this.Z.Clone();\n    r.T2d = this.T2d.Clone();\n    return r;\n  }\n  GetPoint() {\n    return this;\n  }\n  FromPoint(a) {\n    this.Y_plus_X = a.Y_plus_X;\n    this.Y_minus_X = a.Y_minus_X;\n    this.Z = a.Z;\n    this.T2d = a.T2d;\n  }\n  ConditionalAssign(a, choice) {\n    const mask = choice ? 65535 : 0;\n    this.FromPoint(this.GetPoint().BitXor(this.BitXor(a).BitAnd(mask)));\n  }\n  ConditionalNegate(choice) {\n    const p = this.GetPoint();\n    this.ConditionalAssign(p, choice);\n  }\n};\n\n// src/edwardsPoint.ts\nvar EDWARDS_D2 = new FieldElement([1859910466990425n, 932731440258426n, 1072319116312658n, 1815898335770999n, 633789495995903n]);\nvar EDWARDS_D = new FieldElement([929955233495203n, 466365720129213n, 1662059464998953n, 2033849074728123n, 1442794654840575n]);\nvar EdwardsPoint = class _EdwardsPoint {\n  constructor() {\n    __publicField(this, \"X\");\n    __publicField(this, \"Y\");\n    __publicField(this, \"Z\");\n    __publicField(this, \"T\");\n  }\n  FromElems(x, y, z, t) {\n    this.X = x;\n    this.Y = y;\n    this.Z = z;\n    this.T = t;\n  }\n  static EdwardsPointFromElems(x, y, z, t) {\n    const ep = new _EdwardsPoint();\n    ep.X = x;\n    ep.Y = y;\n    ep.Z = z;\n    ep.T = t;\n    return ep;\n  }\n  Equals(a) {\n    let result = true;\n    for (let i = 0; i < 5; i++) {\n      result = result && this.X.data[i] === a.X.data[i] && this.Y.data[i] === a.Y.data[i] && this.Z.data[i] === a.Z.data[i] && this.T.data[i] === a.T.data[i];\n    }\n    return result;\n  }\n  Copy() {\n    const ep = new _EdwardsPoint();\n    ep.FromElems(this.X, this.Y, this.Z, this.T);\n    return ep;\n  }\n  static FromCompressedPoint(bytes) {\n    const s = FieldElement.FromBytes(bytes);\n    if (s.IsNegative()) {\n      throw new Error(\"Compressed point decompression error: s is negative\");\n    }\n    const one = FieldElement.One();\n    const ss = s.Square();\n    const u1 = one.Sub(ss);\n    const u2 = one.Add(ss);\n    const u2_sqr = u2.Square();\n    const nEdwardsD = EDWARDS_D.Negate();\n    const v = nEdwardsD.Mul(u1.Square()).Sub(u2_sqr);\n    const I = FieldElement.SqrtRatioI(FieldElement.One(), v.Mul(u2_sqr));\n    const Dx = I.i1.Mul(u2);\n    const Dy = I.i1.Mul(Dx).Mul(v);\n    const x = s.Add(s).Mul(Dx);\n    const x_neg = x.IsNegative();\n    x.ConditionalNegate(x_neg);\n    const y = u1.Mul(Dy);\n    const t = x.Mul(y);\n    return _EdwardsPoint.EdwardsPointFromElems(x, y, one, t);\n  }\n  static Double(point) {\n    return point.ToProjective().Double().ToExtended();\n  }\n  /// Compute \\\\([2\\^k] P \\\\) by successive doublings. Requires \\\\( k > 0 \\\\).\n  MulByPow2(k) {\n    let r;\n    let s = this.ToProjective();\n    for (let i = 0; i < k - 1; i++) {\n      r = s.Double();\n      s = r.ToProjective();\n    }\n    return s.Double().ToExtended();\n  }\n  static Identity() {\n    return _EdwardsPoint.EdwardsPointFromElems(FieldElement.Zero(), FieldElement.One(), FieldElement.One(), FieldElement.Zero());\n  }\n  Negate() {\n    return _EdwardsPoint.EdwardsPointFromElems(this.X.Negate(), this.Y, this.Z, this.T.Negate());\n  }\n  ToExtended() {\n    return _EdwardsPoint.EdwardsPointFromElems(this.X.Mul(this.T), this.Y.Mul(this.Z), this.Z.Mul(this.T), this.X.Mul(this.Y));\n  }\n  AddPnp(other) {\n    const Y_plus_X = this.Y.Add(this.X);\n    const Y_minus_X = this.Y.Sub(this.X);\n    const PP = Y_plus_X.Mul(other.Y_plus_X);\n    const MM = Y_minus_X.Mul(other.Y_minus_X);\n    const TT2d = this.T.Mul(other.T2d);\n    const ZZ = this.Z.Mul(other.Z);\n    const ZZ2 = ZZ.Add(ZZ);\n    const cp = new CompletedPoint();\n    cp.X = PP.Sub(MM);\n    cp.Y = PP.Add(MM);\n    cp.Z = ZZ2.Add(TT2d);\n    cp.T = ZZ2.Sub(TT2d);\n    return cp;\n  }\n  AddAnp(other) {\n    const Y_plus_X = this.Y.Add(this.X);\n    const Y_minus_X = this.Y.Sub(this.X);\n    const PP = Y_plus_X.Mul(other.Y_plus_X);\n    const MM = Y_minus_X.Mul(other.Y_minus_X);\n    const Txy2d = this.T.Mul(other.XY2d);\n    const Z2 = this.Z.Add(this.Z);\n    const cp = new CompletedPoint();\n    cp.X = PP.Sub(MM);\n    cp.Y = PP.Add(MM);\n    cp.Z = Z2.Add(Txy2d);\n    cp.T = Z2.Sub(Txy2d);\n    return cp;\n  }\n  AddEp(other) {\n    return this.AddPnp(other.ToProjectiveNiels()).ToExtended();\n  }\n  SubAnp(other) {\n    const Y_plus_X = this.Y.Add(this.X);\n    const Y_minus_X = this.Y.Sub(this.X);\n    const PM = Y_plus_X.Mul(other.Y_minus_X);\n    const MP = Y_minus_X.Mul(other.Y_plus_X);\n    const Txy2d = this.T.Mul(other.XY2d);\n    const Z2 = this.Z.Add(this.Z);\n    const cp = new CompletedPoint();\n    cp.X = PM.Sub(MP);\n    cp.Y = PM.Add(MP);\n    cp.Z = Z2.Sub(Txy2d);\n    cp.T = Z2.Add(Txy2d);\n    return cp;\n  }\n  SubPnp(other) {\n    const Y_plus_X = this.Y.Add(this.X);\n    const Y_minus_X = this.Y.Sub(this.X);\n    const PM = Y_plus_X.Mul(other.Y_minus_X);\n    const MP = Y_minus_X.Mul(other.Y_plus_X);\n    const TT2d = this.T.Mul(other.T2d);\n    const ZZ = this.Z.Mul(other.Z);\n    const ZZ2 = ZZ.Add(ZZ);\n    const cp = new CompletedPoint();\n    cp.X = PM.Sub(MP);\n    cp.Y = PM.Add(MP);\n    cp.Z = ZZ2.Sub(TT2d);\n    cp.T = ZZ2.Add(TT2d);\n    return cp;\n  }\n  ToProjectiveNiels() {\n    const cp = new ProjectiveNielsPoint();\n    cp.Y_plus_X = this.Y.Add(this.X);\n    cp.Y_minus_X = this.Y.Sub(this.X);\n    cp.Z = this.Z;\n    cp.T2d = this.T.Mul(EDWARDS_D2);\n    return cp;\n  }\n  ToProjective() {\n    const cp = new ProjectivePoint();\n    cp.X = this.X;\n    cp.Y = this.Y;\n    cp.Z = this.Z;\n    return cp;\n  }\n  ToAffineNiels() {\n    const xy2d = this.X.Mul(this.Y).Mul(EDWARDS_D2);\n    const cp = new AffineNielsPoint();\n    cp.Y_plus_X = this.Y.Add(this.X);\n    cp.Y_minus_X = this.Y.Sub(this.X);\n    cp.XY2d = xy2d;\n    return cp;\n  }\n};\n\n// src/nafLookupTable.ts\nvar NafLookupTable5PNP = class {\n  constructor() {\n    __publicField(this, \"Pnp\");\n  }\n  Select(v) {\n    return this.Pnp[v / 2];\n  }\n};\nvar NafLookupTable = class {\n  constructor() {\n    __publicField(this, \"lookupTable\");\n  }\n  NafLookupTable(lookupTable) {\n    this.lookupTable = lookupTable;\n  }\n  Select(v) {\n    return this.lookupTable.affineNielsPoints[v / 2];\n  }\n  static FromEdwardsPoint(points) {\n    const Ai = new Array(8);\n    for (let i = 0; i < 8; i++) {\n      Ai[i] = points.ToProjectiveNiels();\n    }\n    const A2 = EdwardsPoint.Double(points);\n    for (let i = 0; i <= 6; i++) {\n      Ai[i + 1] = A2.AddPnp(Ai[i]).ToExtended().ToProjectiveNiels();\n    }\n    const nlt = new NafLookupTable5PNP();\n    nlt.Pnp = Ai;\n    return nlt;\n  }\n};\n\n// src/edwardsBasepointTable.ts\nvar EdwardsBasepointTable = class {\n  constructor(lt = []) {\n    __publicField(this, \"lt\");\n    this.lt = lt;\n  }\n  Mul(sclr) {\n    const a = Scalar.ToRadix16(sclr.bytes);\n    let P = EdwardsPoint.Identity();\n    for (let i = 0; i < 64; i++) {\n      if (i % 2 === 1) {\n        const s1 = this.lt[Math.floor(i / 2)].Select(a[i]);\n        const s2 = P.AddAnp(s1);\n        const s3 = s2.ToExtended();\n        P = s3;\n      }\n    }\n    P = P.MulByPow2(4);\n    for (let i = 0; i < 64; i++) {\n      if (i % 2 === 0) {\n        P = P.AddAnp(this.lt[Math.floor(i / 2)].Select(a[i])).ToExtended();\n      }\n    }\n    return P;\n  }\n};\nvar _LookupTable = class _LookupTable {\n  constructor() {\n    __publicField(this, \"ep\");\n    __publicField(this, \"affineNielsPoints\");\n  }\n  static FromEdward(ep) {\n    const res = new _LookupTable();\n    res.ep = ep;\n    res.affineNielsPoints = new AffineNielsPoint[8]();\n    res.affineNielsPoints[0] = ep.ToAffineNiels();\n    for (let j = 0; j < 7; j++) {\n      res.affineNielsPoints[j + 1] = ep.AddAnp(res.affineNielsPoints[j]).ToExtended().ToAffineNiels();\n    }\n    return res;\n  }\n  static FromANPArray(p) {\n    const res = new _LookupTable();\n    res.affineNielsPoints = p;\n    return res;\n  }\n  static FromArrayOfStringsInRadix36Form(table) {\n    return _LookupTable.FromANPArray(table.map(AffineNielsPoint.FromStringInRadix36Form));\n  }\n  // x - sbyte\n  Select(x) {\n    const xmask = x >> 7;\n    const xabs = x + xmask ^ xmask;\n    const t = new AffineNielsPoint();\n    for (let i = 1; i < 9; i++) {\n      t.ConditionalAssign(this.affineNielsPoints[i - 1], xabs === i);\n    }\n    const neg_mask = xmask & 1;\n    t.ConditionalNegate(neg_mask === 1);\n    return t;\n  }\n  static From(ep) {\n    return _LookupTable.FromEdward(ep);\n  }\n};\n__publicField(_LookupTable, \"FromBigintMatrix\", table => {\n  return _LookupTable.FromANPArray(table.map(AffineNielsPoint.FromArray));\n});\nvar LookupTable = _LookupTable;\n\n// src/tables.ts\nvar oddMultiplesAffinePointsInStringRadix36Form = [\"yuw1d7ohv6,ola5qtbuuu,otp7yucl9y,eel1loivjl,niwkyful3f,m82pv8bwe,20jxbhurhe,67rvlup4sc,3bz0fuxjck,by7j4n28ox,2ysqonijjc,cehg3i7i49,e03f4y6pb4,7u8rkjn3se,j8m0w4201y\", \"frq2ailels,gxz46s5gbo,b5aa5uikgg,ykznlfkz0v,l5boa0000e,347l7ponl1,lfz2mxs0jw,edbuo29w7j,ee2gvkgb9s,7eezzyyw8t,i81aass13d,bteze6jfdh,ailvyozgy4,6mak0o2ime,fm7k0we3yz\", \"7kxaay9xcw,nhboz4phdu,uheea0ahwi,vrheeurh9o,tbkhe6zztr,46qlyo30sa,5zok62dgqa,4cvifd3adv,88yofi7wik,3oro8ffagl,ap1mri4l8l,2pgzzemq3b,jargu8y0ps,95gyia98jx,bpyqr4m56j\", \"spx3qe9gvz,kc46eic4te,ptfkdlcy50,pmm0dv1b0z,c56yziv3yg,jvt0ojrgz5,6nvh5lhwel,138rxhmg79,awzdbtmwnd,53jicbsoc1,9i3yxjowwy,2fk3hg4j74,56ksm07bel,wlu2lpmwc,l8o6pnqdbt\", \"hr02oe750c,ge5o3jqsth,s0lg0ous8p,l9t5w68ici,vazqjajg0n,gzp84xu3xg,j1f4oro2nh,f6prasj1fq,hemmy8tylv,crwnd7st6x,dlt6ghwh0b,e30hlvnowm,kav1ue4fm7,fa24ztrmq1,k1uavs9yq0\", \"15ktisvac4e,rddovhgagm,fy0qknlrzu,lqfanx7ix7,bifpfmu860,kdw44w8vuw,ed565x982z,6590l3oybx,ae316ww59x,49u344m9gc,8sruvztk2x,bi13ys5b0l,c8g574sbte,cv2gdefopm,ap7za1r6qn\", \"o9uxyv9cod,vfbfmqiqct,bf56j3ele5,pap8r9vd6l,6479gg0tbi,jewgn6k043,3btj8f7lzh,7i8wuca3e7,6g7n65qkwl,ezrwnxsle,1qscpkpp4o,ha0d9ytsa4,icucsapuai,bmiiwauatk,cq8ejgx193\", \"iu5r5lhnkw,qpj1lg7grd,llo02ho3yh,9xmibug31c,gye4dq6iu6,ajfbo5w3kb,cj26raoadd,it3cgbu0ry,kfqc2hccn7,bq8fuh6ltx,6tm0eai6ty,4xap23rhdf,kd4go6hw3h,bfyn01dlft,e1tobl2cst\", \"hx02gbaa9a,qxq3ecca54,ha55qiq2de,ubzy8tz22f,1534xj1z3wk,9rnqltgkuf,7v84to2802,hi3nx4x5ts,b69dcd5tw4,joqzx5zcsi,46q09qv4us,k3aavs166m,g9h4731is1,erw61jubep,cch1k0r08e\", \"kqgabxlbfv,dnu20ziqni,zruqa25sqw,ls0ujq8jq1,g1gnq67nc9,emgk3codaf,a2ev4o4akw,4yptk3bcfv,9h7y7zcg03,5tg50j0u3i,2m8sk1i2jr,bqsies6qaq,ve0qcnjoq,563z0spa4o,ch39cvygpu\", \"yz6vqt5upg,ccls2549z7,fuo6ojngjn,z8iyzg621w,10xi777yih1,d6jdqoigl,dts5af06el,5p2galm1wq,h51bdpvjm8,kmsz5qp0pw,87cujat71b,jxedl02d6q,i98j7hgx9x,8eovezbh73,fnjhvfi3x6\", \"1085eflcsxv,czlyoai7u9,4wciwdngx4,q8tte073bj,bw8ywvn2m0,gah4tcp1eh,8xof3ddrvg,18p4y4xlyo,gzxggm81gt,a0qtrglbx,14kbhkqvsz,58u9281ya4,14wz9zrx5l,lktkxbysn2,3n94gveac2\", \"axv9tdfg9x,jurj6cjh73,ibi0cmkon0,yttj1qagwi,14qht6c1spk,483bz3438o,9lq3bwy1ah,2cblh330nn,gakatd37ra,kwdfpugl0f,km6rfs1unq,7fkaudlzbr,dzhi1ksp8t,i0nwparsve,jt5adaqy51\", \"6nq4vsekz6,s2cfwwl4zs,bv9eakscpf,r7ndz1juf9,l0eygd6ntq,h4v8uj740,csjsb5whm8,b75e1miunm,f423hi3yqs,db4h1tub8f,ir3gowe4wj,fnpq702cta,24hkm6qrhy,k4dep4cdqd,jemdvtkh54\", \"naee4qp81a,kao7fvgmls,il1zozbrj7,ld2mok2spo,ndg1noik7k,a1ktpfqq7o,ces1bm0qv7,3lzplgcfip,5rhdjvxtes,3elpg8om0d,9lqw48pucl,ai28oxlqaa,4hg8wstcg,bns5yamn70,af5w7n0m27\", \"e3frcj98nn,jxqp4ecic5,10w009a6l0v,apla2o383y,l8j0basrlz,95el11jr5t,2igc22c8f1,701rj40zlv,221r4zwmw8,1tp7uyfomv,83z1ufzd2g,gr5re0kiy,2286jvriu9,au9d7ja3yr,6zydddis6n\", \"mr98nclixe,wgkkmbt0b2,jqgfx7ib8f,ibuhk6h885,uzvskmreu1,fea6yi6zzx,i5kdshnvd6,j7gric29pu,8z4437mt25,kj4hdfvrbr,e253fcb33e,11nf5knv4h,f3q0y4xu4,bzhu0dgr1d,ewr22x0z4i\", \"ywd19ly9q6,nbdtngcbnk,pa0nmqh3ro,i97iixhffv,macyh5gxck,7r4aike2mt,kqiabxvlr8,b4pxmzpcpy,h7uj0it8tn,iyc8apfng,5g7ske2e96,23n72h1fa,n3tdwb73a,68l13wmc6h,5o6x1z5o4l\", \"9s9nlfgome,123dlh2dq96,fwr2gflrsf,ord7n1o5wh,k9v17xxk17,2gz4iy699c,gk3v0atjx8,ezhhvr83xo,48zjaowtq4,i9nh5hr4vy,638isuo2ev,cdquf4szpt,1zxv2r4m08,cm075c0d2,epw412y4c5\", \"gh73lsamw6,nq73q4a1h1,pyf1gxc58n,r6qdlz22px,wtpaqpu644,frdnyhcl3h,a1enkeyj1r,a9bttrf2ge,gjo38dbasz,kxx9t92lwd,8t8l4lybu3,11m5f6jthi,9xyvl8k4tx,34o9skrhhs,jkbrg0wqyw\", \"hdqn96chtz,s6xplkk4pc,phr0uocbva,dng7v1g232,lhkogfzt6w,b9ru4rt6xh,lsjyzali04,eo1o0kb21x,6jqiw9as9m,b508dnpq4s,jqma6034wa,h46h366wbn,44h4uakuju,acgytivsre,5oslg9eo6k\", \"lilbgzzubp,cw3l4jf26p,orefmiauxa,13c2j33ujt3,tptrgk4vl9,dud2j09077,h9yltwwe5q,bxkhslsxkn,huo5p42ch7,9tpjj5ds50,t2vka0lzx,g7lkyb3cu0,61bo5ux45m,cx6jvab5ax,sptmo9db5\", \"nixjr0f31t,3z5iljkmdl,fq994pvt55,t2vizuusgs,l0utp5sx2e,hzggnikzge,2z5mnjks8e,ej0guqi2xx,8aol6t14a8,e5xw48m2ci,6j14wapx1d,g8mjzwt0o9,abhl0890u5,66wx4tj6xx,iul0zrmrmc\", \"hoi4cnduo6,30s1vlrxmn,sssh46o8tm,rkypp0ea6n,ga7t5t78wz,kgg314tvhf,23die76xu8,6n7n9ty2w8,8mc1ekaude,kaejpt4cvi,dzi8t7fyjl,a61rafw4vq,d7o8r6ac37,d749aym99r,jkvq3j6l30\", \"anrr6zjf0c,p25ag7porx,12ai91caoi7,gg2dkq67kz,xicih3tqpm,w1z8ofbt8,i3mwtzwxvf,5mi8hnu51v,g5b5ijoyer,2j8e7z2atz,f1tjl5o0i2,exlpcnwdfc,7qyv2jmg1k,ef4sfnbrsq,gl7wtu68yr\", \"7zlbthbs7i,renlhq9t02,hf3bdblzkj,t92foykinm,8oauw468h1,hkkqj74lwl,49suqx520d,bof6fkfdm3,eqbcgzniqg,h1vh7g1z6c,46m8vf3xio,dcnr0za9np,416ymceh6p,4hiprsu6to,fx6jouqojc\", \"oemw5db5rs,rdj35mmt1p,mxg84cjoix,14fxik5lqz4,cyj9x14j6i,fxbsr5dkv8,h589xgxeo3,6kh9thuii4,kojj8ix6kb,a5w54eqiqp,h9q0fitm2p,2fnihwjk4x,hwvtrum0ox,79d2p0a44p,a7w8kuy90o\", \"hcs0sb3awi,6mtl0kbo04,k8a8ws3gj4,k36exobex3,txmtk95k0p,g0sfuchmji,glr617fhfc,cwbhuukksn,734a7qrn86,2yd34prhzm,2cfcv9texw,e6ljsluuig,202raasg0o,e5njk1307k,zzioie2kz\", \"insqk5wz3k,j1nsc020ha,107ifl1u06n,oz31epigxc,71byjiqb1c,504x4pmohb,gnitxe51y7,lct14zo0pk,a6x5kxiipx,j2gvlfsbyw,3ufy35vu0v,dosk1e0e7g,dmapybao43,4ajqsnrzcq,ij56k93hsa\", \"10wf58wzlq1,khxnbktarf,wcahofe5w9,kkvi8zy72f,pf4tdqbk01,2ejikb4ipt,cpk95d4qet,ilhlc8gdme,c5e05fr3eu,2dgvszt2ir,cgti6rb3f3,bay37x3342,8njv5euf7a,hvmij3xrot,8y6o6b2at1\", \"otw4gj46fy,9e0a2bif6w,jukb0ihluy,ddi8b75xz7,rx2mq0qpug,m1yf09pnn6,39ayo6a3fl,45oj9q0qju,el2ina37vs,63q8pxnktd,de4zyzrt6p,hflyglpnxa,dqiab16xbr,hv0dji6plq,55b6cd5rtg\", \"ppsxyuy9iu,6yoz7af3om,cxsmjwo6m3,sqsd3cn1tq,laazra6rpt,97dbsjnsdr,49qurk4ji6,gcq7td0yh7,jdqjar2v6n,8lsddyyzhm,9bp6u2e02,48qhu3ibr1,et8eo2j2ar,hccl0xg9zm,5c6x9c0qhu\", \"hcmfu1tcfh,urck10gr5r,zn5jjudqg1,sni7cqmuhq,dwd9fq9f35,5asuwwn3ou,e1dgbswfiv,5sjfkc70qk,eqnwts1shu,frx8lgr2yo,8xofbesi7r,jc1mqaaxc3,6686hieia7,cbcpxp3sau,9g98idtp9b\", \"d58ox9jwgt,sfn35a4dc9,q4fpaxhxfa,r86vqku8gu,98sdd8k4m3,2x65u6w1mw,k5sklfk8yr,kg1gfs7f3n,28qqca6pg5,frvt68uogb,fi8d3uxihn,dmopfieq2f,3vjdf9fh4r,lc4jgubvx7,fagc0qczxg\", \"fy47gffz5v,fioe1nzw96,tvwco8x1fp,h34ewzx1of,n6w55k0pbe,a305d4bhye,9f9cd7xrw2,gn7ernvjgl,kp5vjtaf6c,anqa4u6xht,ifj9tmt7pp,gxgy1zmh9c,flhqdbaoqe,8400brfsz9,m3g5njae1x\", \"6bmenc17zj,wtwuk66t7n,306pkjligj,phsbbkztx9,lwl048zlse,h2pj74maj5,2key6n0moq,1jpp0dwxqb,9dncspw57r,26zdhyfygl,by0hkbitcz,2tnkbg5kkf,kz37k9votm,31atnpsgam,bzm0pwxfhv\", \"x31ep9rzk3,i5gm1mh5sr,fdko8svth9,ao9e048vpj,idjd0xaafd,4jb163320q,jdnganfsar,4w69dcmbh8,65rgythenz,lfn71gyvyf,gaxk4tmz85,k1wruyxeip,6k8hqbs0bv,fwq4frkba3,eus12nzoi5\", \"m44eczuqsl,af4zdegxtw,eb0c4syp1i,1302ddbifio,g2xlxl71ww,9pqji09v07,eua4uwfkmi,ceu32n1xm5,kech4vh7nq,6upaz0bgmh,cx6wb3zsuf,g3noldwah3,8vpob2ld8p,5reomvrp80,c7s2lq5954\", \"ms5a3os4tr,etunynf1qf,9t2ek8392f,69niqx8yh8,eqxcp9aljd,2viq909wb6,bet25bk9x0,kb4ut8j3fe,j5tix8msuh,h80zog1a32,6g2dnfr6ji,f18myjo6sf,jrcvnwm2za,lm180od7bt,eaodkm18z4\", \"toqqpzy8sp,t2c0twsp2p,pg9aw7mh9n,op2viguj6r,pfahols9pf,g14dlw83ob,kesfz2od3m,g7w53ada5q,8faywlic5j,hb7c4qzgpw,fwsbyj9w8v,2pl0w930aw,98dhlpfoek,cxlg2dmh2i,bokgb4z9lu\", \"fs8oa8qbnq,keiaaeg0fu,gnzs3f8o3i,ojtrxfuyfg,capr3kh9bl,3yifl880q,5vgq99zacm,lmjhr27pg3,33kfox995v,aumqp86g2l,dvgroggi3r,osrcul6v2,6rwue2umkw,cw9l1ws1rg,1h9vlnywj6\", \"jk09yjv35s,6t6xuz9fkc,depzn1a0l1,y24qkcs7p6,ah0gnotoml,bu2hcywcrh,lnejoxgm2w,bujopbtlq2,4tf7606v62,lppesk3en5,k198nuarva,kgdegjo177,1gmcbhnqpl,esntqhegkq,4nqawz7urb\", \"4nbdlgo9bs,73hwyp408x,ryx536vusb,v0v4yqjawz,rqdzc0g1w1,2hufv8r04b,1nnuhr7dm9,51esuu7dmf,afc2ms9b0v,g7rgc8gyk1,5uxxy4xcff,eomj79fkor,2vcutm1lt6,fg8ae61ram,a5lfr7zg80\", \"yao322pm6r,f19dhmxkzm,rcpymt262y,4i6ref1vvx,at03wazwv4,ca0s2tj6zy,submp774f,5862dt39c4,1m0exb6o27,j7hapnm1p6,1vw4w2ypo7,5b6z2c6ii1,a24qbyojuy,a3wf315m1k,hgludctxjx\", \"14t58h8j5rb,5t78q90nku,13pxwq85g18,m7leylg8g2,qkzaky3rwi,lq69wn3bkg,5gc87slhpd,1seiujxuje,bcqxlk4j5s,7nz98bd4r7,gsu2m4al3f,ike19uvid3,8re5gmm8qk,5f071027sd,9wwibm5au4\", \"vlx4hm1urm,k64s4794iu,xidey8o2tr,94ncv4bdwj,15cpjtnvavn,9rnlko0fo5,4orqr5oncn,jfllqdz6xg,jxwi02r0ma,lhkfi156q6,d87k6surb1,cyhz41ar0z,ik5qo7gy3z,hdys9omw6f,lmz0liiges\", \"ut84l1278i,17gzve0r8le,ipl63h3f8r,f1wvaabtw3,le62ka79ao,hglo2za5xf,mx1sehcdb,d475c3zbx9,7dbgivcvbl,8tff0ukel3,jp8li5k158,5dqoxtx8ia,453o9gjh84,1xae0lj65n,jaapfvwwds\", \"7bf5c1tyg6,xl51qxter3,pikk42akql,nfnk8bkp4i,trayq2wcru,1mtn00i3jn,14tvrk52g7,airzskdu3x,i54v15xuga,je3bvw8ss3,5g4wqmxkbt,2b1g5squm9,4rr8qm5pl1,c73wp9je1e,jvbgosxx8k\", \"pf85kzidhf,c9ck4gfhql,ytrn10j4ny,i26bg8tlxd,93itsyd59j,i9od14i61s,8rhtalkt9i,hdjgc5417q,1y5fxen5bi,gx0xkr3uev,cl2jxykvim,inepwvt9k6,9q1h2maw4t,1qvvj6xhh0,7p15nbvwr1\", \"jnqiyc6j9j,bqhm5kemg9,bw02ba11gz,r8evj7cfep,ov5doea7nc,7yqdb8hxmx,9r7sh2j7ao,aoec0sn67n,ambgwgbsr1,2i7ufonmmh,62avy1hks5,5rqi5ggov7,6ttc2t23k2,jcdbvum730,danhah4jnx\", \"wxjih1ixzw,73ct2gcjrm,ofduscqi72,k1pp5yaewu,juisbrk65p,d632arpgni,jjb3wf2a2n,7clwhxyp31,40e4oqdu3k,h4y3btye50,1dx974ivb1,agwi7nodl7,b6u44tm3cm,3nvlu9bgyv,4cw2ynxnxi\", \"my6ybkqyp5,3pkc6nt45i,k0hx8qrwcr,ens3aoajay,cyxpavkgwv,cpb3g01bn4,lc3nx0ehcx,86x259d9fi,8kq770022s,krewnij9n3,iu0321hep3,8by8hkikje,k4j76j9egm,9s2livlpl5,45baaoxohd\", \"q3rlduci2u,rbwk5gavcj,p0a1l2w31w,pd3uituzex,kwelqrqfjw,bd2t7zjnte,96a1vlnyyx,g82q84f5hg,8ivz5xcfc2,ao6i8uz7ah,9pmmusxdc4,ezmcx0odyl,jlphwa79bb,4xrxugx4l7,1ydjp3zcmz\", \"eqfn3yrfxr,13apbwpubun,xa7xqkqth0,s3x8w1dxkm,wyeban4dow,7xkd2p6i4h,iml0c9yhmf,fmjpo5s9jx,73yxoqfqm1,3q1mtdhwdk,fn9205cj33,9mg28z7mym,d37533otoi,kditg7x188,fm6xmpckxn\", \"oitm0jrpdu,jjvdx1nujr,myjgtjarqk,14tbbgd0eue,otmy4t1236,62aeofazf0,m44l1v2naa,4r1yzn9frx,kov0thhvho,c7v8fckmov,e5tbh3lqzx,8lwh39s77b,fyj20hzgxt,8j0y7rbinj,a8stcuy2fx\", \"nntldk0j4s,p3e0y5hof3,ojl66ab4h3,n7xz8yniu3,vjpkw0fq8c,iug99xiee1,jgug8u5xmf,jfc4gqn8ik,g8x3n5dmnq,irkf3439i3,8g742g8scm,61ut7iwzlx,atrqcu686c,69sovq8wa2,ajf7vnnu3w\", \"103qguqczpo,zb04kw3fq5,nd5mmxh498,pvqyjfbcwz,yajy3rpsou,jmvd2xikz4,ln51ch334y,m99c6erhl,ezm22zhwtl,9d6hwibwcx,8e43nurbv1,493bemt3ep,3nf6pex43x,4b48jb15tl,66k1o9mwgl\", \"ho9balwpdo,pgzbfadui4,d0u7xt9bbj,8fgv5vi7pc,q47isompyp,96xif0v2am,rnra14k8d,9499g30imd,ehnmg47wk6,bz6vbi31k,ekdhzcug57,20a17vbd2g,6hw0yqo1k3,fq1yt4muj,cjfzllmd0z\", \"fofrvr3fh9,vryc1c9cwx,n3bgjlbdt9,pdqi1vx2f5,svud70layj,lihyqu80j7,exv7teegw2,fc8rvsclcu,ldfc0j4nq5,7cwfm4njcq,hy9nl4872m,b6m3j2x4g3,h1of0wd82t,a5outw7ye4,kwpxh0g17h\", \"d96n9evb59,k7m9xuiuy3,gx0x4jbsyc,oj6lmxy90q,y7k7y4l2oh,46kjemqtxp,2rmgxochzz,662aixugk4,9qzt60m1t0,do7puyyvy,1w7b69q5qi,adxdndzrjx,5r1mwlrj64,e98okzefzp,l0o2dkp81c\", \"v7mu0s99qv,yhqsvwzix2,5x8yjg23yv,e0cex24atn,kvu2dxjdax,fsc82zd6jz,kcdxd5vek3,hmdbfdvigm,l4l7pksruu,jjtu8gzocu,3gzxsy8r7o,8fr7483t76,7tf85byb66,x5t00s54m,c15zpq3u7b\", \"har9bt55f1,8z6jvmz57l,qnqaviphq3,13gc1sfzyga,83jvqvwkau,arsxe6zn4r,ioi5q7lu3g,eszfuxcmr4,ipvazwtka6,2w8l5vcmv5,5scksevemw,azw76qcmmf,3dq37xsi48,97z6ejwjrp,g6nqtysir8\", \"y8rc5e30ei,2mzwb06wec,t31080lj1w,w0v9nnpxxn,11ans137o2l,k3yiz7mfuj,ernfpnjrv,gi7bokk180,d4uoogsv0a,hdw38e7i7q,eb6oeby1h6,fm48jnmf51,egtrg24vdb,cqwvunfmz8,k4607addbf\", \"htm6bblpft,ddhqxcsvlz,jl68jep7rb,mt1rrs47rd,tqdvr1zahn,idhd4ywqpo,gdmsr5xsdo,e5ma9u2kxs,5at6tqxn0m,bxvby5tgyj,hf53cry47d,fdoqgji3cq,b34ow2oku,5a2e9gow68,jghbivvd5r\"];\nvar ed25519BasepointLookupTablesInStringRadix36Form = [[\"yuw1d7ohv6,ola5qtbuuu,otp7yucl9y,eel1loivjl,niwkyful3f,m82pv8bwe,20jxbhurhe,67rvlup4sc,3bz0fuxjck,by7j4n28ox,2ysqonijjc,cehg3i7i49,e03f4y6pb4,7u8rkjn3se,j8m0w4201y\", \"zrpka7v3dj,7sbrcgoldv,kcrfmh0vw6,jngdnwzuuo,ffaecgsnv6,4k88ogi46g,49hadqy2xf,fuxafdco3o,7e669e1ryw,innyjc2u1e,7dascowxnj,a68qwx78n3,dqubw8eh0v,fv8bqjp8g5,jf2tu0y91s\", \"frq2ailels,gxz46s5gbo,b5aa5uikgg,ykznlfkz0v,l5boa0000e,347l7ponl1,lfz2mxs0jw,edbuo29w7j,ee2gvkgb9s,7eezzyyw8t,i81aass13d,bteze6jfdh,ailvyozgy4,6mak0o2ime,fm7k0we3yz\", \"976bdqo49r,i6o7kyisy6,bjkv11el23,9wyqgwxvr1,i0w0oduamw,gom08balz3,h3bs88zvlr,6xxchgwc9x,6dpia17pmr,6uscau35ga,b1i6z45vk9,1wdab57cci,1vgby0s3j9,jmvf5zev7s,m3sark80nn\", \"7kxaay9xcw,nhboz4phdu,uheea0ahwi,vrheeurh9o,tbkhe6zztr,46qlyo30sa,5zok62dgqa,4cvifd3adv,88yofi7wik,3oro8ffagl,ap1mri4l8l,2pgzzemq3b,jargu8y0ps,95gyia98jx,bpyqr4m56j\", \"do7rqc9jxt,34a8sjcu9t,q1yoxvgthy,c40ypqqa98,e6p5gi72yr,2m6pd0of8,1fts58kysz,302urp1gne,bsyoypjlao,9tngdr3z87,bmqpyk419t,14m2btshit,2l5mzeky2o,2m6qi9m8hw,2wa1bbu2ty\", \"spx3qe9gvz,kc46eic4te,ptfkdlcy50,pmm0dv1b0z,c56yziv3yg,jvt0ojrgz5,6nvh5lhwel,138rxhmg79,awzdbtmwnd,53jicbsoc1,9i3yxjowwy,2fk3hg4j74,56ksm07bel,wlu2lpmwc,l8o6pnqdbt\", \"16jgl91bzp8,15j6ks3tgdx,9fhif3p6h8,76qaf20ai7,nqupotu3ta,kf13c5xmft,azuwoqpn8,2lra2g7d22,2fx5kaqxiv,a56zc86msg,5fld5lo0ey,jl8dh0lgxk,7vzo5h3dtx,k7j7dsp6dj,6ohfdu4z44\"], [\"dh94ohfifx,tycn8u1pll,qha367lj2x,l3h9zz7ob7,j0v63797fy,9e1biswn6m,ar77a6qoq3,dz9niuls0i,7xl7ctwsdp,8gkkcm3goh,btmwauwh53,7514qfds8,efiv5xmct6,g770la6s6s,2wm161yxr8\", \"h39e6n1w4y,cagoklpsic,bv1rxwuk2z,9lzirqtx5p,mtkkpb2zr4,afruobzra6,fmhdqjnd02,2395vmts1q,jg6pjdkc9v,6kc0syvmnj,ar2temfuh0,fhjo0h9luq,sp86x9vpr,30gyrb7wfa,eyydfd7dda\", \"10qzurpzvlp,evnq937me7,yfa28ayg5g,p68gaoq5vc,pt1lomuhbu,l6kzhf7r5g,7i4eq3ko92,gmden4taaj,83qu5uvq2n,8xpuyf3mpv,k5qkk8llg4,1npu3bjkwq,fafobvmq9m,3cuut5imgt,3jwe4rm8jp\", \"jis49op0v9,ju1jn7jepo,nfw2mjwkmu,123nm83ftra,n7iq2u5j2u,9ngpfvgqma,guxzvxdz3c,5srd4n7cc8,20f1kuh4ta,8ae4t5rdqw,1y12ekxn19,4h7w66ddp3,jc3ckokyvi,kt4lt5a578,9kboobjzo1\", \"nsksfoqlxs,m7aza9cj1j,xzdvj32uz4,he1sm0dy6b,ip82beuzgn,77kcybzftl,ghj2lrrilz,lhm6mqkrx5,dauohdqtje,5hyggq6g7j,kpk50tyufe,jb1rae3nxw,71hsavl7y7,ebpsldplxp,egzqbb2ut\", \"c7ahiyqjf5,h6ff20410i,7gxr2ptf0y,13v3g2tjhxc,m6rizjv8ph,lz74dsk7f8,9pzfj6a1wn,ktwyoy3iql,hwzrtbwrxb,b0rdx2s96q,35hgkho0tw,992cnj1jf1,6bj12nrz8f,j04q998c7k,38ogomgl1q\", \"vtwnssh1n6,c8fbfb7r38,cblmi1qfrg,ap69q97pyy,jb9oy3z71o,2q4i5vqs0d,f4rgiv2o8u,cunqgen4sp,lsgpzcven,k75hlmu13m,87fllxn1tx,h8f33ur9pn,b26yhl2khz,1tqv5htj3r,2qkp5u3hmq\", \"7tmvqshpad,i7qjolxq66,mp3ulfhl4p,cj0m1oqvr4,baoo9bayzv,etf8rdk7yc,bugmszg495,5j9fa9j8hm,2p8qujissk,cn9figu4wh,4r85ivc4j4,ku2xy8s9w6,aod0vdyax,2vnyedwyof,bdwhaxjkcx\"], [\"vb9ytzdhnf,l5akheyksj,ebznnnm4c4,jk8mqzojyy,nzuhhx50h5,1ctlndaym6,6yhs52ebkt,dnnwi0noff,jcrgav8zf4,dmv1tosst7,4qjuybh5l5,k7u9vc6ee8,kc4gpo98e0,631o9u4zyk,aw9a8d1qal\", \"t10hg4c4d4,uyuer1zywu,bb5of9crmw,mfo80opxpt,lp8j934ex4,6h0wyj2ylz,9txsjvs0xm,9rlhiav77p,7zacvfl9l5,3dms9021oy,7snasyzbhc,97cibxlx4r,84be3f1ec2,hboe9cuolv,3k5gr7bq8u\", \"jwxio5507u,16speki3txm,11fzdtrcjkl,ok98ohurar,t0whu1mhgp,codjgcxanb,lt9g988l3o,fagtgcjdaq,ge55wqkls4,b2s45fi6sb,6o4p6ssdwm,9qrzxc3ghh,hw83ls0dw2,ad81uldrbk,b9gajp7kqu\", \"psdqdinq91,pb2jtljyub,t0ry9lxexm,seylhe8j6n,mewr6urg09,7m4szujz1m,hvhyo4g192,3ky37kfo6o,5ba6ldgut9,7pne2aulmd,1s3fxpb1py,1nvt14itki,7dahobfaw6,c319824nqk,ffnvx6itik\", \"qvwp0ba5i5,kb8hmjuiba,t23ygncn87,pp4r5f8tpc,ckro8ei0w0,jjj5dv9fy2,amj56h7z1h,aebtidorb9,gcemflo4zz,apuncmpkaf,5puqmbag33,i59iusqq12,bla6w1j0b2,kfota1xuvg,ct7ofzdnez\", \"exa47nndi3,fidsx13bmz,evc5p0p4be,o1xel2hrfs,nbjs7f2yk4,cr56nb0r10,gvtpqs8vma,5de5e0y1dh,k14ztl3dlk,ewegkpvwkm,29s2yltw3a,axb7huzwx,7hnaqdh079,3uhag68u18,5n9lpyw778\", \"xopgcwupej,orhbwtik0d,16396kx0h2n,u8trrclfsf,163lwo7so60,kp6qaxlshr,fgtakbrn76,carjeb4kw,jmj9r1fe5l,p1ewi6t0n,8sxyyp2no2,5ehm7mrs4p,8bng4igtgj,j4h6d8ls0b,fwpm5s2ww3\", \"yumy326k2y,c1ae74862f,i6iu0u8d2e,bbsio5eb12,fvy2f0ulxb,7t8dni20g2,cyagn3icqb,jf4850gtht,iq52s4r8dj,3bwmuovnd6,5f133dkuym,7nzqbl1kx8,kblfo5gtxj,14xw81o79p,k3p91wb7ke\"], [\"728ujlmhj0,542xg70llv,khfxrrrq8s,5c46q8xkdt,7mh5fw4v5c,2krqb9m34e,hoeee5g5bd,eqlk9sxvxn,4x559ap8ik,3twefztckq,jnyd55qnwd,gwqfna81ep,gl1f4qxgjo,g6wewru102,iadvqgkzmz\", \"10p6zwpv60l,mxgsku1nh6,x61ksck1oy,jpuc2se4nt,tbdqmkh602,jwuiuek5hr,75g7szubab,33s3ing83o,afafdkho9x,e9cef0yqyt,gu6136t8m9,inr6l79wbx,17y7fkavhe,ba1wksh3fn,fttc92dxde\", \"rp9oi1miih,ajwblcnb0c,ngt37lkevy,j63v0fafbi,ubqvyke0ff,f8w8v1hk09,4csangzcq4,9tsc750itc,5g1hnxjipt,6ckk7f1xij,e8e9q1rakg,lwvpodjoso,907ip3u661,ahf9boas3g,gcix9x92kj\", \"xzg8mt2ry9,mepoxd00lg,mttfre6pis,mqmfn6wqhi,rqi74zk76e,8mueljsjdk,5glgfurhg6,9yqs90cyot,89qp4tdr5f,dxec0xxfbx,6x7jmcfi35,ch22wodk8a,1monltos2t,4smgulww7r,9yhgp887kw\", \"fz982kuprb,bdwofrmltu,14kqy7771hs,pe581svl1d,kmqj6nxvrv,3apgxi2awi,4timaloa3c,19s7okrfd2,gxz4sjzoah,63nyc8ayue,g7ngp1w0iv,hbagdw5tzj,71ctuy4m0d,ei0y4fhgnj,8uo0i6si9d\", \"pgdm4rk23g,p31el0h4g9,go5mderafd,8ze6s379u0,qt8h854asa,hu0k21oczq,aix1yi512a,2unlrpvzmn,jl0xsj1juw,8i3v2aqnkv,8x90ef673c,krgmukw211,499s5qqsi8,1he4jqg4rp,gtrjtz0kuj\", \"944chbyjhh,mdsdbfzofg,147dwxjlae3,5x3bptpis0,ptzter8hhs,ekjgb1s8zx,h4draqaer7,obzmkzmvr,l4vfq815uw,ca9cdvv08f,ig0oo6rlk,996vz5xqiv,32lplj5a0y,l81im0hy3,c4h4hzxlj7\", \"si8vt4qr9a,p124j63nml,jtqxhpuazi,pbi2uku6pm,q1rioppswx,19uqeh4kuk,j14hedgpqh,bl4f7gih4x,3x3d7n7kpq,bj08r5quk9,k7d6yhfd31,1771oaxr0p,k62lr5pobr,c5uorc37z5,53zpuw0jpv\"], [\"1208u3kae39,q9l6ljzisr,dap8me5rq5,k2mp4jjwge,wa7byme12w,i3e7jt0ggv,evaq065nhi,8x8rs8kurh,hxihccw0iu,5kepqvog5p,5ow60y44lu,k19ybwoli2,kyng07k2j7,4pq54f4km1,lmh7hfcd1a\", \"g2x0lft8tc,ukhfklfsuk,f8znpwgy43,cguusz2s9l,x2o7ko1wi5,4jtyuynvsm,hknxhkwz24,fv64rbs8mg,cu7gyvnw50,6yti5msjwg,a88fl043sg,dj638puel,7ezg785ga5,b6peazqb22,5v5te3lrpe\", \"101g8dyb7p6,lm2266qmog,ln95gu8y9t,agfmt5r1y9,g75mjgz01i,1nzmtslag,g81fuu1lzg,abbr7ein8l,ixvdq46wi1,21d4uloe29,h8hr0ww1vv,dezgdbkz65,imk4qzjfli,9iggin7g72,a3auzi4zrt\", \"o9lb5bg2bc,b0a35ca4xq,ig9ar35vrk,zzswpny9mi,nglfdtaluh,69q9sv1fqy,cfevgm1lk8,3ukwl1s76v,gdmsx06kem,5j70vftk9q,54l0sifqil,e8o5qiobfw,2p1cihnrwz,fes5pm3cm0,a1cnbtd5a8\", \"vamfenucwe,xwo8hd0xf6,789i34xkvm,nzfkun7vh2,13sukyxepum,ef6btlw6n0,elxvi4wsmt,eylly9621p,bfoxhylow9,3zvurxi26h,9t3i9avt99,7u8b4j60v9,1978va177x,3dzr23mhsn,623jnqcr0u\", \"tg1vpluba1,ljtfkj8pxb,jb872ugg1m,eu0xl7yc3n,xiar83fnv0,64t09vg3ij,c03fwao5jf,cnfzhg6osg,9k0ihpx5pr,3gfer5pkyq,kcz8wmdn64,gir007f8ec,kjgplqq6kd,2beh4thnme,dy1hova7r1\", \"ry7r33f4jn,p76cjwcssi,4ihlr92fmp,s3m0sa6bp2,wasb2pb07e,6oi5yu0qx7,juufpddzy8,w8yfkwg4c,a3zc2djx1y,623ftl246y,2yrx6kpe9i,as35aquv0w,bu6bntua9z,6cejktn8mx,g7tz1aer27\", \"bx69crdgy3,dy58vclrs4,sxjajoo9j4,yfk3xcd57a,witus0wwxk,b6jdb4r533,gkorhkms82,7kn1mfx1t7,kjo3ak9fja,8v6j1awt17,jeuf32h1xo,3ygqomxhns,4f0wfut2an,dvmdbthx25,byludmjapn\"], [\"dfiexkbqrj,ioluac0wsu,loxl40yixv,nlralha22b,dah9zg04oa,aai46jf52t,8212x8uqj3,67hxrdeohz,ggovkkeius,7y4oemnzut,4bybqkhubx,3syck2ujh6,dm4miizmko,31ujc6g5gv,lqllxpyozr\", \"y9ubifn1xw,v8jcjxuyzy,ne54ajlb49,svqoex18o0,dsgg0gkpe4,jq9xfqdvr5,1oaaxzopr1,b8ht8wu17n,emjch868st,fhuonqae0l,76qa1xat7s,ciaigcl0s2,17q3m2fr6o,476145xt4e,lm9l0mctr4\", \"cikxrs5dog,k4nzhbda3l,moo8mja2v5,10eg5moawj4,vgasd49u6j,hcfrqsa9sn,5qs89uopzo,fmfuuovgfp,l8m24du6pp,biz4nej2fg,8kwunchhgn,ihyutarbr6,m2nvkzcgss,5el7npjpnt,6slnf1f1li\", \"p3jjxfhqoj,dgbvikbar7,yzfexbp2sh,5j5q9c55gl,f3llekyd37,9uc7804l5f,b5k1zz9cuw,kiz93qkma5,4md9cyarss,6olwllthvn,lk355o3z5q,6w24kkzkz3,42b9cjvo9v,ejxu1i9ufp,m3o5s23j5o\", \"1315inxddn4,o6nkuzdill,100hlyuw3u0,q761yw8zlu,unfa9i6yeo,509prpl4wn,9iqwt52j9l,m0ulz0gng4,46hkr7zz4h,kkl2qv5rtr,26fanfol8l,bdrwckiuyp,4u3h6tydm5,5c9tfb229z,85jc9i001z\", \"nop5j43xds,csrlxp5kw8,q1jdteso2e,af42745vml,9teifw4x27,5i6gxp59u9,5n6a7a2tpj,g1oyvp513m,ds70ar4doj,g7soe9pu46,il8695ya7v,28zyol7364,eghr3umska,95usa8k5gi,61h0f8s8m6\", \"c22587dea6,fj0aarcuzh,lqap8u0pgr,65uuon03rd,oxf8zg6evy,alifr1t23d,az1htkb7az,1ue32xhk7t,2grxpkk6jd,ik8r6qvfyk,8vwpkc3prv,r7edmpbdn,gbope2cbhy,dzfki5ty9e,d73r9cbkzk\", \"b4egc9emzx,ysmigysabj,9tcnxfine1,opltbhyyg1,xi50331xt5,66vbgzdu2t,j4qzka97xd,4lte2xl9su,ark24967tb,2bg3mtqxt7,2c5rqc9xo0,4mgppfwclx,ew3i9ntitz,c85l7vadcd,4cj9kfhoxq\"], [\"139pdy5l620,75j7vms0l7,i1v2hk6yhb,g1l7ku790b,sbj8n7udz9,jb1299poa9,4w6pgp3yde,isz93l8bdj,cionuyynyy,luuh0u37bg,f4u182kqb4,ddoe4rzxnq,kzbhrczyoj,85rezzzsn5,joxpn6dout\", \"66z5yc2pc3,atif0mw30o,8qijiipey0,106n6lgjqah,m900xomxl4,hu588vprfh,esdf2oo7nd,lspowuv9pj,3jghlbrh78,cw4endbmk,25lgjhnurk,bwns91mydi,j578vwqucw,b4so3sed2t,d7tcotnpjp\", \"dhm6ond6jh,dr0dvf8u75,13k2i0tg0w8,lp4r278g1m,w02o12vsop,lypuarnc21,d9vy7iruvy,le7obpi0gm,e1nyupawvv,4dgbo21nbb,7pz9aoau7j,91h5cp3kl6,cnc0n72eex,d1iat7vtb0,ifq7dtag2c\", \"pbhylrlj9i,s1k70vmdp1,k2djkocszj,fbzkl6tjf2,3d7g6pup9a,iq5iimhotn,jqj5l8whmw,g0bbtubwfg,9l35e1fdmv,kfmm01htop,dia5023r2p,a9h5353i21,j75zcarar2,hmxbz9fvmp,dadgh4wi5\", \"6rlbepw3fw,anq6gzt8kr,sijzelpwu2,pj1ki9vk9q,pjzhn85ywz,ki9f1gshsk,9v4ntfjha,1fmp0hzsde,gn8ph8mfbc,id6gujuz2e,afn52eoflk,layy8mw4vu,e6jlqe5u20,hf3x5bv719,8kbuj0h2b1\", \"120q03i3kcx,7nish003b4,kos9pzofo3,5f88nqm209,irgi2csj6s,jxqmckfoa0,47c9ihvhut,5uyggfgi5d,4n9dvxhgpe,5wsnz02qko,5w53fq475t,egeothsm78,bqi1xopawz,es6yt2iiw0,cmb7pmugis\", \"gy3c3uegzk,cg63zj3sm6,qfpdnq9o13,de2q21a6c9,11ju0bj3e07,731r1crdfr,3vfwlqx0bd,1awwxnhket,f71l18k295,hwz2nf3p8k,3wiepcly6w,hu2krabau7,df12jjw8of,kufbz6h0h0,4wjgyf3fx3\", \"hugu2jv1j8,ia2kncxyst,18v9tew10m,wdiivbhjng,jg48418np1,6emkiaqrp7,b787uieytr,kxbu5ivc4z,gzp0chwhhz,l0r8ae4m78,558nrx2d2r,c861t4299u,h63a03skm0,lxjrbvu5jj,glwgez6rz5\"], [\"47ogs4k06t,grqke30emn,flys1y8pyt,10bkc442tg0,to0jqliuhl,34ra0md63e,2fyh7ldkgb,elahe091x3,31mok6d3j1,ce3um93dp3,cjz2eel5zi,523mvzur0j,3g1e1f430m,6s0zuvnvl0,grg7uq10nu\", \"wmlg5nztw1,vn24o1nf9g,pcaatsgkv9,wgtwunsfa4,jjo4841085,fcjydv2lf5,jbse4jyxkb,d66fepetl4,es7fzphkru,2wda3v0poc,8231bbb0wr,ic32gswspd,666tv4cl8b,5ncdt3klrs,h87p28mfe7\", \"jkp0zxfstz,wtrtpoac3c,i23tin1790,10hw0sl0xdz,6tmflwlqa9,l4vis5v0b7,5ragb8hqy3,4kte9vabx2,li5jn0ce73,2chu75s2dy,b476o0vquh,ln31ksit76,2lzgwevz21,9khwddiqne,jj62hvufiu\", \"cpr1my4hz4,pxetcmeq7u,guo478yuuz,hvg2tpwbnq,uyhe864rir,4dkuz6rvv2,easj6pp67g,kt96thcem2,6cp7eg0cz7,7z8es0btc8,m2z97xh7j8,ditagbgvng,9ws4yefv1l,l55xybu2ts,bca90hu4ys\", \"13d03cbgv8h,14zug1hjct0,k8wooiderd,po43nx7kd5,utuwityxp7,1m19j0qluy,14wxgn7fke,bdrulk36zv,inp8fsa0no,jei1wmkxp5,6pqpychwj8,2mpu28in74,dja93viahy,6ad58q8adx,6d1udj332q\", \"maxsmezrko,n7uraqyjb2,j58ikca9ea,14b4ezyifgx,ofz1yrogxg,2kekizif2b,8eqlvz1yyd,8zuw7rrw40,1o193kybf,2rcba6e2dk,71kuoswo9r,bjwukkkzln,hscxz0pu2y,inkte25783,3xeer7agj5\", \"r3fvijdep9,11w30ynodgq,dzhdq4fuyh,vvfahvn2vl,3v3ypn5tuo,kn4arh23wd,ixh6vgoy1n,7ryzd26rvs,47googppcb,35rafrlxc2,izc5n7928q,emo3vcru33,i84fvfokhf,5fk5nosh5o,kxmcp0awjj\", \"ksocyhxpxd,theyvdcvo3,m8htinrto7,j7m43v7qcj,n36zonnq60,3s2zm4wz8q,8gtq737sla,8fak6f8k98,a0jh4sch6r,7tjdsmcn8x,rhw06iwu0,9u8221tfcp,4sxb429nmq,a7y8x9hycz,3c6sxt1j2y\"], [\"stgmvetdsl,oshxqfdspw,854o557g3p,du17nbu8od,hjlbhs07v0,9uyymiymm6,3ffb4hkoiq,gerk2j8mlm,8qx4t3l77c,5puvsyutcd,j3illjf0dd,dvrjqg6doz,5fvdbusr6l,3s2c8y6q51,1vllgb5gp7\", \"lfpo1adpc5,e668s3xyhk,y2f6mw7vwp,lyor0d4obk,dr5kqz9sih,6nyo2tsytz,iii2nnjjbc,k5i2nhjcwi,8qxmdpve2j,czardejcw3,eg01ji96hq,62q2nr5sv9,6f804lw6v0,7gfwjhuinc,21kydkctxi\", \"111tkfxo68m,n7k42xn570,r13rewd5nx,ar27vuaug7,hr0cwub4dv,i96jrbrr9k,ihxicpf8qz,f1muklplso,a1fdxl5vq5,b3zxg778ff,jc5pj24f5u,2w0s0vux80,6vdtpnr4fl,9pgsayjcfw,7u8toxff10\", \"q9xgi971q8,q0bfucmka5,cxxybzay03,h83r8cjad6,xm22m7anfn,e2b6qqm1ej,a42y8vtlvi,3021vsvbz5,4cgt18qq9w,hwwpouvy99,20n9pmuwqv,fb5hhcd2xz,24pt18ibiz,2lmseojppa,k5mvjsn83z\", \"j1oy2es85z,dpvmbx76yu,r98xq45w68,xkkac28v6r,nd3nepnpi3,6io6y57pa5,2tn0qxnylm,b56hc6zogo,824r1u8wa7,4nn7dmqq4v,6k01ayujpm,in2qpr6wz2,7yitydkgaa,2q46wirbhp,fe6s2kwtf0\", \"9b1p8dezrp,rcqv4m7zjz,d1ds4ojrul,gew3jtrz7c,nomhcnepxx,k02zmeeb18,20b6r1o4qq,1ofkq2h6mz,9nx14id1su,8b0sj29z6n,ejeexq19q2,8988bkcq2l,iakxivd844,juywdvxfjs,34eb36pubz\", \"ee2u2m3lyv,fre3i57nmf,l8n23c4ict,gg6y5n3vd4,nfhh933udv,cqiton6t6q,l3unjtkl82,af5olas9tw,23w2v1tqyy,9bn6ku6bfd,3ikir84et0,cpkscgl2i7,54rkwtggl3,epxa8yvrfx,7vwrujxh0t\", \"rqv8yfg60e,82r4gp6ngr,9siagnzmuc,pe5woocwyl,n30mf1hipr,62srsevzm1,g9mftsst67,iabrw85i3j,aot8ggu1kq,81r7fbpq7u,7lkzrvtpz5,d158anuke5,6p7saejp60,8duyqfc575,d06q2rbu61\"], [\"c06wcmx4u0,sjljw2ft1r,myeuszrf6h,la9me6lxdn,q5phjhls9y,d2q47n1zzu,d5e8me8cyg,dstk95usqg,5hucqouw54,f9wt743bmu,4418r4owys,e2vjpryn5y,3wfc6equ4r,j3u7yw9qcn,23uu9i7kmg\", \"chhh66n5f6,le1jhs4tdk,f3q7bsxvlt,hcbr3jkoru,11u0wiolv7x,g0qyz7sw1z,lry4fgp0eh,itvmgsvrso,bqg3s34igt,ljc48aysmc,bbc77xq4hp,3q8h13kdul,85o4jpyt8q,lufnkcq93i,p21oczeey\", \"yywyljyzlq,10c55xaral2,11ax659hq6z,k81n529ijh,w3ngs3gqz2,k3djkz9u52,3xmpbqkio3,687uexyiir,8lbtuhc9tf,c5wsi3iz89,lrueivv6os,l2hop2v8dr,98qrv6z6dy,4gwsqo4ve,khyypexstp\", \"d1o62kz2sf,phna3kbmg7,bnoxlidz1c,wx5ls7psje,mngvqkahdi,i66litdgk7,c18e4gu2ly,1hgvfk4bwm,iz2oxltree,bpseo6du8r,amo6tb6ssl,lt9sejajnt,iqrbr8d8b1,hdpw9iw2c,30d27vja6g\", \"n3qxq70yii,ztj9wsfgw6,wmouk4gkoh,mj5j7duqy1,udph3plap9,e3luzdl6zu,4c3gsl8ivd,dqpreqnxbx,jgqrm9gsgy,978hhrvgyg,crm5fz8hxa,kd53pnr4ie,iatqpzv3t9,eoywsuls70,m0js13eoyq\", \"eoa09tgsgf,iavyxs3cbs,10baumefm3n,p2m3me745a,y2g2eumw1w,cmlfc0kezw,7az5ktbosv,jys1mf9kx5,53yshxz543,hzh91y0lpl,f0uzavkpyv,74iwyybwjz,fqc6c36vi3,2erwj6sd44,espkcwb17b\", \"nagzso2dce,ybiqwzfiv1,st5ce1wiqn,kth0rllnec,ntb542jiyv,k3plob0io2,lib1y95zb1,g2zpw6h8nw,ks6a5nl7r7,k608jkc2lg,4ybi04nkx0,7hi1skoayx,jykd4o0tk5,6kdqju5rln,f5lfjj7my0\", \"iv83n889pn,v6rbj2hbj3,8p2obkib7i,3ktogj6py8,jgfzkfztop,6ocf28xone,5m986kg93w,ft15v9yw2w,l5bgi0clrp,gsqyvziyd4,e698ey8w5i,llwwha4347,871yco426s,5j1jmt8foa,5r6qcdo0mt\"], [\"o0tzptdjou,6ph1rgq4fm,j1d6omw3wo,ifw816d12o,qz8h8wy41j,dx15cv3g8j,41mr63ymgu,dradx46fag,40pcykwij6,fp83kv884j,kp5nxmgh9d,7310jtbfl8,ekhpkg9t8p,at1i413u98,ctndfl4yhh\", \"vg4pkib5wb,wp8ih558qo,jrjk5tu4iy,mvcragzqkz,dz5avpyvw9,baf8xudndl,gd4b2ov1lo,405mzusoyl,5k2xvawmdl,ax5a1dqvir,lsy301fied,bh729deqbt,im3y4lc9lk,19dpvcw3p,4cptd63jct\", \"tlenixg77v,gevwkz5nu2,f2m4gjt35n,x775hp8niq,lb4nm15fe3,62262tfim4,f05qr30w14,8ewznm423z,kcq3f7eckb,hdr7hyvvi2,arzc929h1f,hou728leah,8kgu0didic,jy00x7p215,gq8ytuevkg\", \"j7p2eo3m8b,ivbsabhvnf,o4e22f9x56,ispltby3mi,j35m17z6fb,9zjpn6rk31,8k36ai7s3i,hagbtx1qqf,d578ql7hdk,f7my3xec8q,7iu2fu0tpt,fsfbf9gdlb,1g1dedf6ud,i5eei1kod5,9e9i4nspyz\", \"sebn99z1v,7j07c6e7z7,wk7mvki2mh,qsj68ufl7h,s980r2kwii,qeni1cog4,7acak65905,h6n2wql2od,75yb570amy,cmspullw9s,56evhxrwsm,gz105656rq,ejcteeevuo,5ne393gelc,1bg8bchguq\", \"rijaxppb8y,jk9kybcvp4,bg31bfldf1,qwvg4htrl4,rj8ol1uh39,mq9sxy4tw,c7imxivzoy,dec3ibimj4,26wpzut4lh,m4npksg0n,hnmtn279ws,wah8nwjah,p5c4nbqy1,l95lgz5b2k,f4u3j7k6gv\", \"io0vkhzoj2,zwn8snaduw,h0pw6oj13b,xelkninwnp,rpzpn820hg,1e3v3ift8v,wet2fuheg,apdsq17cub,i0jeh68yp5,bqzpodtetb,fv4t8kf1s5,9d02thndpt,4x38fbzcrm,jpj0ixp4mj,vjfm2ziec\", \"xvouler2sq,liabzk5a7o,wf4w2phey7,jvfmmem8ih,guvhiqbrq2,8lsmu9drbw,aqlkcacmso,gtmtbgitxt,6mbqucbldi,d020tugm1b,eur0p83lw6,b56fpyu4bi,zzvtp9a63,47thab779l,5j4ziqkz5c\"], [\"tmbnzko7eb,oiio5wfpsp,l18pv6qs4f,grapbqr1gm,t3n3xeexj4,hjdmdsrkpi,gpr9rofwmy,dlnvi122j8,1q3n2mzf25,elp5wp1oqu,lf5n2ifs7c,6z8pqqlx7h,9er7xa6rr2,jdfvfqpn03,jwgi50hq8m\", \"x5h8xzvor8,odoalc1xq5,90olkkl0dx,5uiae0uhec,rpbhltbx8m,e7k3z04t3j,3uwp4tm5zm,lh1ncc62zs,4kny26herl,fp26lo01fe,8dlr5u9rz9,358b3akrm2,3874tfemdl,7al4bkax9l,62kooc5s0\", \"kzzyqf6hxc,rga3efxk3h,mnj66sg0n6,s5vra4ux86,ylfeq8kfun,f0moagm302,9lbrtfll7q,2w0ir6bl7y,1gk24g6ywn,1cwiv7slgr,b1dyzea782,keder94pvj,cgltvi17e4,g88j1zk0dp,4vwdvpn7fo\", \"ndk05f05s6,w8sigv6zsk,jpe591j9mz,jv4g07i4nf,vy9b1ax3bm,6g5gn74kei,bib4cwyl96,5o1wp38ydq,8x2bsyvljg,4w3b31gm3y,j8o9iu1b8a,kuf6rzm42t,3bui7clkik,brackpbgze,128o6nk7pg\", \"gvu9qmof77,1682pqvkjjp,ih4d6grs1p,k91mtvvmyc,g7engrqjgi,11q5y14mfh,m5ca4c643,ewgzsmf12b,7y5dju00c2,6vdnx0sa,jpy8xs5hsb,c8tt7u3evr,emr9jg12j1,lifhd9ip25,3q5ynss5aj\", \"9303n4j9vr,aq72leaz28,3you6zgfj2,b52be3ndnj,cpd5stdc9h,ie5et2erxd,71lhqd6a3h,e61bcf5d4,leadnwxir7,6frdz9ojq0,1lqnogx1xp,1spyr94a79,qm9a4wezi,4w6o2t2epy,1bgbtluypn\", \"150v42tlhee,fucc7zpltl,jkk0jiacv5,eyo80i4n3t,hwum2ml7lk,j6z379aby7,aixhcurelc,j3dk496s5o,f8strc90dk,j1golhwckf,h1f1mqaj77,dpvm9yz0d2,fq51pb7zri,43gymyvd4m,e2rv5cafh1\", \"3jpg9o4yma,rkdytaw8iu,oaj9zj7wco,s1oua5a4wu,pg4r98vh8c,gvg3xgnrl,ezm5mq317u,4b5jhas3r1,80juo1z1jf,3b2ses3d49,cptzqsb9ym,af1by5ekv5,3ysl5ecrwt,df9a9cjxul,kqficj0fzd\"], [\"n90o99ys9d,1327d326njm,ay93ytktbv,k5h1wbqdgs,nhs7rja3rp,l8l7zzyme6,lxljtc3z8t,ieitrcs4g6,7fkx6l0fpn,h9trt2kxma,i6dtu5453c,z1zmxlb7q,dwnxis9ywc,1oqlo06bc2,au4quhvu28\", \"n016t8dgkp,r3bulr4b9p,46wyohjiax,hcvwkxn6o9,s7fik3hzrs,8jsfsup4t0,gro088uw35,j865em8nwp,1j7021eb4,ke4ynetxvo,55f6bgubh2,3yh46j0093,duzg4n8pii,jwvjyh3gc5,1k8nmuz7nd\", \"618rcfagft,ql2ol225ja,rstlbqzmwr,efxp4hxe4v,h0ozw2f33m,gz1xaaj1r0,lqyn22ma3d,gx8u2um4q4,jftienhec6,brb9ne6w2l,ccjoe0d5ls,9ml9nfznye,jsr4nwhi41,hk8rtfbf1v,f0wppzo94w\", \"oglj2fjs0v,j6qbllr3a9,i2krl8kcry,a5oav0lhpn,mt1smp5plx,7jzyirm7sb,7favyf1xhh,ezxcrkbj4z,4agiykq8em,51qfoq73gh,cd764solcv,gqrt41maal,bhgdbxzsff,bkjnlb09vy,bq5fw7q46s\", \"plyh3h5h75,d5xj3870o9,ej60rk522s,z6o5ou6up6,mn2mvn8dhb,8n1z3jmpiz,le7g0bqsa3,2oiuwrudkx,gap6cip0kw,8q5462tmra,3p7mwm75ki,240r1pqqok,5n2tjmnp5l,5mteh2xqd2,6v9gz9x3o3\", \"bibbraiszl,841a0smaat,16khubgrzll,7rcep3nl83,s2q91gqsw2,j6js68ehs8,k8ef8yl8qc,lpl32swa58,22miog59xm,7qto3s7z7u,iux9xfyeog,1jgugfsy7x,6g7215mzy9,5u66cmyu65,lbqvjp5wjz\", \"gzxo0wpeh8,b0zdouxckl,izue0qdhte,mi7wmo4osv,i33rny6jal,867jahhp2c,24xwsy96s2,glu5okut14,d9gbqsl1xi,gz1lluasat,3s81o3qd8a,6rj9bahbp2,lrsx50fvsb,2ia0gmezd3,c9k9yilc6o\", \"ca84lefg31,15neiv17l7r,nzdfxxzo56,7xwl919xd6,p0g3y1bl58,e9nkyksum1,dkk39q3bg,l1c7umi8vc,l4v99rw6sl,751qfm9tbp,bu1qhy5hef,7vq1w42d8l,grpqth2i0n,9ti7gi1vqo,iapg2oobta\"], [\"pojy2atzhp,tviw635z4v,gwzbfawtx1,zvp4mk6ely,6j2oo98l8e,7h9kmhpjng,9yywyjm2oc,3heke8g0f6,2f87may8tc,jzpj6517i2,k3cvz38nl0,8qza2lse5o,cs9cs4o2r3,hrqom3sa9b,3hi9ugi8ro\", \"inp6qpd4uo,10kv1cf69wd,quczqbdkj6,olusahccsy,8n7skumdqf,21ph0gvixj,4lgx01bwv,830p6dlxas,9y65y0cn3a,gr33wyn62y,25l5cwks3z,59316nw8ot,c55cgmbx31,4a7p5zs9fb,ev3if4gmds\", \"14rqezx47jz,wj5ucc7lsd,y4d5h2sdt2,nu5zp1ejz7,qqg5r4l4tb,2y19wt9e8o,fp5o72mjnz,8jp8keqt5t,2jdemtlle1,hrtnis29hl,hsh03pfawc,knzvy1r05j,dcvvodabfi,ecx0ht13xc,3f9otjzl20\", \"dt33f4hwu8,11j773iw6u3,9xihqs5ez6,bauyqcendo,dzhuezd9wb,6jwhk4u6rd,2p1kf4de13,7vb0ear406,8cpgyhhit2,hu3s2z28or,egibefh9g1,7llqn6ccgd,j0r53l9bso,7vf5c2k6tu,561f1ntam5\", \"lw29smtf9j,sdnrs24v2q,l4579jumcn,u7rmcgnyz3,w9aqxljbjj,cgz1spuc8t,1jfj8z29ys,ck6h2kqsa3,4epk6mlpd0,2hqw96fjef,jwtd6t77dz,1c9buwyq5t,hqats6iv9i,br86iu3fd7,8kzectc6u2\", \"icagasppxh,8dv5wxqu24,eyjvxhrrdl,11d2mdufchl,104trfh9zkf,c3ckmt4sgp,3afuzj2moe,5s9wtbox69,49pavgphp9,5xvtq1axn9,177hbgfrop,i5etdegvy0,grpds4ojbj,4wgitz0r4e,zus1hmexd\", \"qonzwzyl7o,p1bcqdwyrz,eayolg8k6u,rlhd10u7k7,f4x7txi23d,5r4hypbo5n,3qxlcx78au,14pghmfpz0,6g7gn24s15,ksl99je750,9te7ny1lcv,l5r8c8pcke,9ytjvea7em,aknnupso4a,gmcv3jfxnf\", \"v9jmmsm4od,kj3wu8mt2y,rddwfypl0o,ftcp0k8vbv,tf1xlr613g,gps7n54z31,d5c8ffpfsh,86o0pu9aps,9cjg056oeb,2ucun1l8d2,dz1bv6t5n4,d1vkjsckl1,5xj3xbaoom,kr6ouhupgk,cxtwmggqmj\"], [\"lo8qr1lcp5,lgtwwd6x95,n4tcixofej,g2zs92bgjz,uj4eish9le,bjwwr0n89f,8265zff6tr,guf2sq9kx,93khoofzs5,78ooujpsp6,868wwpar7s,ikrgifbapq,frhcv34199,eiv178pc4v,2tmavfp1s9\", \"11p8hhagfo0,wbmb3dz0a2,nlk545nes9,15im4oku4j2,rro9d014dt,2qohzdy353,4soekoajpa,94v42n1saf,1s5yb5oo76,fx4zhuudnr,bq6pf8ffjt,99hsk4ukua,ftl69w53dh,8hfwiiyeo7,6hhb21hac1\", \"ign62yodhj,e1v7i8of8l,tb3duscy5q,v1vnjwuchv,sfdoveg3kn,64sefkb9md,iqvsfwy4m7,ixi10pkiwt,eyzydn7lte,apcf70hxkg,90yw8rrmy,gocf9a376j,f0z56nx67n,18n5h8iw0h,1fhvbdg9gf\", \"oabcokc3i3,926rybf33e,159u10tztkd,y3rkmu67zo,n0czt90ywn,jr5kmd0aiy,78g9c9b5j3,2i9hchp1er,duglgv5loe,2ctqmhtmra,fy4m6osnh1,iwdn8721n3,dd5kxx448q,f0silor7o9,cwfpvllaj5\", \"wf46sue0y3,gs6dgkjudz,s4qski1g5l,joj1jhqptu,cx464qz1u6,jns20xrdsl,i5rjdbp0no,9pbc3kcfi4,bhaaek0tq8,32f54716b5,faxh2k2ja,louuiezt99,b7b8ch3n19,h2iteu4i72,dqhehtj64c\", \"6litqelg8f,rn5qy4nhuk,qthppaa5s5,l32z2ifh14,8cy8jlypat,lmuiful4sk,7tjfamgpur,a566s3b6q1,2mv8ohoq6m,k3aeoawvk0,huhecvek3l,fufmbn54cv,gt1loy9z0t,2jnc6pqoq7,9t2jmji5zi\", \"f60m6ns2s5,hdio6ritkn,htmmdek8x8,v9nqg4ebio,sppb51gbc2,d14lg9ol3i,cfl44jj6vz,8l0ovwnjt8,afrlirnf01,guxqrngip2,gp8mynee7i,dpbit708vb,5zss15u09k,a6nswdjiuf,hj8aus6umc\", \"dgrwj0ek92,175x8m76h88,8rlqvkkc8f,isngbv53ff,ou77azy9wb,5vt4e6aulv,eb81nissa,j4h09vca4x,bo7w4lmdto,32twwnigup,iwdhfczow6,c5lhdyjyc0,ai664bkkgr,9xgp3nc1rx,da434dqgj4\"], [\"kpeqewx5l5,11mt8qalgcx,fhsu30cl97,mct81ss31j,lzajmo14fl,i95wb98jla,2vgr2au0j,3g52blhkib,7msd5dlmbf,h957m4t9l4,dyc4z0mf2b,73p6wx1u2i,4z9j346r0j,3oasjho95j,2kqpbpg6sg\", \"lj4reg0r28,m5syyyd6ng,9zq6doi77k,qwcanxgokl,mztgbzje9l,chicm7aoo8,5ik4m3gau1,7wi9oh3518,lrg38mub69,b4jrz8cxqs,622bch9jp4,919kzfx9ko,8nji5il8el,9n079q1sw2,98qisyh53r\", \"551iulhrmg,wgn06b0z1c,imqtjizqq5,isah2p85nh,ka7i2etkx6,hpxl6svwtw,8zbo0g784j,97dfemgb7,496dzjt9x9,2pbr93n2ek,yzhlv0xf6,l47gbgwm8h,isbcegbhj6,7zndyhhmg4,cfig4cidmd\", \"hn0leti3e8,gvectolcos,nc5bshzaxe,ij7zm87ktd,1k389fqtzc,bzoe3xvyvc,lelllfskko,jkb21ord1h,do1n71xd0j,4hvxey2qx,g96pqrldjk,b6rserqo95,h1zex766fo,78aiohqze6,cc48gq40v1\", \"pueq5z2ci1,rcg26m5qpm,ku5pkulugm,r3xoyun0iv,irz50x7pl8,7wowpzf314,8k0i6os3fe,3449w6e6ov,9afvw1qceu,5mhctcfzuk,28q7jst79o,hhvsfcfsrt,66tk0xwvfu,4i2fsm6hfq,k3smu92euc\", \"80w62kzflg,v5uwbt7qib,wj4cascn9g,d8yb0dqosu,5bzmczvmwz,fk518p2a25,ihp055mkdo,8ftzywxiep,6xdlvn3sku,lhq3xcy70z,ievz192x0b,pimxk2syk,hk3mgcpfmk,62bnkrhb7c,a72uibrmc6\", \"tdb5oumb7q,8fzydqwblj,ao6gw2m2mu,9vgvvy8ak9,gxeynugw2y,3puqnuxwj6,fkrjrigwa9,7x0cro4ptp,k14mkemrtr,6c81vewdx5,1qq52n9u7d,fhug1gqovu,57dyvvmr3h,hvr98o7uoj,ex2lsl84ge\", \"ilk9xu1c5y,ztvwi2fah4,154dje33apo,h1s29xdw44,lylpomd3gu,4d63jy51s3,2avf7c4501,lnnre5chcw,9yo9h0fwtd,9lhscvdkux,i6h5zjfsuf,j77mo1wrcb,6lxqmhrhx1,j62fqyg1xt,izvmrvdlmh\"], [\"8d6a2xofpr,dvvgdgk8av,mwcf1w4ftb,g5x5s3kosj,toe6912bej,6tasizs0uf,74e1zufq3r,g4my652vhd,7d7z7cc49u,3alo5n5kl9,845cdrawu,m0idb5mdjn,gcxuv8r9v0,944w2kxwqk,bulgu3u2fx\", \"u28e8yaqpn,138li6h4e42,ge0ouqqytv,qrzzj7186q,12e6oydeds6,8w4gtt4uxq,47eq9zrl13,5ix9r8lq41,ijxtd3jv36,iuiaed0lzf,d8h4ujg3wq,jb3d482lw2,eydsyzmwmz,hjhmvqin9i,feo3uvan02\", \"st0esdxgc6,jhu9brkaju,xqsu3a5s44,boyqwa4kmh,ij2rusvm44,ivl2weg8rs,atbvm0uuch,23qvaomgu,jp4lpy2jmn,f5ehldtxdt,vufo39u0,6omuk6pwec,27r6se0w60,25urad61em,jf6i19macs\", \"2o7huosz6b,zhta37y8pv,pkdwqfyuxm,ju8c5getlh,jr597w0v2t,1wz27k238t,52b5v8f4hh,863gshhqjc,gi8mqg6z96,7z5owp9oao,ji163uz12t,j6qja536o7,1hwh4wu624,1a2ihj957y,2j3cwqxlgv\", \"ibdrqw8grf,j2gitjet31,qpn53qc90s,htylpo8cy5,vllhw6a5eb,7ue6rhy2zx,f706aw8dpz,es0uxd86yt,gf0idwgz01,5wfoeete7r,bc5yud13bo,l15hmu091j,79vq8348t7,356jh7etdg,bbuwzk36vn\", \"h1m28rcel7,teyk10wlef,dfrhprru2j,qa3co9m2hj,vatu7nj5yk,a0kpcwt6o0,pd56vfyf,m0008z8vw5,6485bogxhs,kzxddtrexe,ffqyhdphos,a0s66az2k8,5kdp22ugci,861q71423w,30wpv2ze1y\", \"2gahfqvnhh,es8q4mbvqq,vi7a9ot2r4,9atd3vke3y,rm3ihg62kw,kktxksaqor,i98kbca6c5,l6tab9jjmv,l2hlydwad1,1k14k67k5x,d6jwr9vlre,irvb32tr10,eyn4kdqpsm,14wf0evd2z,dpsqg54ryo\", \"zlwx1jmk2t,112ak47ods4,iyyw9pwfz1,k3n84ipyih,v8g8zpi632,ik4dnk095g,5x7g4o2zkn,63udk0jxip,amns1hgihn,bu3meqe1v3,8a2ynmfv5o,761ea7ji96,cu0oqme376,55co81nzmr,2w9rvwr5vt\"], [\"pnle0mclzv,fqkl5ljlwm,x88eb5gou3,153oeaijy9k,qar9z198lv,3jk3qfdvoc,1s4mwo6raj,8hgfocp1ib,25k6z8e556,5o1jaejfjp,7fsh2chcoa,8ya9yxj11a,76sh8g6o44,97w6g8w7j2,jrpdsdvqsc\", \"fuh8vugeye,pqs1e310hf,d5bwvav5zc,u2455cppqw,rkei80dvmb,9ox36bkas3,815g66m9b0,g75pkzp8wj,gc3cilqta1,glum3ots0s,gpubjcif8q,5wlxqr6roa,avj64egcuf,86eqcovabn,4ji596xx5\", \"bia6m9o0ti,8u96izvb9k,4k63pqibqf,p5g2t86q6r,jrwk2ufc7g,ia86643z6e,6od2mxhu05,iwna4auktb,cegr3k6bng,jor64n2zb,bepdjamr7d,4ox9xl1890,1r95t7cyul,culcghc22p,10nww1yf75\", \"lflwy7kua8,11p3kcizeev,js96q1pl4i,jtbzajib22,kxcs5gwhos,84kx18q256,l423tr7ia8,iyjudnaalf,iuvgjxihqh,a04hyqgvq0,hske3lkiug,f3w9zfix11,3f4f5rfe5u,bcztxl65tk,2m412nyf3\", \"vunujjwpil,qf1qk707ug,loicmswjpg,u7xs4rhd05,lt0krs952u,290qnh67fg,8ineoezrr0,3ixhgsjgqk,1kkvg2ahmg,deb0fmon06,2azxvkto0b,lya3z804pa,lf2q4s10ll,drc5e5xai1,ika1sjwl4y\", \"x4a75l4wsq,onto1kep6k,whxn7z50fg,nlzl2b5wyt,c6nq4f2xtt,ayt0ds9qjb,aclvimsysk,aar1wsyzkw,jsyww89z3n,glp2cfub4j,adn9mxses9,ifqscyhig8,1sk19jkt7x,ahagx3nh7z,zjl1kbyfq\", \"z1a3ewrpfm,g0z7242ari,mo9nx6t3fl,ax72e4xy1l,uqnnqilels,10y4ce3e9p,f91nxfqzh4,lwj8g36t7u,k8ekc2y3pa,a9zwnnm4q9,24u36az4oy,6yplwy0gnq,1vl8iq8nyd,9l8rc7fyms,dtbpomjuib\", \"yrkm78rx8t,pkequf4upx,ov80qxzrji,148d6lnqu9d,68x16cqnnf,3dva8854sf,ctli5yntbt,5kxtng0pv9,k72g7xrhh8,35xqdn8gbc,4mmhvl15mc,fxr8069ben,joz1ntn5h3,2l93nuvzp,b04m45gfow\"], [\"owsjmhdgcg,htow849x1e,hfz9l6jdrq,zsnuwst77z,sx52r4h95s,5oj6gh9tcu,hn0gam90vn,lfwrpzavxy,1pvde70cd4,dwovvhiek6,8ssp671l0x,btthjjb5w5,ezmlpff3np,kka5rh9nr,b4p1k7k4o3\", \"429975y11m,clvt99m6w4,lzmpqs4low,mb80sj2lmp,pfqeglhslo,2l1jdo1biu,9r3uhvz248,56rjvqc6lu,5mmyzxtq8e,3higy7ggub,hx9ectbnm7,8ol4q07iw,f8on0daamd,3k55lzqlt,4qb2y3c68q\", \"jx7bxd7xkh,sgbc7x1zeh,kqol38frny,rnxdum719k,gmancy1cwx,b9knufz1ht,5y99x3rb2j,f7hse90ulm,iygtr4dccr,661gudk302,ixcnwnihk8,jvk62ugqib,hhp7r6vbn1,9f2c1diip6,crsgzzxtf\", \"rj98stdv92,a8lr1ae1id,usz84pw3g2,t63q7606za,y5kiwensx7,kn8760hq4,k1mvfvux9v,kuxxq790ob,bqf0a9di6p,gmrg40is3,2oieb3qwv3,dj3nct15uc,lyicroiv0w,adb6c9q4mw,dc1zi9lm7s\", \"iakohj7uvm,h9zzs0cg28,uw8ka47t4l,exesxpjqwl,fs6j6zarir,br1df5q6ta,8veywr1c2e,9ucree545v,4pafftt8yn,3l41corp85,8q60le6tye,f5a200l71b,fnt33hbhvc,j59zfh1g9l,88tapwg5ua\", \"tlnxvpy2ni,gux3lzdv41,12y3bp0lssb,tk5qmpqgft,ra5y1jlrmb,cwavrv65w6,eeafajh5le,22xafokyj6,f7ih7tnkjl,a4ab3evq7e,7wpt1yzoey,ik3t1elh9r,dd9lomwy3m,m3rqi4uar3,772ksm0krp\", \"syj6cxcela,i13yiq1hf2,zpnqwa7qji,x2cautioxm,inafd3zxbw,6uu3ehm20i,eppr3upcgi,79m1ktsun8,69kvgsdyqg,94rjwru30u,j6wip8z5md,avhfeltzyl,7pq4yj30i7,h7fe29uj4i,jpvhpl1wwx\", \"ftqz9nlpf9,redn9p0rs5,ead9ai4uom,11quxfu6wpr,4vupe4rv75,aiw66g3n28,jrdtgen2xy,b5zj1iombx,g4w48x6tq3,k8krxc15de,lvsv5pkyv5,if3xiasjrh,iju9bbcusx,d8fma1qv75,cz78my5ajh\"], [\"1j70yhhji5,6pfh7cyzqg,3u6d1ei56x,l11tz2imqt,q72vzy3bbx,2rpc5p39l,1wxafl4nry,ke92iaq963,ahq47p8wxk,g79y71e9cr,5w5s6hgbj,g81jf70z8q,fk14pwf1i8,4apjelbgx0,16wyt8wtm2\", \"wdvilz6kb7,rro7djo5ic,p3t8biltt9,11io2e69idm,m1dsx1xtfa,1vjsh44yeb,6mi9n6qzh6,3c3czl04p6,3bp7e0u1cg,8eg86vj386,hd8jhlik97,7jp8cu3lrw,d0apimy05x,omt8kml2k,8gex6m9cer\", \"yw6x8lel31,ecbzjx2xlh,x0c5kgcuko,dnccs9y14o,yb808ij714,3ltqcou9ir,56c4by8buz,e9ue3iqfmm,bng0wjdrk7,1tx0zh4rdl,a1bw7rsj2,4j7f2h5vgy,hpxjompxl0,je1juzrv02,acu97ax1np\", \"nptgb4ij7j,11zj0y0k970,ge9m6kyz2l,pashv05acv,dmidgi4753,jdtq91ew4,lrdslg6cda,brl4fr884s,59q5exo9vt,exi3wn365t,em66ap2juq,1ydivfxbvh,liz065mhxo,62y9p0g8f8,6dif00jf0q\", \"l5auwd8f45,r3fybw93w9,sjbhfmc315,pn1tso4oxd,enjp5ymtir,1khx046x3a,ihk9qyt0xp,63bnxzt480,a3xbnky247,beipsik3fx,h6e0mfpe0e,jc7618lvf1,glk5g3unwy,ld3x3q3jzc,cnvzzc5tqn\", \"mz96dr92n5,12lfl1kla65,12lsv4vn8a9,fsxijzcw3y,dbxsyncwt4,fry988tgvb,4bsytsvz1a,lv1pxcqgv7,6h74pkgy91,1jt894zt2m,a4uo078hx9,ncfq40bxs,567aqlznjk,eou2jp72ki,edwjwg6xrs\", \"q6waukk4gb,kvv5x7zquk,8ztwmw7rgr,iiaucuiesk,ojn8njp3az,bo7vlebpk5,dcs5spvaix,5rca7wzs9s,107b5g6u3q,hnjda4q0l3,jcyidf47s3,lyhgcsw3vw,e1gvarco8h,2kkqu7kwll,ghlyfd4be\", \"n85hbiozt8,uvvzjdwfco,mfvj5mjz13,lwny7j6ydp,vo13rtyt0n,h1aw8uzfs2,4921lupifw,i17uhdkm3v,did13r1qo5,akvsvufclc,eaald3o7yv,a1idxx9wlp,c3whwuwi7x,bkhem7cepb,84tlcwsl8i\"], [\"ipgyabowup,frvw82grtp,99epye35k2,mzeyv3izkz,f66urf0u5b,l1e54icmho,ko7p4bghqe,gnc70vp097,bzm9s7lg1g,85r90b5em2,7jd3wom9dt,4jxlm5cwyr,9ts72ybiqe,5dnz4a2v5j,ls9ol8x1nu\", \"mmpexyqlug,uyl3zwama6,cmfay5df6h,eop6vyh21b,qvvmt07yo,hqk0byvhs3,h2t19vjtte,chq5mzei5o,1n745w3qev,lzqsnbzqoc,jo2rcb9yvt,abqe8dn8l7,2p6k5zf8c,i9ni1d4389,m2x4rea231\", \"bfjnzrz16i,r0tf5t5v0z,ld4vm9ql2c,vsc2zcrhry,hfq2te3ur0,dd15tokulk,76gdzsldnq,hcqr44ev9f,dg2rf7vh4q,1s9c7tvya5,amz330lhqx,bdhi840vyu,i7c6rcgb16,64ojbiswjo,18aoe4itfn\", \"bnvo2yk5rl,2frwbkywld,szja8fx844,u8v9xsqob3,ljttodn59w,jw7xldeg3v,1zp1n9xx0g,adbfgsz6p0,k8z9qydk68,7nu4avt6sn,2c5i2pxen3,cvrg54qwvy,c3vvjcuxcw,739jsvqm4r,jae5a0kzwq\", \"r8yeci18rv,mcge22n3s4,gwy8u29tlw,fftt6d1mhv,mmuixtmcb7,2rsjuz1wp1,d3s10fvjo,8jajjhtexz,lvqej85tem,cp4hh758ca,cl34ei9i1m,4vddjnu9dg,cfdcit3pft,fj30i1hrl8,iliomuht9n\", \"3h55hxutcy,i0p86u721r,ay2qapk5o9,nw7qi92gko,3zbeqrcm36,kbprvsloyc,gep3ikxdze,dz389ieovl,4m5wxxy9mv,1vw60vbvcn,gwmcyre2xu,ib395etlox,hef1tnfkqy,murygmdms,b00y1by3v1\", \"vv3k494zyp,ni3k7gdzkq,lv5lib41ou,gyp3cagnol,o1pt168vzh,2xxjxo8g72,bhccs7lk36,bm8kzbp336,d9rcmtg9id,dwui5g3ec0,b98t0039ul,8xaz8sdpep,lfok98k9yw,kfmrmnaw3o,379ojnezs1\", \"t9s0srayr8,swtrxoyocz,zp1floez7y,llf462ushu,dnnz30frst,447bvk0uci,71gws8l3ur,ehr0xt1gmv,lcozgjzt0l,98fd75mwhg,a9x3ygj245,l3rqeup5uk,lr816v912z,4r08cqyhqs,8cfm6iuydu\"], [\"camz7c0bc4,efdc0mzwl3,rhw88xqwak,moz4lojha3,oqv7weqd0s,aesiiulykd,63w1jb72f6,4jnqg2ufgi,jtd5ahq9nl,2xdfamste2,ae3a3k3rl3,fajnwve0sq,evkjca7erf,eh8f8n51fl,c2o7st12vf\", \"10vf04v8jip,tycdlck2j6,xw1y6adrbk,zup1ovn9aw,124kzsvvm75,gnrsw47mp,9w5lt65uso,ie5zxui5s7,1peny5oz9t,5sp9r6p96f,at6sxn8gf,anmgq27081,5og58mi29w,7xvtkm9tce,cz28plgbsb\", \"qb6lepojur,10vjob1np5t,nsr9h1t1cn,14qbgpmsup5,kc55tog56q,azgk977bxq,i9b4hocrej,tp9u0jtey,jf2ttasyhx,4i5jz8yjn7,gq8fc1f0s2,e4powwb4ya,ao4jav6tz2,98me4tmz3x,3ck1kh7yfi\", \"jna7t2ghrf,8z3lfno14o,nsc01ygdrg,8f7ff5klmx,11nzp2082yy,2dokcm8ie0,31w94ww5cu,byzs62tcde,dv6511yyig,l2yz4lb3qb,cy6mt0xqfl,75twg9rvne,dfb3xuixca,gfkzxb3fx5,drpyeb9hwz\", \"mwsipmkjjf,w64dgewe9k,i7o9se2o6j,159sx33fd6g,qjq31dx45l,k7xthxhj5a,jxln2shc98,lzq757827w,jtc7510svd,8laijz75fc,bzhhyr5x1u,5wnejuymd1,doqokvza46,ehqk1kk45u,7a5t73g5ng\", \"133af8lj8yv,fd5kqbg0kl,v2sv2c80z6,dynd8c8qmr,n3nrb9ja1t,kzwq78l39e,23zoiflody,esoh1m7erg,jascib9amg,dbxy2goo1u,357robc4ae,ky4ddeu80z,72duc71ut6,6j56hyrecy,34vu2owd5u\", \"q63viqkzpl,jax7i8rpoq,sqr2gtylq9,10vazn4h1fr,eacwg1rzrm,9bpp9bjdlj,36leydkl23,emnx8zbqwg,769bkk8d6y,8vl24qejgu,fikgrul8ha,kxofr4ogqv,fgbejvm6v5,dt69g381zr,imkvujjkoq\", \"ufe8zotz6s,15ubmvkv18v,w7bt2y6uje,gd4p38yzne,mxym01b6ex,7a0a18gmj1,kfi45vk6cl,4z6fznz8rr,fvd4zovg2w,66u7yaj60u,hxv42eomit,6by0qr33vh,2l8oeo83s,5om8nc216b,2sxhule8n7\"], [\"zmlmvya6ca,e9hko4env9,10qez45m3r4,nsyvhdeard,azhlzeywvd,20d3hcn16u,g1yui5cqcj,lt8h0auaej,1pwwet8qhi,9ex2zmmhts,fe0i8efuzw,ajlloe4h9l,40igcs7ku,9fxlt5pkg9,le3srcy51p\", \"hfm22eva14,tex1g0yegl,d21rltw9g8,ev4jszvz5z,mtjx43u6ho,652rt8ewp9,d68fe11sew,9r1bo7kvqx,cxuvysfvol,bgvlbfc08z,274yrn6fat,74iyny8uvf,9uk9v4j955,96tjbzkgz5,2icew00p3a\", \"jdze6slkva,sbo1qwi4lw,d5exjo2ps0,kdqylqnmf3,13132i54edq,c65u3hxeoz,i3h54a38nm,a3pn8ku4xj,a3n03zy271,hqqr8wyh52,azbincorv1,guxxmjwd3r,l5pin9jeur,kmyxs6xu7u,m08wqy7ex9\", \"yyqy4gnmvh,k5nj0zwgvo,lbnp96wbfm,fvlibhzkbl,r8gpt9pgey,15yaigvejz,aifoo662ao,e4lchrnil6,gknpuxkk9z,29u2q9zze5,i80j1ymw2k,frpsmh1u0y,b7zbagtc3i,j8rrsrwoap,yxjs2bj\", \"gyw19vwrq4,vzpkit8eyy,rfghito3pk,mdm51g0bt8,hanjim87yo,l4y1pee3nw,4yeb5bgtff,65ugxe7tla,ax5fbs12qb,a6gxvt3uwl,5mekioxdm6,jqseb1dssi,a0e0a0f516,k2daggybm,9053a83a8a\", \"d9d4x85td4,kg40mh3qg5,wupn511mil,os8zj3a4c5,aiwuwx4tra,hfeg1jwcgm,gp56mvwxvk,bcauqhzc7k,hjbrrco29l,3xw1nxriwd,i8fkb0vmsx,3z5ef85r92,82uz8whqvn,7huszk7tr1,h63otm03c7\", \"41nnt9orfs,kqw7nnhrln,w27qlg4duf,n5j55u91ug,bmkcmm6mlz,2tcxi8d5sv,6drb7gtail,atcnq0bqy5,dgef8781hr,etseafmr9t,6m8klfprmh,gi2ajgmgu8,69iz0yew9g,fg9p86k55c,lb4i4910lv\", \"iqgc2h481y,wd70szukj2,blrjd02rf2,p4xc01jq5e,cm2gxhlae5,fwlgw29dfn,3zapdsc131,l9q6sswvzm,bfirv2snob,fjd8xmbvqd,jtkvp0ckfl,83mv7j8k3l,hkysqvuq2u,gfhjjt8zn8,3u1r9fs79v\"], [\"qn3ht6fygw,n7wx66k9m0,kenk6hnfce,31dvrk44ri,cudaliwtkp,cr2gto39py,klhw3obinw,i88xz5v4tl,172gzhjhw,7ru02h2nlx,kidwr1120a,8cry4qps9i,9sc54i3zm1,du540mnm71,f3ca00ot0k\", \"10wgxoq2wcb,dr9mens1e2,13nd3fcpdq6,njkpcm54z3,mtsztfs83m,hjt8hem01a,asr8hcnmgd,9s488e8ay,5c7igte6c9,f605eyuim9,6tu9p0z2nx,1oslk4i626,fc8dhkgqob,aky50po6zy,avd9dea4r0\", \"3ee7803veg,wzzju2si5g,ni0ag31afy,h4z2jpkj8z,om6hnk85h6,2a199u01x5,f10w1z4ab8,jwimvurhvb,ez4suku055,7xtmgu1rss,amp09kdym6,8l8opcj7f9,7juabyeps0,layugbejtp,jx9arfpe2w\", \"8ey2nwitro,j2ecmx1j4b,nnvumd75c5,uaqzyp7b7m,fayehq1a4j,eqow2vkzqm,aacvsop406,h5p4kvja9o,c6jvq12ded,8cyn0iglaz,6krtv0za02,ioiyn1ntwx,ds5n3nfw2a,b99lrfvna3,khxp01gbg9\", \"nf9lgxa6bu,j2amhyahbh,gs61qswu0e,ulv1k6lwk8,t87lpnb0am,ak4y75mim8,l50xgxh5i0,eutg0hax57,97p9p9nmqd,aygdgmh5dw,3a8eb0re64,2rbuyg0k7g,kpv9eyz4g4,a7eaaykd1l,5a1l3rgc5r\", \"puneh0l20e,nm402xigvw,p5zvmypv74,q9or33gw8y,ykbowlq7fi,bofxqjojjl,m64n9e9tly,atjk44bdm1,bcqsotj2zi,hn2te6c243,ievy6n7wwp,kyw2yhfwt0,8e3xp5rds6,2vt8lm7uj7,3ygoalolxu\", \"degizej78w,814n484oz8,wa5zgdnd1b,j7uodl6l6e,rn8jybnjja,f848vh4oid,4iqh3nv9tj,at39yevnnz,hj29i6epyj,73hm33i69k,bxrfb7161i,f4pn6zpv1i,lms2o5emb,icphctgyeh,c1lfaqpnfa\", \"cqsixwny04,xtqdci01sl,uuxof3uf9g,mstwxra2fy,lsjkhkhye6,3c6lvdyndi,5x698xm9xp,42nncavvlg,9ihi4uzmq4,i41fk8odin,2bijw0nw74,lemzdhephu,f5alcdgmxb,cmdth62bpk,hvp3f6d65t\"], [\"g2mckvhmf4,i1uzjayo5p,klttfxe5pv,1546jtwu6a2,lrej8ebjza,ci3dfpaqu,guz71bk6pb,9ooh4cd7cs,yxv0fe3hq,c4xpkpdbks,joajq3rkae,hpo99kyikh,7q1ir2njr1,fndmbsulmn,fnk4ebid84\", \"h2k4titnsp,mhfsjwdqky,o5se9jzrxn,vxv3t0yrp9,brchvjeql7,8c11v168ep,7chqrzvg18,8637ywa0v4,5tvc5de3iq,9fbb5fqymp,hb7mfj331v,63i730qxan,1nkz0vfjp1,di5lbdnggr,idtyjto5zy\", \"pdz84u2u34,oqzd7ksyjr,gquao977s0,fjbkla0xl4,y5te61d7u0,gvmkimjcyn,ejutw8ax4o,5ns7fmfag8,l9cdaynwhy,fbe1qpwj1b,8enn9h6s5n,9txs2zzp3v,i2rn3iah8j,21liojfqy8,2jkyp59idu\", \"nk861v5usd,yckvw8n9yf,si5n9mcaum,g7ocjqd1mc,bwa9lzdrn9,esamka72un,dc9j17ui80,e80b7kufbb,8u8xco5agp,8f3ec28i7g,7185zpumsu,a63szzsn8e,hguu3v02m2,ah3lr1dwkn,h4b6uvl9ae\", \"g5k1kcjqqx,semwcs41ww,lsbhuup1ij,mh1fug84do,psto4kvdb5,bjbcq2bgq5,ffhh44qwcp,eba2jr5hhx,7gnp4o6hrh,fy2h8my2j8,457tvo62ut,9k86s3i4tq,ld1h4x0dkz,ct8f6mujfl,gcyh1gpyhs\", \"v3qtemdgla,d4cntxxrqp,144rpyvhx7r,zmz3unms26,jiraq53kfn,b1jt6squm7,a204dy4usr,135p7rc3vh,evmj9zhf5m,kry1446ssu,2zha8if8ss,kaw6lqrg0a,3h2umegnig,eh0i0gtrj,2gkp1ju5wk\", \"8fmhw2f50o,r6g8cdhrma,zqq412tdhf,13540qv3wag,jbkh1d12ew,e8gdflif3c,ee9zn2tvz,3yj8602eu9,4ryrluhmu0,gc7zwft65e,73y9p7hqy,bngtseugdk,l2kg71dsgv,k81co0s9z2,ksnbjxfprx\", \"lxzpmmus1e,10s330lwixv,dh5ebgluwb,wrsd0dteiz,56ojzedpav,6zhnat27jw,58grfrvknw,34cr58k2uz,hv4d7nqjk5,2jngxoif54,adez8yznvr,j91cpik6wb,9yc1hjvayx,bn79dth0hp,c7k7tvqqxe\"], [\"ja170br3x2,hm12g0wfpf,nj05swtq2a,m6kc3ogcut,ub4rns9a4j,i7e8fedwh9,fkrxb1rv0f,i7ipcuogz3,air1cpvvd0,jpfrhoy530,f1qb90dcjx,l3g7ft5p0f,lgmj5ek5b6,3kipvxcyuw,fo3fflkfhb\", \"nqx5smhldt,ogjymeibob,l5tkc6f3dk,5vzklhjkrb,nzda7nyi71,jtnb7saowl,6iw60n9ahi,7tfxxtspwb,41xrej95n4,7x62168ptj,k7c26sppl8,4t4bud0ikh,lyj9x2qjp0,95qi2npo2s,6oopk6xlre\", \"f2lgq7g7im,8mgyxf9xon,pj9p42fy1w,qlo96yj8cg,ae5tkrdt42,ee6e5evdyw,j92wfd1oto,1s40s2eax3,fa4pfc4b0w,5hpbzqw626,3jbgukxycr,d1n5m5h2dx,8w0xmmrggi,2wayjqbahv,ikwcdt3im5\", \"16ah4klvnqr,k2hnu8a1mf,cz0w7bjpze,drweqekfer,jyqkwh1hcd,kes6d5uslg,32n3o3cbn8,31v0a74sf5,9t50bhgted,fnsa7kpb8v,dra9rl979i,6um7y7pxph,lzvtrzakf8,hhlq3m0xfw,aot4c0u4p7\", \"qid49gktdu,oojrlnxf48,r19axyin59,fbo4hl8srp,11lta5awb1u,j7h1izcmvs,is9w62g03x,hy4386d1hj,kw16qy5iuc,q5wqe8ak5,3t89cbzdm6,k9igvtomfw,c0s0wmvqbx,ho7qgojvzr,c402h6kdww\", \"hdzh5k4ct6,snwx16jzy9,md80lxr095,yzow6cxy3x,x5vo2r0ga4,b3ovskr8dn,c24vil3igg,ckdrbne6lm,f28w9m7v05,fnjl2lq7n1,lh6ixyk8g6,lklqro8ctw,evsm35xlhd,c9uk4m051m,6l3krajeht\", \"qhenpunzfz,srch1ksmmn,mz85ijedv5,55p4kvj32x,ol25wzcdvo,jg8fpnzxfo,ajx6tjwuv2,5usbhtho1r,ihl6e5ok95,eo151g9bf9,9fsjc3kg8a,2alws3ww5j,8duta70wwd,5l8fjrk7cn,h4vusaewtl\", \"ju3ezc97xw,1waoni9buo,oa0cdhpwfu,llzycw1m8y,gwf5rfvo0z,f65nsaa6v1,l5i6rxd2v1,fqdh3gh6tx,c47njjo0nw,811kd5rjvx,h49njxandm,hit29wca0o,hkaihkjp0g,iigqmn4vq7,apqrqiw8at\"], [\"snwel8y8es,j9i3o9g6lw,i0vrkei2ga,ugbwc9s0t4,gftqx9rv33,b9bosllljf,f348jfvql7,arj8eip57t,4qijiboxrs,kvz47a2s0b,glscmlacge,eamex02bg1,2me6q3twc6,i2cbjqcqdv,gxyjay5zfk\", \"uxeb7rxfj3,wg0fndghir,ulo0zlybvo,gfph49ur2z,fsc4dnyctj,bvmqr68cx2,3a3eqnotwu,dt6wxipa5q,b11esfnj8q,j5m2gx5er1,7js2cgeoaj,ew1djzhhsq,bppxruxdgm,klayxo2bd6,l32hunj3vh\", \"qaydddj5gh,jojijscx0y,107vthico0b,xjl1bcqvcl,qynr9pavuy,98jssfvao2,dzz70v6r1y,j496l680em,1rszv0fi0i,dxctcua6z6,3x2vkf1aac,fj974pcky8,9yzmb1pp1e,f62fa7kego,9ym1l4nw3z\", \"ga1cqfskwb,m8coi6zvns,ix7oljc4ur,fsmbo452w3,ungxg6uhtt,9tabzoprbn,ec2cu75afz,7bu4kzm5vh,1dchzbedfu,9ukjmh7k5p,ea9sctvu4g,eji6qmfq99,a5a0tuabyt,6444a1ck4g,h6grr3t33m\", \"rolq8gvjis,mjby5cvwtc,k2mqgkp0at,g4crx51kff,wa305ywspw,9h24xrw78m,azsusvyod3,1sjn2mk0tb,ebyvx4g14n,1xhtrwtihg,7ugq6puimf,iok5prxs4b,451jufmry9,lbru3l2w00,96fgd6pyf5\", \"8mvxxq7j45,djmcwn9zuf,sie82g3bt5,so5ktaqx6s,md21mkxcty,ltu9yjq56y,3vyjllbrci,lvv6hdyiwn,5huzd29t1d,alujsf5cx2,7vz0pe4y2l,iukn53ymes,5nnoi32is7,ehgwxs0zbt,f0z7pwygww\", \"vit2zm2pdb,lqcvdgab5u,v5ss89q753,r3ublw11dw,msavinul5b,eio8e8jkev,hc5df8amwd,be9i4g2ja8,fz99kjwiz6,1mn0pj9mh4,jbcs5nwc1k,10dipgztgp,acwa6y4myy,fsg6b5woml,j48staz2qm\", \"dsy1xsv027,ph1w5qqtls,mvqg4aai3d,8hpbqz2abp,ujohh40vnc,c5o0dmhfqz,ao0hb9pwkt,8uetd7k69j,g5mw9td91m,1juuilyefh,b9bwv4pnm8,jmbmouar7r,6n0aqwc5mk,hgluybkfkm,6n0xkt41ml\"], [\"i2lfr4puge,1pn4kn21k8,821lrssu2k,13it4b2mq4y,a23dk7puci,eu21857846,ky4nn73nur,524qea0afj,1duqtx5f76,4cueybbhge,k917asl7s0,25nuqgbsb3,lljn89odp1,i4n7h5lg9k,5h967x0q91\", \"z4by4zwhpn,abv6smblei,16iqh3vqe27,ost0rtt9q5,k3agnenp9b,xcr7vp6ia,92zqjzyh00,8ovc27brv,l2d4t2bsbr,kndgdkequ4,5alioqolgz,ds11fwc1xy,fe9t4abskp,l5o1who2mu,5exipzlilg\", \"h7lxevekan,6p7ygmgq3z,htfob5bklh,s0ukdim7wm,o5olxg4v3x,36p8eovbi9,jfkmx37i0p,bqltv09bku,s4n3dnf95,dj22ngog0r,23lm94ezkr,43j4kferdj,j7enidb747,cxkqqbjnpo,ldoxbfjk16\", \"o180r18a87,9sbz852kth,uzr7lt02jf,11eo32dalzj,ejonsqe2ut,fyg3g44m8i,5bs4772kfp,m0ips629rd,l7u3opqt3a,jfy38sg6oi,d9ehvsh9w5,davs99yrnm,9a6arwr791,l7x0rvnae6,9yw8m47ae9\", \"kqwb90n376,b5gm4j635c,hyvvqlfu0a,7knn7qhghl,ial2oh2fjk,akxqsoad4j,2gd1dantl5,bk9ne907re,fcmgxgf4gg,ehvro077gx,ifsdt42v2k,imzl9fpylc,ix4w1y3a76,cidpbkm20w,e61vsxmml9\", \"uf0yam9s50,w50daso0vi,9quinu3mci,db11i7kv52,peoo20p28e,a4ifqp1hje,guiifp0p8h,datvvbeexh,ixpdntjs9z,eq5z1tb3nj,ipscjy9exb,48hwtw18hf,6rocgkkngf,873nwc8w6g,glid0gpjga\", \"ugvuqmug7i,5yowyvzzwn,2v3cf22zkx,ns1sjqpop0,lsqckr0kf0,bkz5h2lpnw,gzmpbqjo3f,4i2l2th6u,6oc4476luo,1loieqxtmv,e9agz00y09,hmakeyewip,3sogkofaqh,vz21w5kyi,879unrswnb\", \"r94tcb7i7i,m26zat4vlz,zhbmynbf58,y7syehdx1j,tk4s4so2v5,cfx19hlhzz,auu8jtlt9s,56k3vvgp50,l6tqff7qhr,elz6d8ogey,4d0zl3kpcf,fqw8v4fsfe,iyhriay62g,8uuncegm0u,3g5ops60dk\"], [\"gmybp5o4to,s0p7kl12ed,vswh7pbn35,jjo2wr0dne,12oba2sr3e1,fbzf10zsgr,3cqs1f1jzn,ejt5wsqzq3,61wlspkymz,k0q08muo5q,9jecgq5ril,c2eywjolr4,6j02z3i12k,bdlj7kii03,7sfq0u419a\", \"en4jpmhe3m,vy76kpghhy,hncfjcj55r,t1uj20eg1u,l7hvzrn7mx,b24udcy5bb,6r0l8oj642,4zxiqc6h47,dwpz3l517l,5lcfk1o28i,5ilfc6k2fd,llp4fkxcwx,hyl1yc8jnm,5p9atk26nc,gn2snxnazd\", \"iw0o5m20e5,pnlh4gejy3,j0a1m5g3fm,feoim2z55o,14hzjfsyatc,kzhp9kaz3w,bl2zf2kj58,harz4acwlx,dost3mn1l8,jd05bdealr,kbm19r1n0r,l2nt8ln48t,6w3bwdeh14,2ov5qwshsc,3p4reiaccw\", \"jxjxfurw0a,q9zv0wnz27,wsoaulizbp,nv104dj2ny,a5p63ybb70,k0ygrjuisi,h6ilb8nwlg,lkhull8sp4,j714fzo7ft,29wesi6fhw,3dw336fncl,5f0i44trq0,ea6rndo9vi,4qpppr5mp6,8ty7ew0j22\", \"l6ijrjcgdb,p9ritd0k00,mrdmgkie77,gibszki5fe,k62u45fjls,f1ykrxp0c5,fsxcm6age0,adzkdayibv,ecxijom6mp,c5hhqs8wra,86d2ib83ks,hj22pifdgp,e199myxi25,3kgjypyiv5,lcsp969l5y\", \"xjvoe5sh56,9nm6bc0mmd,k7zzeb0ri9,r089bgt5eu,r74bry7yks,gku87tfejo,6f7ooxo2wg,c13aloi72b,iok3gpclrx,35b4xmq1jj,63ckt2ds2c,psf9rpoow,kacd3vxred,h1hr34uwce,hbj8oetu6\", \"10kuih6mp5t,xfdc7go3vf,61ur794m1u,dviuefpawn,ijei6qs8cj,lyil2tgngb,5jwjhpvn80,k45in58oym,859ayv431c,6m7punibjj,2lnht5z9hc,gajcg6ebbt,lija7cprlv,lqc3lomdyc,4zd8e0esvm\", \"hkj7btpkti,jfmumy4x64,3ap2vfkq53,xk8j92yyiq,w95mqvxy1h,kc2sdeaz4f,b5odmeknl,30m89n8ufn,1shynaker2,is0g6sjc3n,eqgy5txi2w,h7sb7x85ei,8ldgu8g364,8230uwr5xj,yppnaqtto\"], [\"qtdl5bttr0,ssk8atuxk8,hrtfdaecjq,i51l6kjphw,10yk8nvufg2,9z5lgadzgb,5b15b8fdwm,iv33ocp7fa,h5s1krdkp1,ikq5f6ag6o,kmcuctxmh4,2zqyr4jsgk,egnui09to,6e7kpox9wa,hwmbrtdc7r\", \"m2mo34a77u,5eqtvfh63p,893ytc0twg,gzpdn76pjh,12ysmbvsgcz,bz28xk5bss,hrl8lz9vp,ff1fwwjyk2,73txc5oz3o,3fs71uo2to,9c98on0896,3eq4fxjuw9,b3bcg7nwyv,hbnf6pt7i2,4urtjviggq\", \"ebqb0itd4a,us90cs8d16,eg2h1hk8bv,e3pp28s1qp,ksjeivmpt7,kqaphm6ztu,jnoqmk963l,ctvlw69k2s,8dz56ombap,dbv0ifuyu3,7dyji17qw7,encwql9fkl,5dfv4956g,evyie6i37c,9kgb5booep\", \"igi9h6l2u2,kx2g63k187,htlobdwl9u,91jn5l8sy7,ry1fe6xwkq,c5styxdi0s,bhco2chkk2,h6ovbtmfav,du7pcr6u8w,1kyi74ldt,gdrru0upxv,38701ip527,d7n7m79qcy,jc80scesil,h7fcs1g8yc\", \"6hya83k5di,keevcvzr7b,zjtyuxqbrv,8z66oww2jm,w5ri98z3dj,lq6t0a1p2v,gn9hbg82w0,fr7pm3rrty,l89svfs2ut,awc370qph4,d8or611e8e,j723vws4v8,h3bwqvymmt,6nl034e1rp,i26d1ifkpo\", \"iwx40ibkvd,nqilg3q956,mv49q27734,sc3wnjhhqw,10ml5zkakgg,64k4ef6gbr,bwylm5l4lc,h5koyge6f7,dtmawdpg41,43vq7fd660,820r9rwif,1npurb4i3p,d1ftunuw02,i3zboax8od,4z09k1kg3r\", \"z3p8x3blck,gyd08jkv3h,moq03w81vm,kc07xt8u7z,u3ihbj0vli,d63bpa8rqk,cofk3y5hos,jvbtfdytmg,6f6fx55d7p,8ubgwjvw3n,je8e7chmj2,7oh598v7d1,jsyph6p662,hyjhlytian,afd6ns91wx\", \"o7oyy8wrci,b0cze91smk,tn79x0u3lw,7xz2jydwrd,bedc3ecw5x,cjfvtxvmy6,g4swyfkppa,7h4k540ns7,6k2z4h19hv,8ub3wnee5p,gwpw3gimx6,aflibvi0oi,i3gah02s7m,adnoxxkgod,6pcu0podc7\"], [\"m0ypu0kozn,m57mlh8wmu,k9pu09u7dz,nn68telm5b,lt7q3qqvc5,s650loho5,i865i0a3we,hz67l3wkj7,8398rfj6gc,7p4fssefbe,7fwzuftmka,1i1lcv9z70,bln13lzgkw,41fwubkohz,1ji4fnkgcu\", \"104wfz591x5,qxy01n8u78,12dwz7t6zyd,zyzd3vfl14,da8va9lunk,eq2g3qww4t,377xo1qa39,gffgwktpp,famy63pwko,85uk7901b7,club3ty822,ke1rffsagg,g5nxpnnxfq,kns2s2a9b3,4fua5nbl5u\", \"q6pqvzp9z1,nf28zqd30j,ozl7fpaihg,jood3pfpi1,jzr7yhzsyy,ccufuis5oj,bcsdabibvn,9a8dtidsaq,69u26k0pcw,bbe21f67yb,8szgbtynck,3xw3gvx0oa,4085hzyr0l,fqudmjcz6p,ba6ctnzg8q\", \"10x6dp18ddf,n989axt1hn,b41647f7ev,ipj4vgff0c,ng7ci65b59,4ge5w6jbhl,dbabls65vd,bjywkeij3g,jomj8m65zt,3m7g7oqok2,gwtephynpm,eiwsgvs55z,8s5razwa0m,88mnuab06b,ikiz5djuss\", \"yedeaxari8,o0lo095em6,x6ny05zb1c,qe6ajuvtk9,mgyh8lwbfg,jww4lm7bn6,apyb7fzu63,jh34pp3598,i9hf2pqof8,5k07r68ilp,98su89jlm1,au0nzfwikh,a0s5qlnp8w,j9shtjy76p,1i5ptcw8u2\", \"upmvld2yiz,sa4vfry05p,oebgbb6tpv,pjfbuiu4cc,hcgmp521lj,cr2c12thrn,963c6yuyo6,dckef71od3,92wl8xp037,8s9nj3rlb5,gjv01dxwfe,59rq9oqob4,l1e6f6f0ne,j4gng5cby4,ch8klbpxb6\", \"prxt0be9e4,qfk83pb5qj,nf06ddg6ly,jfo2xl2lil,sj1vns01xk,59tlmwiqup,5durqumd0q,f0gaazytcn,l1w3mn91x3,cew72zfji3,bf5hmy32df,lnbaqo7kui,71ag3g04qh,t0vhja753,em1hr3yuhm\", \"dka07it97l,k5d25je91c,hqryb4seq5,ms843el3fx,dd0ie8sc5o,jtrkoj9p1r,i0yce3t2if,5a1l5t3neg,5zyvubpe22,2ny6o5ul5x,c6o77rahq1,ly02eduvfa,dn1hqf62lk,5u9kvfx6bu,4uzhysfpm9\"], [\"mmz6xkyiil,img807ci00,9oreyv4k8w,nwn25hsndu,x9f7rm3ikb,gohept88hr,4xyhc0kv2w,gngs7idjp7,9cm586sgqz,2pinvi0t6y,b2lveimiuo,gd0iev943k,erkt92ehom,flt6jcd9cc,5huhx9yjgq\", \"hkk7qr5itw,fy4v05unzb,knfig8iol7,opqs2euwgc,iribibiq2d,cow3crbdq6,96ahgatnca,1vlwm6595u,jrdeqhf4qe,9wkmjk4t52,efhsyfnve7,1i77mh2jrr,6p5p9kw939,1pejgx4z21,6k7z6zizsc\", \"ksajuubqnb,zqxcdk0raj,cal3jsqls7,zhjjmsvbc6,insa128ion,1oqkacftdi,6ixijjpgzp,4jvvktvkvl,4lib24u04a,6gusvqts6z,4t7amccxkx,8j5bhfu5wa,gth0v104rs,ghb0h371hz,etvu2l87uf\", \"nr28zssm4d,9cvx5bddag,qesm79g87a,709np251v3,35rt541h31,9qkaul0e6t,ddzf12gulq,ctgmegee6l,2w9il0nou4,aeierkb1f,e4g2c2pfo6,zh524hrn5,26dh0l8pe7,1ua2q9wp9o,cuus6n00i2\", \"lpxk16k4ri,r3dstrh4kk,9gzikt6aon,nq83l17erd,i4qw6c87r4,bqfokrc7fk,i6pzeaewjf,dlyc4x0xr4,a8mrj9mpkg,7rlzmhn4yj,d9gjmdoavk,cpxm7vp6ae,l3lm3fsfqw,7qwkve1hi3,fh4h7pe3yn\", \"7r0yblgjgw,o63vdo9rt1,zj2fl7viyz,e3bvijy3lp,7qqg8k8is5,4uk3jy0wpj,2zsnz84ylh,hchsnwixvk,2avaa6dn7i,jib6i7uj3d,6k0bqvhbd6,d86uhlg6e9,8tjn3n76dh,4bqdiyokfw,jk9sj8p2f5\", \"tm7kcvg5vd,gyai1r9owc,opx5owuh71,dox7jw59lg,bxt10d5kn1,8eboreqjar,hw2h5wqpqa,f77zevq7r0,bkeem69dak,1znctlsrh0,bv8ipguds3,7y8fflwvu,9ryxxflb0s,dpl2p1ltm8,6s15n69fby\", \"wim24psv7g,j9agvb3yem,ldm2854zc5,n2pu0uhvja,4ephr6s5a9,co9n003j8u,64qir1rc5z,8o9rtwxu8w,7aob3iwsn2,32fv40co24,9vri0rog2u,5d9p0aukc5,i7p01amblk,cziyd3uzw2,2rdh13tvy0\"]];\nvar AFFINE_ODD_MULTIPLES_OF_BASEPOINT = LookupTable.FromArrayOfStringsInRadix36Form(oddMultiplesAffinePointsInStringRadix36Form);\nvar ED25519_BASEPOINT_TABLE_INNER = new EdwardsBasepointTable(ed25519BasepointLookupTablesInStringRadix36Form.map(LookupTable.FromArrayOfStringsInRadix36Form));\n\n// src/ristretto.ts\nvar INVSQRT_A_MINUS_D = new FieldElement([278908739862762n, 821645201101625n, 8113234426968n, 1777959178193151n, 2118520810568447n]);\nvar CompressedRistretto = class _CompressedRistretto {\n  constructor() {\n    __publicField(this, \"bytes\");\n  }\n  static FromBytes(data) {\n    const compressedRistretto = new _CompressedRistretto();\n    compressedRistretto.bytes = data;\n    return compressedRistretto;\n  }\n  ToBytes() {\n    return this.bytes.slice();\n  }\n};\nvar RistrettoBasepointTable = class {\n  constructor() {\n    __publicField(this, \"edwardsBasepointTable\");\n    this.edwardsBasepointTable = ED25519_BASEPOINT_TABLE_INNER;\n  }\n  Mul(s) {\n    const ep = this.edwardsBasepointTable.Mul(s);\n    return new RistrettoPoint(ep);\n  }\n};\nvar RistrettoPoint = class _RistrettoPoint {\n  constructor(ep) {\n    __publicField(this, \"Ep\");\n    this.Ep = ep;\n  }\n  static FromCompressedPoint(compressed) {\n    const bytes = compressed.ToBytes();\n    const ep = EdwardsPoint.FromCompressedPoint(bytes.slice());\n    return new _RistrettoPoint(ep);\n  }\n  static FromCompressedPointBytes(bytes) {\n    const ep = EdwardsPoint.FromCompressedPoint(bytes.slice());\n    return new _RistrettoPoint(ep);\n  }\n  Negate() {\n    const ep = this.Ep.Negate();\n    return new _RistrettoPoint(ep);\n  }\n  /// Compute \\\\(aA + bB\\\\) in letiable time, where \\\\(B\\\\) is the\n  /// Ristretto basepoint.\n  static vartimeDoubleScalarMulBasepoint(a, A, b2) {\n    const aNaf = a.NonAdjacentForm(5);\n    const bNaf = b2.NonAdjacentForm(8);\n    let i = 0;\n    for (let ind = 255; ind >= 0; ind--) {\n      i = ind;\n      if (aNaf[i] !== 0 || bNaf[i] !== 0) {\n        break;\n      }\n    }\n    const tableA = NafLookupTable.FromEdwardsPoint(A);\n    const tableB = AFFINE_ODD_MULTIPLES_OF_BASEPOINT;\n    let r = ProjectivePoint.Identity();\n    while (i >= 0) {\n      let t = r.Double();\n      if (aNaf[i] > 0) {\n        const t1 = t.ToExtended();\n        const i1 = Math.floor(Math.abs(-1 * aNaf[i] / 2));\n        const t2 = tableA.Pnp[i1];\n        t = t1.AddPnp(t2);\n      } else if (aNaf[i] < 0) {\n        const t1 = t.ToExtended();\n        const i1 = Math.floor(Math.abs(-1 * aNaf[i] / 2));\n        const t2 = tableA.Pnp[i1];\n        t = t1.SubPnp(t2);\n      }\n      if (bNaf[i] > 0) {\n        const t1 = t.ToExtended();\n        const i1 = Math.floor(Math.abs(-1 * bNaf[i] / 2));\n        const t2 = tableB.affineNielsPoints[i1];\n        t = t1.AddAnp(t2);\n      } else if (bNaf[i] < 0) {\n        const t1 = t.ToExtended();\n        const i1 = Math.floor(Math.abs(-1 * bNaf[i] / 2));\n        const t2 = tableB.affineNielsPoints[i1];\n        t = t1.SubAnp(t2);\n      }\n      r = t.ToProjective();\n      i--;\n    }\n    return r.ToExtended();\n  }\n  /// Compress this point using the Ristretto encoding.\n  Compress() {\n    const X = this.Ep.X;\n    const Y = this.Ep.Y;\n    const Z = this.Ep.Z;\n    const T = this.Ep.T;\n    const u1 = Z.Add(Y).Mul(Z.Sub(Y));\n    const u2 = X.Mul(Y);\n    const inv = FieldElement.SqrtRatioI(FieldElement.One(), u1.Mul(u2.Square()));\n    const i1 = inv.i1.Mul(u1);\n    const i2 = inv.i1.Mul(u2);\n    const zInv = i1.Mul(i2.Mul(T));\n    const denInv = i2;\n    const iX = X.Mul(SQRT_M1);\n    const iY = Y.Mul(SQRT_M1);\n    const ristretto_magic = INVSQRT_A_MINUS_D;\n    const enchanted_denominator = i1.Mul(ristretto_magic);\n    const rotate = T.Mul(zInv).IsNegative();\n    X.ConditionalAssign(iY, rotate);\n    Y.ConditionalAssign(iX, rotate);\n    denInv.ConditionalAssign(enchanted_denominator, rotate);\n    Y.ConditionalNegate(X.Mul(zInv).IsNegative());\n    const s = denInv.Mul(Z.Sub(Y));\n    const s_is_negative = s.IsNegative();\n    s.ConditionalNegate(s_is_negative);\n    const res = CompressedRistretto.FromBytes(s.ToBytes());\n    return res;\n  }\n};\n\n// src/signingContext.ts\nimport { sha512 } from \"@noble/hashes/sha512\";\nfunction isUint8ArrayEqual(a, b2) {\n  if (a.length !== b2.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b2[i]) return false;\n  }\n  return true;\n}\nvar textEncoder3 = new TextEncoder();\nvar SecretKey = class _SecretKey {\n  constructor() {\n    __publicField(this, \"nonce\");\n    __publicField(this, \"key\");\n  }\n  static FromBytes(bytes) {\n    if (bytes.length !== 64) {\n      throw new Error(`Invalid secret key length: ${bytes.length} (expected 64)`);\n    }\n    const secretKey = new _SecretKey();\n    secretKey.key = Scalar.FromBytes(Scalar.DivideScalarBytesByCofactor(bytes.slice(0, 32)));\n    secretKey.nonce = bytes.slice(32, 64);\n    return secretKey;\n  }\n  static FromScalarAndNonce(scalar, nonce) {\n    if (nonce.length !== 32) {\n      throw new Error(`Invalid nonce length: ${nonce.length} (expected 32)`);\n    }\n    const secretKey = new _SecretKey();\n    secretKey.key = scalar;\n    secretKey.nonce = nonce;\n    return secretKey;\n  }\n  static FromMiniSecret(miniSecret) {\n    if (miniSecret.length !== 32) {\n      throw new Error(`Invalid mini secret length: ${miniSecret.length} (expected 32)`);\n    }\n    const r = sha512(miniSecret);\n    const key = r.slice(0, 32);\n    key[0] &= 248;\n    key[31] &= 63;\n    key[31] |= 64;\n    const scalar = Scalar.FromBits(Scalar.DivideScalarBytesByCofactor(key));\n    const nonce = r.slice(32, 64);\n    const secretKey = new _SecretKey();\n    secretKey.key = scalar;\n    secretKey.nonce = nonce;\n    return secretKey;\n  }\n  ToBytes() {\n    const bytes = new Uint8Array(64);\n    const key = this.key.bytes.slice();\n    Scalar.MultiplyScalarBytesByCofactor(key);\n    bytes.set(key, 0);\n    bytes.set(this.nonce.slice(), 32);\n    return bytes;\n  }\n  ToPublicKey() {\n    const publicKey = new PublicKey();\n    const point = new RistrettoBasepointTable().Mul(this.key).Compress();\n    publicKey.key = point.ToBytes();\n    return publicKey;\n  }\n  sign(message, publicKey, rng = new RandomGenerator()) {\n    const signingContext = new SigningContext085(textEncoder3.encode(\"substrate\"));\n    const st = new SigningTranscript(signingContext);\n    signingContext.Bytes(message);\n    st.SetProtocolName(textEncoder3.encode(\"Schnorr-sig\"));\n    st.CommitPointBytes(textEncoder3.encode(\"sign:pk\"), publicKey.ToBytes());\n    const r = st.WitnessScalarLabel(textEncoder3.encode(\"signing\"), this.nonce, rng);\n    const sc = new Scalar();\n    sc.bytes = r;\n    const tbl = new RistrettoBasepointTable();\n    const R2 = tbl.Mul(sc).Compress();\n    st.CommitPoint(textEncoder3.encode(\"sign:R\"), R2);\n    const k = st.ChallengeScalar(textEncoder3.encode(\"sign:c\"));\n    const scalar = ScalarAdd(ScalarMul(ScalarBytesToBigintForm(k), ScalarBytesToBigintForm(this.key.ToBytes())), ScalarBytesToBigintForm(r));\n    const sig = Signature.FromCompressedRistrettoAndScalar(R2, Scalar.FromBytes(ScalarBigintToBytesForm(scalar)));\n    return sig;\n  }\n};\nvar PublicKey = class _PublicKey {\n  constructor() {\n    __publicField(this, \"key\");\n  }\n  static FromBytes(bytes) {\n    const publicKey = new _PublicKey();\n    publicKey.key = bytes;\n    return publicKey;\n  }\n  ToBytes() {\n    return this.key.slice();\n  }\n  ToRistrettoPoint() {\n    return RistrettoPoint.FromCompressedPointBytes(this.key);\n  }\n  verify(message, signatureBytes) {\n    const signingTranscript = new SigningContext085(textEncoder3.encode(\"substrate\")).BytesClone(message);\n    const signature = Signature.FromBytes(signatureBytes);\n    signingTranscript.AppendMessage(textEncoder3.encode(\"proto-name\"), textEncoder3.encode(\"Schnorr-sig\"));\n    signingTranscript.AppendMessage(textEncoder3.encode(\"sign:pk\"), this.key);\n    signingTranscript.AppendMessage(textEncoder3.encode(\"sign:R\"), signature.R.ToBytes());\n    const k = Scalar.FromBytes(Scalar.FromBytesModOrderWide(signingTranscript.ChallengeBytes(textEncoder3.encode(\"sign:c\"), 64)));\n    const A = this.ToRistrettoPoint();\n    const negA = A.Negate();\n    const R2 = RistrettoPoint.vartimeDoubleScalarMulBasepoint(k, negA.Ep, signature.S);\n    const compressed = new RistrettoPoint(R2).Compress();\n    return isUint8ArrayEqual(compressed.ToBytes(), signature.R.ToBytes());\n  }\n};\nvar RandomGenerator = class {\n  GetRandomArrayU8_32() {\n    return randomBytes(32);\n  }\n  GetHardcoded() {\n    return Uint8Array.from([77, 196, 92, 65, 167, 196, 215, 23, 222, 26, 136, 164, 123, 67, 115, 78, 178, 96, 208, 59, 8, 157, 203, 111, 157, 87, 69, 105, 155, 61, 111, 153]);\n  }\n};\nvar Signature = class _Signature {\n  constructor() {\n    __publicField(this, \"R\");\n    __publicField(this, \"S\");\n  }\n  static FromBytes(bytes) {\n    const signature = new _Signature();\n    if (bytes.length !== 64) {\n      throw new Error(\"Invalid signature length\");\n    }\n    const lower = bytes.slice(0, 32);\n    const upper = bytes.slice(32, 64);\n    if ((upper[31] & 128) === 0) {\n      throw new Error(\"Invalid signature\");\n    }\n    upper[31] &= 127;\n    signature.R = CompressedRistretto.FromBytes(lower);\n    signature.S = Scalar.FromBytes(upper);\n    return signature;\n  }\n  static FromCompressedRistrettoAndScalar(R2, S) {\n    const signature = new _Signature();\n    signature.R = R2;\n    signature.S = S;\n    return signature;\n  }\n  ToBytes() {\n    const compressedRistrettoBytes = this.R.ToBytes();\n    const scalarBytes = this.S.ToBytes();\n    const mergedArray = new Uint8Array(compressedRistrettoBytes.length + scalarBytes.length);\n    mergedArray.set(compressedRistrettoBytes);\n    mergedArray.set(scalarBytes, compressedRistrettoBytes.length);\n    mergedArray[63] |= 128;\n    return mergedArray;\n  }\n};\nvar SigningTranscript = class {\n  constructor(context) {\n    __publicField(this, \"context\");\n    this.context = context;\n  }\n  SetProtocolName(label) {\n    this.CommitBytesB(this.context.GetTranscript(), textEncoder3.encode(\"proto-name\"), label);\n  }\n  CommitPoint(label, compressed) {\n    this.CommitBytesB(this.context.GetTranscript(), label, compressed.ToBytes());\n  }\n  CommitPointBytes(label, bytes) {\n    this.CommitBytesB(this.context.GetTranscript(), label, bytes);\n  }\n  WitnessScalarLabel(label, bytes, rng) {\n    return this.WitnessScalarFR(this.context.GetTranscript(), label, bytes, rng);\n  }\n  WitnessScalar(bytes, rng) {\n    return this.WitnessScalarSR(this.context.GetTranscript(), bytes, rng);\n  }\n  ChallengeScalar(label) {\n    const data = this.ChallengeBytes(label);\n    return Scalar.FromBytesModOrderWide(data);\n  }\n  ChallengeBytes(label) {\n    return this.ChallengeBytesTL(this.context.GetTranscript(), label);\n  }\n  ChallengeBytesTL(ts, label) {\n    return ts.ChallengeBytes(label, 64);\n  }\n  CommitBytesB(ts, label, bytes) {\n    ts.AppendMessage(label, bytes);\n  }\n  CommitBytesS(ts, label, bytes) {\n    ts.AppendMessage(textEncoder3.encode(label), bytes);\n  }\n  CommitPointF(ts, label, compressedRistretto) {\n    this.CommitBytesB(ts, label, compressedRistretto);\n  }\n  WitnessScalarSR(ts, nonce, rng) {\n    const t = ts.WitnessBytes(new Uint8Array(0), nonce, rng);\n    t.MetaAd(Uint8Array.from([64]), false);\n    const dst = t.Prf(64, false);\n    return Scalar.FromBytesModOrderWide(dst);\n  }\n  WitnessScalarFR(ts, label, nonce, rng) {\n    const t = ts.WitnessBytes(label, nonce, rng);\n    t.MetaAd(getBytesU32(64), false);\n    const dst = t.Prf(64, false);\n    return Scalar.FromBytesModOrderWide(dst);\n  }\n};\nvar SigningContext085 = class {\n  constructor(context) {\n    __publicField(this, \"ts\");\n    this.ts = new Transcript();\n    this.ts.Init(\"SigningContext\");\n    this.ts.AppendMessage(new Uint8Array(), context);\n  }\n  Bytes(data) {\n    this.ts.AppendMessage(textEncoder3.encode(\"sign-bytes\"), data);\n  }\n  BytesClone(data) {\n    const clone = this.ts.Clone();\n    clone.AppendMessage(textEncoder3.encode(\"sign-bytes\"), data);\n    return clone;\n  }\n  GetTranscript() {\n    return this.ts;\n  }\n};\n\n// translated/mnemonic/bytes.ts\nvar toTwos = (value, width) => {\n  return value >= 0 ? value : (1n << BigInt(width)) + value;\n};\nvar DEFAULT_OPTS = {\n  bitLength: -1,\n  isLe: true,\n  isNegative: false\n};\nvar bigIntToUint8Array = (value, options = DEFAULT_OPTS) => {\n  options = {\n    ...DEFAULT_OPTS,\n    ...options\n  };\n  const {\n    bitLength,\n    isLe,\n    isNegative\n  } = options;\n  const byteLength = Math.ceil(bitLength === -1 ? (value || 0n).toString(2).length / 8 : (bitLength || 0) / 8\n  // if bitLength is not -1, take the bitLength\n  );\n  if (!value) {\n    return new Uint8Array(bitLength === -1 ? 1 : byteLength);\n  }\n  const bn = isNegative ? toTwos(value, byteLength * 8) : value;\n  const arr = (bn.toString(16).padStart(byteLength * 2, \"0\").match(/.{2}/g) || []).map(x => parseInt(x, 16));\n  return new Uint8Array(isLe ? arr.reverse() : arr);\n};\nvar REGEX_HEX_PREFIXED = /^0x[\\da-fA-F]+$/;\nfunction isHex(value, bitLength = -1, ignoreLength) {\n  return typeof value === \"string\" && (value === \"0x\" || REGEX_HEX_PREFIXED.test(value)) && (bitLength === -1 ? ignoreLength || value.length % 2 === 0 : value.length === 2 + Math.ceil(bitLength / 4));\n}\nvar uInt8ArrayToHex = bytes => {\n  return !bytes ? \"0x\" : bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, \"0\"), \"0x\");\n};\nvar hexStringToUint8Array = (str, bitLength = -1) => {\n  if (!str) {\n    return new Uint8Array();\n  }\n  if (!isHex(str)) {\n    throw new Error(`Invalid hex string: ${str}`);\n  }\n  if (str.startsWith(\"0x\")) {\n    str = str.slice(2);\n  }\n  if (bitLength !== -1) {\n    str = bitLength / 4 < str.length ? str.slice(0, bitLength / 4) : str.padStart(bitLength / 4, \"0\");\n  }\n  if (str.length % 2 !== 0) {\n    str = str + \"0\";\n  }\n  const pairs = str.replace(/^0x/, \"\").match(/.{1,2}/g);\n  if (!pairs) {\n    return new Uint8Array();\n  }\n  const bytes = pairs.map(b2 => parseInt(b2, 16));\n  return new Uint8Array(bytes);\n};\nfunction u8aConcatStrict(u8as, length = 0) {\n  let offset = 0;\n  if (!length) {\n    for (let i = 0; i < u8as.length; i++) {\n      length += u8as[i].length;\n    }\n  }\n  const result = new Uint8Array(length);\n  for (let i = 0; i < u8as.length; i++) {\n    result.set(u8as[i], offset);\n    offset += u8as[i].length;\n  }\n  return result;\n}\nvar maxU8 = 0b111111n;\nvar maxU16 = 0b11111111111111n;\nvar maxU32 = 1023;\nvar bl16 = {\n  bitLength: 16\n};\nvar bl32 = {\n  bitLength: 32\n};\nvar compactToU8a = value => {\n  const bn = BigInt(value);\n  if (bn <= maxU8) {\n    return new Uint8Array([Number(bn << 2n)]);\n  } else if (bn <= maxU16) {\n    return bigIntToUint8Array((bn << 2n) + 1n, bl16);\n  } else if (bn <= maxU32) {\n    return bigIntToUint8Array((bn << 2n) + 2n, bl32);\n  }\n  const u8a = bigIntToUint8Array(bn);\n  let length = u8a.length;\n  while (u8a[length - 1] === 0) {\n    length--;\n  }\n  if (length < 4) {\n    throw new Error(\"Invalid length, previous checks match anything less than 2^30\");\n  }\n  return u8aConcatStrict([new Uint8Array([(length - 4 << 2) + 3]), u8a.subarray(0, length)]);\n};\nfunction compactAddLength(input) {\n  return u8aConcatStrict([compactToU8a(input.length), input]);\n}\n\n// translated/mnemonic/uri.ts\nimport { blake2b } from \"@noble/hashes/blake2b\";\n\n// translated/mnemonic/mnemonic.ts\nimport { sha256 } from \"@noble/hashes/sha256\";\nimport { sha512 as sha5122 } from \"@noble/hashes/sha512\";\nimport { pbkdf2, pbkdf2Async } from \"@noble/hashes/pbkdf2\";\nimport { randomBytes as randomBytes2 } from \"@noble/hashes/utils\";\nvar INVALID_MNEMONIC = \"Invalid mnemonicToMiniSecretAsync\";\nvar INVALID_ENTROPY = \"Invalid entropy\";\nvar INVALID_CHECKSUM = \"Invalid mnemonicToMiniSecretAsync checksum\";\nvar DEFAULT_WORDLIST = \"abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo\";\nvar WORDS_MAP = DEFAULT_WORDLIST.split(\"|\").reduce((acc, elem, index) => {\n  acc[elem] = index;\n  return acc;\n}, {});\nvar sha256FirstNBits = entropy => sha256(entropy)[0].toString(2).padStart(8, \"0\").slice(0, entropy.length / 4);\nvar mnemonicToEntropy = mnemonic => {\n  const words = mnemonic.normalize(\"NFKD\").split(\" \").filter(word => !!word);\n  if (words.length % 3 !== 0 || words.length < 12 || words.length > 24) {\n    throw new Error(INVALID_MNEMONIC);\n  }\n  const bits = words.map(word => {\n    if (!(word in WORDS_MAP)) {\n      throw new Error(INVALID_MNEMONIC);\n    }\n    const index = WORDS_MAP[word];\n    return index.toString(2).padStart(11, \"0\");\n  }).join(\"\");\n  const dividerIndex = bits.length - words.length / 3;\n  const entropyBits = bits.slice(0, dividerIndex);\n  const checksumBits = bits.slice(dividerIndex);\n  const matched = entropyBits.match(/(.{1,8})/g);\n  const entropyBytes = matched?.map(bin => parseInt(bin, 2));\n  if (!entropyBytes || entropyBytes.length % 4 !== 0 || entropyBytes.length < 16 || entropyBytes.length > 32) {\n    throw new Error(INVALID_ENTROPY);\n  }\n  const entropy = Uint8Array.from(entropyBytes);\n  if (sha256FirstNBits(entropy) !== checksumBits) {\n    throw new Error(INVALID_CHECKSUM);\n  }\n  return entropy;\n};\nfunction entropyToMnemonic(entropy) {\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error(INVALID_ENTROPY);\n  }\n  const entropyInBinaryForm = Array.from(entropy).map(byte => byte.toString(2).padStart(8, \"0\")).join(\"\");\n  const entropyWithChecksum = entropyInBinaryForm + sha256FirstNBits(entropy);\n  const splittedBy11BinaryDigits = entropyWithChecksum.match(/(.{1,11})/g);\n  const wordNumbers = splittedBy11BinaryDigits?.map(binary => parseInt(binary, 2));\n  if (!wordNumbers || wordNumbers.length < 12) {\n    throw new Error(\"Unable to map entropy to mnemonic\");\n  }\n  const WORDLIST = DEFAULT_WORDLIST.split(\"|\");\n  const words = wordNumbers.map(wordNumber => WORDLIST[wordNumber]);\n  return words.join(\" \");\n}\nvar generateMnemonic = (strengthInBits = 128) => {\n  return entropyToMnemonic(randomBytes2(strengthInBits / 8)).toString().trim();\n};\nvar validateMnemonic = mnemonic => {\n  try {\n    mnemonicToEntropy(mnemonic);\n  } catch (e) {\n    return {\n      result: false,\n      error: e\n    };\n  }\n  return {\n    result: true,\n    error: null\n  };\n};\nvar mnemonicToEntropyAndSalt = (mnemonic, password = \"\") => {\n  const validationResult = validateMnemonic(mnemonic);\n  if (!validationResult.result) {\n    throw new Error(`Invalid bip39 mnemonic specified: ${validationResult.error.toString()}`);\n  }\n  const entropy = mnemonicToEntropy(mnemonic);\n  const salt = new TextEncoder().encode(`mnemonic${password}`);\n  return {\n    entropy,\n    salt\n  };\n};\nvar mnemonicToMiniSecretAsync = async (mnemonic, password = \"\") => {\n  const {\n    entropy,\n    salt\n  } = mnemonicToEntropyAndSalt(mnemonic, password);\n  const result = await pbkdf2Async(sha5122, entropy, salt, {\n    c: 2048,\n    dkLen: 64\n  });\n  return result.slice(0, 32);\n};\nvar mnemonicToMiniSecret = (mnemonic, password = \"\") => {\n  const {\n    entropy,\n    salt\n  } = mnemonicToEntropyAndSalt(mnemonic, password);\n  const result = pbkdf2(sha5122, entropy, salt, {\n    c: 2048,\n    dkLen: 64\n  });\n  return result.slice(0, 32);\n};\n\n// translated/templateLiteralFunctions.ts\nvar b = (tmpl, ...values) => {\n  return new TextEncoder().encode(String.raw(tmpl, ...values));\n};\n\n// translated/merlin/strobe128.ts\nimport { keccakP as keccakP2 } from \"@noble/hashes/sha3\";\nvar keccakF16002 = state => {\n  keccakP2(new Uint32Array(state.buffer, state.byteOffset, Math.floor(state.byteLength / 4)), 24);\n};\nvar STROBE_R = 166;\nvar FLAG_I = 1;\nvar FLAG_A = 1 << 1;\nvar FLAG_C = 1 << 2;\nvar FLAG_T = 1 << 3;\nvar FLAG_M = 1 << 4;\nvar FLAG_K = 1 << 5;\nvar Strobe128 = class _Strobe128 {\n  constructor(protocol_label) {\n    __publicField(this, \"state\");\n    __publicField(this, \"pos\");\n    __publicField(this, \"pos_begin\");\n    __publicField(this, \"cur_flags\");\n    const initial_state = new Uint8Array(200);\n    initial_state[0] = 1;\n    initial_state[1] = STROBE_R + 2;\n    initial_state[2] = 1;\n    initial_state[3] = 0;\n    initial_state[4] = 1;\n    initial_state[5] = 96;\n    initial_state.set(b`STROBEv1.0.2`, 6);\n    keccakF16002(initial_state);\n    this.state = initial_state;\n    this.pos = 0;\n    this.pos_begin = 0;\n    this.cur_flags = 0;\n    this.meta_ad(protocol_label, false);\n  }\n  /// /////////////////////////////////////\n  // public methods\n  /// /////////////////////////////////////\n  meta_ad(data, more) {\n    this.begin_op(FLAG_M | FLAG_A, more);\n    this.absorb(data);\n  }\n  ad(data, more) {\n    this.begin_op(FLAG_A, more);\n    this.absorb(data);\n  }\n  prf(data, more) {\n    this.begin_op(FLAG_I | FLAG_A | FLAG_C, more);\n    this.squeeze(data);\n  }\n  key(data, more) {\n    this.begin_op(FLAG_A | FLAG_C, more);\n    this.overwrite(data);\n  }\n  clone() {\n    const clone = new _Strobe128(new Uint8Array(0));\n    clone.state.set(this.state);\n    clone.pos = this.pos;\n    clone.pos_begin = this.pos_begin;\n    clone.cur_flags = this.cur_flags;\n    return clone;\n  }\n  cloneState() {\n    return {\n      state: this.state.slice(),\n      pos: this.pos,\n      pos_begin: this.pos_begin,\n      cur_flags: this.cur_flags\n    };\n  }\n  /// /////////////////////////////////////\n  // private methods\n  /// /////////////////////////////////////\n  run_f() {\n    this.state[this.pos] ^= this.pos_begin;\n    this.state[this.pos + 1] ^= 4;\n    this.state[STROBE_R + 1] ^= 128;\n    keccakF16002(this.state);\n    this.pos = 0;\n    this.pos_begin = 0;\n  }\n  absorb(data) {\n    for (let i = 0; i < data.length; i++) {\n      this.state[this.pos] ^= data[i];\n      this.pos++;\n      if (this.pos === STROBE_R) {\n        this.run_f();\n      }\n    }\n  }\n  overwrite(data) {\n    for (let i = 0; i < data.length; i++) {\n      this.state[this.pos] = data[i];\n      this.pos++;\n      if (this.pos === STROBE_R) {\n        this.run_f();\n      }\n    }\n  }\n  squeeze(data) {\n    for (let i = 0; i < data.length; i++) {\n      data[i] = this.state[this.pos];\n      this.state[this.pos] = 0;\n      this.pos++;\n      if (this.pos === STROBE_R) {\n        this.run_f();\n      }\n    }\n  }\n  begin_op(flags, more) {\n    if (more) {\n      if (this.cur_flags !== flags) {\n        throw new Error(`You tried to continue op ${this.cur_flags.toString(2)} but changed flags to ${flags.toString(2)}`);\n      }\n      return;\n    }\n    if ((flags & FLAG_T) !== 0) {\n      throw new Error(\"You used the T flag, which this implementation doesn't support\");\n    }\n    const old_begin = this.pos_begin;\n    this.pos_begin = this.pos + 1;\n    this.cur_flags = flags;\n    this.absorb(new Uint8Array([old_begin, flags]));\n    const force_f = (flags & (FLAG_C | FLAG_K)) !== 0;\n    if (force_f && this.pos !== 0) {\n      this.run_f();\n    }\n  }\n};\n\n// translated/merlin/constants.ts\nvar MERLIN_PROTOCOL_LABEL = b`Merlin v1.0`;\n\n// translated/merlin/transcript.ts\nimport { randomBytes as randomBytes3 } from \"@noble/hashes/utils\";\nvar encode_u64 = x => {\n  const buf = new Uint8Array(8);\n  buf[0] = Number(x & 255n);\n  buf[1] = Number(x >> 8n & 255n);\n  buf[2] = Number(x >> 16n & 255n);\n  buf[3] = Number(x >> 24n & 255n);\n  buf[4] = Number(x >> 32n & 255n);\n  buf[5] = Number(x >> 40n & 255n);\n  buf[6] = Number(x >> 48n & 255n);\n  buf[7] = Number(x >> 56n & 255n);\n  return buf;\n};\nvar encode_usize_as_u32 = x => {\n  if (x > 4294967295n) {\n    throw new Error(\"encode_usize_as_u32: x > 4294967295n\");\n  }\n  const buf = new Uint8Array(4);\n  buf[0] = x & 255;\n  buf[1] = x >> 8 & 255;\n  buf[2] = x >> 16 & 255;\n  buf[3] = x >> 24 & 255;\n  return buf;\n};\nvar Transcript2 = class {\n  constructor(label) {\n    __publicField(this, \"strobe\");\n    this.strobe = new Strobe128(MERLIN_PROTOCOL_LABEL);\n    this.append_message(b`dom-sep`, label);\n  }\n  cloneStrobe() {\n    return this.strobe.clone();\n  }\n  append_message(label, message) {\n    const data_len = encode_usize_as_u32(message.length);\n    this.strobe.meta_ad(label, false);\n    this.strobe.meta_ad(data_len, true);\n    this.strobe.ad(message, false);\n  }\n  append_u64(label, x) {\n    this.append_message(label, encode_u64(x));\n  }\n  challenge_bytes(label, dest) {\n    const data_len = encode_usize_as_u32(dest.length);\n    this.strobe.meta_ad(label, false);\n    this.strobe.meta_ad(data_len, true);\n    this.strobe.prf(dest, false);\n  }\n  build_rng() {\n    return new TranscriptRngBuilder2(this.strobe.clone());\n  }\n  fill_bytes(dest) {\n    const data_len = encode_usize_as_u32(dest.length);\n    this.strobe.meta_ad(data_len, true);\n    this.strobe.prf(dest, false);\n  }\n  witness_bytes_rng(label, dest, nonce_seeds) {\n    let br = this.build_rng();\n    for (const ns of nonce_seeds) {\n      br = br.rekey_with_witness_bytes(label, ns);\n    }\n    const r = br.finalize();\n    r.fill_bytes(dest);\n  }\n  witness_bytes(label, dest, nonce_seeds) {\n    this.witness_bytes_rng(label, dest, nonce_seeds);\n  }\n  witness_scalar(label, nonce_seeds) {\n    const scalar_bytes = new Uint8Array(64);\n    this.witness_bytes(label, scalar_bytes, nonce_seeds);\n  }\n};\nvar TranscriptRngBuilder2 = class {\n  constructor(label) {\n    __publicField(this, \"strobe\");\n    if (label instanceof Uint8Array) {\n      this.strobe = new Strobe128(label);\n    } else if (label instanceof Strobe128) {\n      this.strobe = label;\n    } else {\n      throw new Error(\"TranscriptRngBuilder constructor: label is not Uint8Array or Strobe128\");\n    }\n  }\n  cloneStrobe() {\n    return this.strobe.clone();\n  }\n  rekey_with_witness_bytes(label, witness) {\n    const witness_len = encode_usize_as_u32(witness.length);\n    this.strobe.meta_ad(label, false);\n    this.strobe.meta_ad(witness_len, true);\n    this.strobe.key(witness, false);\n    return this;\n  }\n  finalize(generateRandomBytes32) {\n    const bytes = generateRandomBytes32 ? generateRandomBytes32() : randomBytes3(32);\n    this.strobe.meta_ad(b`rng`, false);\n    this.strobe.key(bytes, false);\n    return new TranscriptRng(this.strobe);\n  }\n};\nvar TranscriptRng = class {\n  constructor(strobe) {\n    __publicField(this, \"strobe\");\n    this.strobe = strobe;\n  }\n  cloneStrobe() {\n    return this.strobe.clone();\n  }\n  rekey_with_witness_bytes(label, witness) {\n    const witness_len = encode_usize_as_u32(witness.length);\n    this.strobe.meta_ad(label, false);\n    this.strobe.meta_ad(witness_len, true);\n    this.strobe.key(witness, false);\n  }\n  rekey_with_witness_u64(label, witness) {\n    this.rekey_with_witness_bytes(label, encode_u64(witness));\n  }\n  fill_bytes(dest) {\n    const data_len = encode_usize_as_u32(dest.length);\n    this.strobe.meta_ad(data_len, false);\n    this.strobe.prf(dest, false);\n  }\n};\n\n// translated/mnemonic/uri.ts\nvar DEFAULT_MNEMONIC = \"bottom drive obey lake curtain smoke basket hold race lonely fit walk\";\nvar REGEX_DIGITS_ONLY = /^\\d+$/;\nvar parseUri = uri => {\n  const derivations = [];\n  const [beforePassword, password = \"\"] = uri.split(\"///\");\n  const hardSeparatedParts = beforePassword.split(\"//\");\n  let mnemonic = hardSeparatedParts.shift() || DEFAULT_MNEMONIC;\n  const mnemonicParts = mnemonic.split(\"/\");\n  mnemonic = mnemonicParts.shift() || \"\";\n  if (!mnemonic) {\n    throw new Error(`Invalid mnemonic: ${uri}`);\n  }\n  if (mnemonicParts.length) {\n    derivations.push(...mnemonicParts.map(value => ({\n      value,\n      cc: getChainCode(value)\n    })));\n  }\n  for (const part of hardSeparatedParts) {\n    const softSeparatedParts = part.split(\"/\");\n    const hard = softSeparatedParts.shift();\n    if (!hard) throw new Error(\"Invalid hard derivation\");\n    derivations.push({\n      value: hard,\n      hard: true,\n      cc: getChainCode(hard)\n    });\n    derivations.push(...softSeparatedParts.map(value => ({\n      value,\n      cc: getChainCode(value)\n    })));\n  }\n  return {\n    mnemonic,\n    password,\n    derivations\n  };\n};\nvar textEncoder4 = new TextEncoder();\nvar getChainCode = str => {\n  const value = REGEX_DIGITS_ONLY.test(str) ? BigInt(str) : str;\n  let u8a;\n  if (typeof value === \"bigint\") {\n    u8a = bigIntToUint8Array(value, {\n      bitLength: 256,\n      isLe: true\n    });\n  } else {\n    u8a = isHex(value) ? hexStringToUint8Array(value) : compactAddLength(textEncoder4.encode(value));\n  }\n  const chainCode = new Uint8Array(32);\n  chainCode.set(u8a.length > 32 ? blake2b(u8a, {\n    dkLen: 32\n  }) : u8a, 0);\n  return chainCode;\n};\nvar deriveHard = (keypair, chainCode) => {\n  const transcript = new Transcript2(b`SchnorrRistrettoHDKD`);\n  transcript.append_message(b`sign-bytes`, new Uint8Array());\n  transcript.append_message(b`chain-code`, chainCode);\n  transcript.append_message(b`secret-key`, keypair.secretKey.key.bytes.slice());\n  const msk = new Uint8Array(32);\n  transcript.challenge_bytes(b`HDKD-hard`, msk);\n  const chaincode_2 = new Uint8Array(32);\n  transcript.challenge_bytes(b`HDKD-chaincode`, chaincode_2);\n  return Keypair.FromMiniSecret(msk);\n};\nvar deriveSoft = (keypair, chainCode) => {\n  const transcript = new Transcript2(b`SchnorrRistrettoHDKD`);\n  transcript.append_message(b`sign-bytes`, new Uint8Array());\n  transcript.append_message(b`chain-code`, chainCode);\n  transcript.append_message(b`public-key`, keypair.publicKey.key.slice());\n  const buf = new Uint8Array(64);\n  transcript.challenge_bytes(b`HDKD-scalar`, buf);\n  const scalar = Scalar.FromBytesModOrderWide(buf);\n  const chaincode_2 = new Uint8Array(32);\n  transcript.challenge_bytes(b`HDKD-chaincode`, chaincode_2);\n  const nonce = new Uint8Array(32);\n  transcript.witness_bytes(b`HDKD-nonce`, nonce, [keypair.secretKey.nonce.slice(), keypair.secretKey.ToBytes().slice()]);\n  const derivedSecretKeyKey = Scalar.FromBytes(ScalarBigintToBytesForm(ScalarAdd(ScalarBytesToBigintForm(keypair.secretKey.key.bytes.slice()), ScalarBytesToBigintForm(scalar))));\n  const derivedSecretKey = SecretKey.FromScalarAndNonce(derivedSecretKeyKey, nonce);\n  const publicKey = derivedSecretKey.ToPublicKey();\n  return new Keypair(publicKey, derivedSecretKey);\n};\nvar processDerivations = (keypair, derivations) => {\n  for (const {\n    hard,\n    cc\n  } of derivations) {\n    keypair = hard ? deriveHard(keypair, cc) : deriveSoft(keypair, cc);\n  }\n  return keypair;\n};\nvar parseUriAndDerive = uri => {\n  const {\n    mnemonic,\n    password,\n    derivations\n  } = parseUri(uri);\n  return processDerivations(Keypair.FromMiniSecret(mnemonicToMiniSecret(mnemonic, password)), derivations);\n};\nvar parseUriAndDeriveAsync = async uri => {\n  const {\n    mnemonic,\n    password,\n    derivations\n  } = parseUri(uri);\n  return processDerivations(Keypair.FromMiniSecret(await mnemonicToMiniSecretAsync(mnemonic, password)), derivations);\n};\n\n// src/keypair.ts\nvar Keypair = class _Keypair {\n  constructor(publicKey, secretKey) {\n    __publicField(this, \"publicKey\");\n    __publicField(this, \"secretKey\");\n    this.publicKey = publicKey;\n    this.secretKey = secretKey;\n  }\n  static FromBytes(bytes) {\n    const secretKey = SecretKey.FromBytes(bytes.slice(0, 64));\n    const publicKey = PublicKey.FromBytes(bytes.slice(64));\n    return new _Keypair(publicKey, secretKey);\n  }\n  static FromSecretKeyBytes(secretKeyBytes) {\n    if (secretKeyBytes.length !== 64) {\n      throw new Error(`Expected secret key with ${64} bytes, found ${secretKeyBytes.length}`);\n    }\n    const secretKey = SecretKey.FromBytes(secretKeyBytes);\n    const publicKey = secretKey.ToPublicKey();\n    return new _Keypair(publicKey, secretKey);\n  }\n  static FromUri(uri) {\n    return parseUriAndDerive(uri);\n  }\n  static async FromUriAsync(uri) {\n    return await parseUriAndDeriveAsync(uri);\n  }\n  static FromMiniSecret(miniSecret) {\n    const secretKey = SecretKey.FromMiniSecret(miniSecret);\n    const publicKey = secretKey.ToPublicKey();\n    return new _Keypair(publicKey, secretKey);\n  }\n  ToBytes() {\n    const bytes = new Uint8Array(96);\n    bytes.set(this.secretKey.ToBytes());\n    bytes.set(this.publicKey.key, 64);\n    return bytes;\n  }\n};\n\n// src/address.ts\nimport { blake2b as blake2b2 } from \"@noble/hashes/blake2b\";\nimport basex from \"base-x\";\nvar BASE58_ALPHABET = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar BASE64_ALPHABET = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nvar base58 = basex(BASE58_ALPHABET);\nvar base64 = basex(BASE64_ALPHABET);\nvar SS58_PREFIX = new Uint8Array([83, 83, 53, 56, 80, 82, 69]);\nvar sshash = data => {\n  return blake2b2(u8aConcatStrict([SS58_PREFIX, data]), {\n    dkLen: 64\n  });\n};\nvar encodeSubstrateAddress = (key, ss58Format = 42) => {\n  if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {\n    throw new Error(`ss58Format is not valid, received ${typeof ss58Format} \"${ss58Format}\"`);\n  }\n  const allowedDecodedLengths = [1, 2, 4, 8, 32, 33];\n  if (!allowedDecodedLengths.includes(key.length)) {\n    throw new Error(`key length is not valid, received ${key.length}, valid values are ${allowedDecodedLengths.join(\", \")}`);\n  }\n  const u8aPrefix = ss58Format < 64 ? new Uint8Array([ss58Format]) : new Uint8Array([(ss58Format & 252) >> 2 | 64, ss58Format >> 8 | (ss58Format & 3) << 6]);\n  const input = u8aConcatStrict([u8aPrefix, key]);\n  return base58.encode(u8aConcatStrict([input, sshash(input).subarray(0, [32, 33].includes(key.length) ? 2 : 1)]));\n};\nvar checkAddressChecksum = (decoded, ignoreChecksum = false) => {\n  const ss58Length = (decoded[0] & 64) !== 0 ? 2 : 1;\n  const ss58Decoded = ss58Length === 1 ? decoded[0] : (decoded[0] & 63) << 2 | decoded[1] >> 6 | (decoded[1] & 63) << 8;\n  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length);\n  const length = decoded.length - (isPublicKey ? 2 : 1);\n  let isValid = false;\n  if (!ignoreChecksum) {\n    const hash = sshash(decoded.subarray(0, length));\n    isValid = (decoded[0] & 128) === 0 && ![46, 47].includes(decoded[0]) && (isPublicKey ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1] : decoded[decoded.length - 1] === hash[0]);\n  }\n  return [isValid, length, ss58Length, ss58Decoded];\n};\nfunction decodeSubstrateAddress(address, ignoreChecksum, ss58Format = -1) {\n  let realError = null;\n  try {\n    if (isHex(address)) {\n      return hexStringToUint8Array(address);\n    }\n    const decoded = base58.decode(address);\n    const allowedEncodedLengths = [3, 4, 6, 10, 35, 36, 37, 38];\n    if (!allowedEncodedLengths.includes(decoded.length)) {\n      realError = new Error(`key length is not valid, decoded key length is ${decoded.length}, valid values are ${allowedEncodedLengths.join(\", \")}`);\n      throw realError;\n    }\n    const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded, ignoreChecksum);\n    if (!ignoreChecksum && !isValid) {\n      realError = new Error(\"Invalid decoded address checksum\");\n      throw realError;\n    }\n    if (![-1, ss58Decoded].includes(ss58Format)) {\n      realError = new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`);\n      throw realError;\n    }\n    return decoded.slice(ss58Length, endPos);\n  } catch (error) {\n    throw realError != null ? realError : new Error(`Decoding ${address}: ${error.message}`);\n  }\n}\n\n// src/index.ts\nvar textEncoder5 = new TextEncoder();\nvar anyToU8a = message => {\n  return typeof message === \"string\" ? isHex(message) ? hexStringToUint8Array(message) : textEncoder5.encode(message) : message;\n};\nvar u8aOrHexToU8a = message => {\n  if (message instanceof Uint8Array) {\n    return message;\n  } else {\n    if (isHex(message)) {\n      return hexStringToUint8Array(message);\n    } else {\n      throw new Error(\"Invalid message: should be Uint8Array or hex string\");\n    }\n  }\n};\nvar getAccountFromKeypair = keypair => {\n  return {\n    get publicKey() {\n      return keypair.publicKey.key.slice();\n    },\n    address: encodeSubstrateAddress(keypair.publicKey.key),\n    prefixedAddress(prefix = 42) {\n      return encodeSubstrateAddress(keypair.publicKey.key, prefix);\n    },\n    /**\n     * @name sign\n     * @param message [Uint8Array | string]; Hex string or UTF-8 string will be automatically converted to a byte array\n     * @returns [Uint8Array] - signature\n     */\n    sign(message) {\n      return keypair.secretKey.sign(anyToU8a(message), keypair.publicKey).ToBytes();\n    },\n    /**\n     * @name verify\n     * @param message [Uint8Array | string]; Hex string or UTF-8 string will be automatically converted to a byte array\n     * @param signature [Uint8Array]\n     * @returns [boolean] - true if the signature is valid, false otherwise\n     */\n    verify(message, signature) {\n      return keypair.publicKey.verify(anyToU8a(message), u8aOrHexToU8a(signature));\n    },\n    /**\n     * @name signer\n     * @description signer for @unique-nft/sdk\n     */\n    signer: {\n      async sign(payload) {\n        const message = hexStringToUint8Array(payload.signerPayloadHex);\n        const signatureBytes = keypair.secretKey.sign(message, keypair.publicKey).ToBytes();\n        const signature = uInt8ArrayToHex(signatureBytes);\n        return {\n          signature: `0x01${signature.substring(2)}`,\n          signatureType: \"sr25519\"\n        };\n      }\n    }\n  };\n};\nvar verifySignature = (message, signature, signerAddressOrPublicKey) => {\n  let publicKeyBytes;\n  if (signerAddressOrPublicKey instanceof Uint8Array) {\n    publicKeyBytes = signerAddressOrPublicKey;\n  } else if (typeof signerAddressOrPublicKey === \"string\") {\n    publicKeyBytes = isHex(signerAddressOrPublicKey) ? hexStringToUint8Array(signerAddressOrPublicKey) : decodeSubstrateAddress(signerAddressOrPublicKey);\n  } else {\n    throw new Error(\"Invalid signerAddressOrPublicKey: should be Uint8Array or hex string\");\n  }\n  const publicKey = PublicKey.FromBytes(publicKeyBytes);\n  return publicKey.verify(anyToU8a(message), u8aOrHexToU8a(signature));\n};\nvar dangerouslyParseUriAndGetFullKeypair = parseUriAndDerive;\nvar Sr25519Account = {\n  fromUri: uri => {\n    const keypair = Keypair.FromUri(uri);\n    return getAccountFromKeypair(keypair);\n  },\n  verifySignature,\n  other: {\n    fromMiniSecret: miniSecret => {\n      const keypair = Keypair.FromMiniSecret(u8aOrHexToU8a(miniSecret));\n      return getAccountFromKeypair(keypair);\n    },\n    fromSecretKeyBytes: secretKeyBytes => {\n      const keypair = Keypair.FromSecretKeyBytes(u8aOrHexToU8a(secretKeyBytes));\n      return getAccountFromKeypair(keypair);\n    },\n    fromKeypair: getAccountFromKeypair,\n    mnemonicToMiniSecret,\n    dangerouslyParseUriAndGetFullKeypair\n  },\n  utils: {\n    encodeSubstrateAddress,\n    decodeSubstrateAddress\n  },\n  generateMnemonic\n};\nvar Account = Sr25519Account;\nvar src_default = Sr25519Account;\nexport { Account, Sr25519Account, dangerouslyParseUriAndGetFullKeypair, src_default as default, verifySignature };","map":{"version":3,"names":["keccakP","keccakF1600","state","Uint32Array","buffer","byteOffset","Math","floor","byteLength","operationToFlagMap","textEncoder","TextEncoder","Strobe","_Strobe","constructor","__publicField","strobe_init","description","initialized","duplexRate","strobeR","f","Uint8Array","from","s","encode","first","length","set","posBegin","pos","strobe_duplex","operateBytes","operate","clone","curFlags","i0","run_f","strobe_mark","pptr","flags","data","startIndex","count","cbefore","cafter","forceF","newData","slice","i","meta","dataConst","starIndex","more","begin_op","cAfter","cBefore","processed","duplex","failures","forEach","d","oldBegin","ad","additionalData","ad_f","send_clr","cleartext","send_clr_f","recv_clr","recv_clr_f","startIdex","send_mac","outputLength","recv_mac","mac","recv_mac_f","r","ratchet","send_enc_unauthenticated","plaintext","send_enc_unauthenticated_f","textEncoder2","getBytesU32","num","TranscriptRngBuilder","strobe","RekeyWithWitnessBytes","label","witness","MetaAd","Key","Finalize","rng","bytes","GetRandomArrayU8_32","newStrobe","Clone","Transcript","_Transcript","Init","obj","MERLIN_PROTOCOL_LABEL","AppendMessage","GetStrobe","c","message","Ad","error","Prf","expectedOutput","ed","result","Error","AppendU64","ChallengeBytes","size","sz","WitnessBytes","nonceSeeds","ns","Array","WitnessBytesRngL","nonce_seeds","br","BuildRng","WitnessBytesHdkd","dest_len","dest","RandomGenerator","FillBytes","data_len","randomBytes","LFACTOR","L","BigUint64Array","R","RR","U64size","BigInt","Tuple2","a","b2","i1","AsU8bn","Number","ScalarBigintToBytesForm","scalar","ScalarBytesToBigintForm","dt","j","mask","topMask","WrappingSub","ScalarSub","difference","borrow","underflowMask","carry","ScalarAdd","sum","ScalarMul","ab","MontgomeryReduce","MulInternal","_m","x","y","_part1","p","_part2","w","limbs","l","n0","n1","n2","n3","n4","r0","r1","r2","r3","r4","z","MontgomeryMul","FromBytesWide","words","lo","hi","readUint8ArrayIntoBigIntArray","bigInts","push","Scalar","_Scalar","FromBytes","FromBits","ToBytes","FromBytesModOrderWide","tt1","ToRadix16","output","DivideScalarBytesByCofactor","res","low","MultiplyScalarBytesByCofactor","high","NonAdjacentForm","naf","fill","decoded_xU64","xU64","width","windowMask","u64_idx","bit_idx","bit_buf","window","LOW_51_BIT_MASK","uint8ArrayToBigIntLE","input","WrappedRes","pow22501","fe","t0","Square","t1","t2","Mul","t3","t4","t5","t6","Pow2k","t7","t8","t9","t10","t11","t12","t13","t14","t15","t16","t17","t18","t19","pr","powP58","e","t20","t21","FieldElement","_FieldElement","Zero","CtEq","b1","Negate","Reduce","SqrtRatioI","u","v","v3","v7","check","SQRT_M1","correct_sign_sqrt","flipped_sign_sqrt","flipped_sign_sqrt_i","r_prime","ConditionalAssign","r_is_negative","IsNegative","was_nonzero_square","ConditionalNegate","choice","nself","dti","other","k","a3_19","a4_19","c0","c1","c2","c3","c4","One","second","b1_19","b2_19","b3_19","b4_19","Add","element","Sub","Square2","square","BitXor","BitAnd","cp","q","low_51_bit_mask","Invert","ProjectivePoint","_ProjectivePoint","Double","XX","X","YY","Y","ZZ2","Z","X_plus_Y","X_plus_Y_sq","YY_plus_XX","YY_minus_XX","CompletedPoint","T","Identity","ToExtended","EdwardsPoint","EdwardsPointFromElems","ToProjective","AffineNielsPoint","_AffineNielsPoint","Y_plus_X","Y_minus_X","XY2d","FromElements","FromArray","array","FromStringInRadix36Form","param","split","map","parseInt","ProjectiveNielsPoint","_ProjectiveNielsPoint","T2d","aa","Copy","GetPoint","FromPoint","EDWARDS_D2","EDWARDS_D","_EdwardsPoint","FromElems","t","ep","Equals","FromCompressedPoint","one","ss","u1","u2","u2_sqr","nEdwardsD","I","Dx","Dy","x_neg","point","MulByPow2","AddPnp","PP","MM","TT2d","ZZ","AddAnp","Txy2d","Z2","AddEp","ToProjectiveNiels","SubAnp","PM","MP","SubPnp","ToAffineNiels","xy2d","NafLookupTable5PNP","Select","Pnp","NafLookupTable","lookupTable","affineNielsPoints","FromEdwardsPoint","points","Ai","A2","nlt","EdwardsBasepointTable","lt","sclr","P","s1","s2","s3","_LookupTable","FromEdward","FromANPArray","FromArrayOfStringsInRadix36Form","table","xmask","xabs","neg_mask","From","LookupTable","oddMultiplesAffinePointsInStringRadix36Form","ed25519BasepointLookupTablesInStringRadix36Form","AFFINE_ODD_MULTIPLES_OF_BASEPOINT","ED25519_BASEPOINT_TABLE_INNER","INVSQRT_A_MINUS_D","CompressedRistretto","_CompressedRistretto","compressedRistretto","RistrettoBasepointTable","edwardsBasepointTable","RistrettoPoint","_RistrettoPoint","Ep","compressed","FromCompressedPointBytes","vartimeDoubleScalarMulBasepoint","A","aNaf","bNaf","ind","tableA","tableB","abs","Compress","inv","i2","zInv","denInv","iX","iY","ristretto_magic","enchanted_denominator","rotate","s_is_negative","sha512","isUint8ArrayEqual","textEncoder3","SecretKey","_SecretKey","secretKey","key","nonce","FromScalarAndNonce","FromMiniSecret","miniSecret","ToPublicKey","publicKey","PublicKey","sign","signingContext","SigningContext085","st","SigningTranscript","Bytes","SetProtocolName","CommitPointBytes","WitnessScalarLabel","sc","tbl","R2","CommitPoint","ChallengeScalar","sig","Signature","FromCompressedRistrettoAndScalar","_PublicKey","ToRistrettoPoint","verify","signatureBytes","signingTranscript","BytesClone","signature","negA","S","GetHardcoded","_Signature","lower","upper","compressedRistrettoBytes","scalarBytes","mergedArray","context","CommitBytesB","GetTranscript","WitnessScalarFR","WitnessScalar","WitnessScalarSR","ChallengeBytesTL","ts","CommitBytesS","CommitPointF","dst","toTwos","value","DEFAULT_OPTS","bitLength","isLe","isNegative","bigIntToUint8Array","options","ceil","toString","bn","arr","padStart","match","reverse","REGEX_HEX_PREFIXED","isHex","ignoreLength","test","uInt8ArrayToHex","reduce","str","byte","hexStringToUint8Array","startsWith","pairs","replace","u8aConcatStrict","u8as","offset","maxU8","maxU16","maxU32","bl16","bl32","compactToU8a","u8a","subarray","compactAddLength","blake2b","sha256","sha5122","pbkdf2","pbkdf2Async","randomBytes2","INVALID_MNEMONIC","INVALID_ENTROPY","INVALID_CHECKSUM","DEFAULT_WORDLIST","WORDS_MAP","acc","elem","index","sha256FirstNBits","entropy","mnemonicToEntropy","mnemonic","normalize","filter","word","bits","join","dividerIndex","entropyBits","checksumBits","matched","entropyBytes","bin","entropyToMnemonic","entropyInBinaryForm","entropyWithChecksum","splittedBy11BinaryDigits","wordNumbers","binary","WORDLIST","wordNumber","generateMnemonic","strengthInBits","trim","validateMnemonic","mnemonicToEntropyAndSalt","password","validationResult","salt","mnemonicToMiniSecretAsync","dkLen","mnemonicToMiniSecret","b","tmpl","values","String","raw","keccakP2","keccakF16002","STROBE_R","FLAG_I","FLAG_A","FLAG_C","FLAG_T","FLAG_M","FLAG_K","Strobe128","_Strobe128","protocol_label","initial_state","pos_begin","cur_flags","meta_ad","absorb","prf","squeeze","overwrite","cloneState","old_begin","force_f","randomBytes3","encode_u64","buf","encode_usize_as_u32","Transcript2","append_message","cloneStrobe","append_u64","challenge_bytes","build_rng","TranscriptRngBuilder2","fill_bytes","witness_bytes_rng","rekey_with_witness_bytes","finalize","witness_bytes","witness_scalar","scalar_bytes","witness_len","generateRandomBytes32","TranscriptRng","rekey_with_witness_u64","DEFAULT_MNEMONIC","REGEX_DIGITS_ONLY","parseUri","uri","derivations","beforePassword","hardSeparatedParts","shift","mnemonicParts","cc","getChainCode","part","softSeparatedParts","hard","textEncoder4","chainCode","deriveHard","keypair","transcript","msk","chaincode_2","Keypair","deriveSoft","derivedSecretKeyKey","derivedSecretKey","processDerivations","parseUriAndDerive","parseUriAndDeriveAsync","_Keypair","FromSecretKeyBytes","secretKeyBytes","FromUri","FromUriAsync","blake2b2","basex","BASE58_ALPHABET","BASE64_ALPHABET","base58","base64","SS58_PREFIX","sshash","encodeSubstrateAddress","ss58Format","includes","allowedDecodedLengths","u8aPrefix","checkAddressChecksum","decoded","ignoreChecksum","ss58Length","ss58Decoded","isPublicKey","isValid","hash","decodeSubstrateAddress","address","realError","decode","allowedEncodedLengths","endPos","textEncoder5","anyToU8a","u8aOrHexToU8a","getAccountFromKeypair","prefixedAddress","prefix","signer","payload","signerPayloadHex","substring","signatureType","verifySignature","signerAddressOrPublicKey","publicKeyBytes","dangerouslyParseUriAndGetFullKeypair","Sr25519Account","fromUri","fromMiniSecret","fromSecretKeyBytes","fromKeypair","utils","Account","src_default"],"sources":["C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\external\\strobe.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\external\\merlin.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\signingContext.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\scalar.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\fieldElement.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\projectivePoint.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\completedPoint.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\affineNielsPoint.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\projectiveNielsPoint.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\edwardsPoint.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\nafLookupTable.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\edwardsBasepointTable.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\tables.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\ristretto.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\translated\\mnemonic\\bytes.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\translated\\mnemonic\\uri.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\translated\\mnemonic\\mnemonic.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\translated\\templateLiteralFunctions.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\translated\\merlin\\strobe128.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\translated\\merlin\\constants.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\translated\\merlin\\transcript.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\keypair.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\address.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\node_modules\\@unique-nft\\sr25519\\src\\index.ts"],"sourcesContent":["// import * as sha3 from '@noble/hashes/sha3'\n// import * as sha3Addons from '@noble/hashes/sha3-addons'\n// import * as keccak_f1800 from './keccak'\nimport {keccakP} from '@noble/hashes/sha3'\nconst keccakF1600 = (state: Uint8Array) => {\n  keccakP(new Uint32Array(state.buffer, state.byteOffset, Math.floor(state.byteLength / 4)), 24)\n}\n\n/// <summary>\n/// Srobe operation\n/// </summary>\nexport enum Operation {\n  /// <summary>\n  /// AD operation\n  /// </summary>\n  Ad,\n\n  /// <summary>\n  /// Key operation\n  /// </summary>\n  Key,\n\n  /// <summary>\n  /// PRF operation\n  /// </summary>\n  Prf,\n\n  /// <summary>\n  /// Send cleartext operation\n  /// </summary>\n  SendClr,\n\n  /// <summary>\n  /// Receive cleartext operation\n  /// </summary>\n  RecvClr,\n\n  /// <summary>\n  /// Send encrypted operation\n  /// </summary>\n  SendEnc,\n\n  /// <summary>\n  /// Receive encrepted operation\n  /// </summary>\n  RecvEnc,\n\n  /// <summary>\n  /// Send MAC operation\n  /// </summary>\n  SendMac,\n\n  /// <summary>\n  /// Receive MAC operation\n  /// </summary>\n  RecvMac,\n\n  /// <summary>\n  /// Ratchet (rekey) operation\n  /// </summary>\n  Ratchet,\n}\n\nexport enum Flag {\n  FlagI = 1,\n\n  FlagA = 2,\n\n  FlagC = 4,\n\n  FlagT = 8,\n\n  FlagM = 16,\n\n  FlagK = 32,\n}\n\nenum Role {\n  /// <summary>\n  /// Set if we send the first transport message\n  /// </summary>\n  Initiator = 0,\n\n  /// <summary>\n  /// Set if we receive the first transport message\n  /// </summary>\n  Responder = 1,\n\n  /// <summary>\n  /// starting value\n  /// </summary>\n  None = 2,\n}\n\n// export const operationMap = new Map<Operation, Flag>()\n\nexport const operationToFlagMap: Record<Operation, Flag> = {\n  [Operation.Ad]: Flag.FlagA,\n  [Operation.Key]: Flag.FlagA | Flag.FlagC,\n  [Operation.Prf]: Flag.FlagI | Flag.FlagA | Flag.FlagC,\n  [Operation.SendClr]: Flag.FlagA | Flag.FlagT,\n  [Operation.RecvClr]: Flag.FlagI | Flag.FlagA | Flag.FlagT,\n  [Operation.SendEnc]: Flag.FlagA | Flag.FlagC | Flag.FlagT,\n  [Operation.RecvEnc]: Flag.FlagI | Flag.FlagA | Flag.FlagC | Flag.FlagT,\n  [Operation.SendMac]: Flag.FlagC | Flag.FlagT,\n  [Operation.RecvMac]: Flag.FlagI | Flag.FlagC | Flag.FlagT,\n  [Operation.Ratchet]: Flag.FlagC,\n}\n\n// const CAPACITY_BITS = 128\n// const PAD_BYTES = 2\n// const RATE_INNER = 25 * 32 - CAPACITY_BITS / 8\n// const RATE = RATE_INNER - PAD_BYTES\n\nconst textEncoder = new TextEncoder()\n\nexport class Strobe {\n  public state: Uint8Array\n  public initialized: boolean\n  public pos: number\n  public posBegin: number\n  public strobeR: number\n  public curFlags: Flag\n  public i0: Role\n\n  /// <summary>\n  /// The size of the authentication tag used in AEAD functions\n  /// </summary>\n  private readonly MacLen = 16\n\n  strobe_init(\n    description: string,\n    // desclen: number\n  ): void {\n    // operationMap.set(Operation.Ad, Flag.FlagA)\n    // operationMap.set(Operation.Key, Flag.FlagA | Flag.FlagC)\n    // operationMap.set(Operation.Prf, Flag.FlagI | Flag.FlagA | Flag.FlagC)\n    // operationMap.set(Operation.SendClr, Flag.FlagA | Flag.FlagT)\n    // operationMap.set(Operation.RecvClr, Flag.FlagI | Flag.FlagA | Flag.FlagT)\n    // operationMap.set(Operation.SendEnc, Flag.FlagA | Flag.FlagC | Flag.FlagT)\n    // operationMap.set(\n    //   Operation.RecvEnc,\n    //   Flag.FlagI | Flag.FlagA | Flag.FlagC | Flag.FlagT\n    // )\n    // operationMap.set(Operation.SendMac, Flag.FlagC | Flag.FlagT)\n    // operationMap.set(Operation.RecvMac, Flag.FlagI | Flag.FlagC | Flag.FlagT)\n    // operationMap.set(Operation.Ratchet, Flag.FlagC)\n\n    // /// <summary>\n    // /// Operation - flag map\n    // /// </summary>\n    // enum operationMap\n    // {\n    //     { Operation.RecvMac, Flag.FlagI | Flag.FlagC | Flag.FlagT },\n    //     { Operation.Ratchet, Flag.FlagC }\n    // };\n\n    this.initialized = false\n    const duplexRate = 1600 / 8 - 128 / 4\n    this.strobeR = duplexRate - 2\n\n    const f: Uint8Array = Uint8Array.from([\n      1,\n      this.strobeR + 2,\n      1,\n      0 /* Empty NIST perso string */,\n      1,\n      12 * 8, /* 12 = strlen(\"STROBEvX.Y.Z\") */\n    ])\n\n    const s = new TextEncoder().encode('STROBEv1.0.2')\n    const first = new Uint8Array(f.length + s.length)\n\n    first.set(f)\n    first.set(s, f.length)\n\n    this.posBegin = 0\n    this.pos = 0\n    this.state = new Uint8Array(200)\n\n    this.strobe_duplex(first, 0, first.byteLength, false, false, true)\n    this.initialized = true\n    const operateBytes = textEncoder.encode(description)\n    this.operate(\n      true,\n      operationToFlagMap[Operation.Ad],\n      operateBytes,\n      0,\n      operateBytes.length,\n      0,\n      false,\n    )\n  }\n\n  clone(): Strobe {\n    const s = new Strobe()\n    s.state = Uint8Array.from(this.state)\n    s.initialized = this.initialized\n    s.pos = this.pos\n    s.posBegin = this.posBegin\n    s.strobeR = this.strobeR\n    s.curFlags = this.curFlags\n    s.i0 = this.i0\n\n    return s\n  }\n\n  /* Mark current position and state, and run F.\n   * Should be compatible with CSHAKE.\n   */\n  run_f(): void {\n    if (this.initialized) {\n      this.state[this.pos] ^= this.posBegin\n      this.state[this.pos + 1] ^= 4\n      this.state[this.strobeR + 1] ^= 128\n    }\n\n    keccakF1600(this.state)\n\n    // Keccak.KeccakF1600(ref state, 24);\n    this.posBegin = 0\n    this.pos = 0 // (posBegin = 0);\n  }\n\n  /* Place a \"mark\" in the hash, which is distinct from the effect of writing any byte\n   * into the hash.  Then write the new mode into the hash.\n   */\n  strobe_mark(pptr: Uint8Array, flags: any) {}\n\n  /* The core duplex mode */\n  strobe_duplex(\n    data: Uint8Array,\n    startIndex: number,\n    count: number,\n    cbefore: boolean,\n    cafter: boolean,\n    forceF: boolean,\n  ) {\n    // Copy data\n    const newData = data.slice(startIndex, count)\n\n    for (let i = 0; i < newData.byteLength; i++) {\n      // Process data block by block\n      if (cbefore) {\n        newData[i] ^= this.state[this.pos]\n      }\n\n      this.state[this.pos] ^= newData[i]\n      if (cafter) {\n        newData[i] = this.state[this.pos]\n      }\n\n      this.pos += 1\n      if (this.pos === this.strobeR) {\n        this.run_f()\n      }\n    }\n\n    // sometimes we the next operation to start on a new block\n    if (forceF && this.pos !== 0) {\n      this.run_f()\n    }\n\n    return newData\n  }\n\n  /// <summary>\n  /// Operate runs an operation\n  /// For operations that only require a length, provide the length via the\n  /// length argument. For other operations provide a zero length.\n  /// Result is always retrieved through the return value. For boolean results,\n  /// check that the first index is 0 for true, 1 for false.\n  /// </summary>\n  operate(\n    meta: boolean,\n    flags: Flag,\n    dataConst: Uint8Array,\n    starIndex: number,\n    count: number,\n    length: number,\n    more: boolean,\n  ): Uint8Array | null {\n    // operation is valid?\n    // if (!this.operationMap.TryGetValue(operation, out let flags))\n    // {\n    //     throw new Exception($\"Not a valid operation: [{operation}]\");\n    // }\n\n    // operation is meta?\n    if (meta) {\n      flags |= Flag.FlagM\n    }\n\n    // does the operation requires a length?\n    let data: Uint8Array\n\n    if (\n      (flags & (Flag.FlagI | Flag.FlagT)) !== (Flag.FlagI | Flag.FlagT) &&\n      (flags & (Flag.FlagI | Flag.FlagA)) !== Flag.FlagA\n    ) {\n      if (length === 0) {\n        // throw new Exception(\"A length should be set for this operation\");\n      }\n\n      data = new Uint8Array(length)\n    } else {\n      if (length !== 0) {\n        // throw new Exception(\"Output length must be zero except for PRF, SendMac and RATCHET operations\");\n      }\n\n      data = dataConst\n    }\n\n    if (more) {\n      if (flags !== this.curFlags) {\n        // throw new Exception(\"Flag should be the same when streaming operations\");\n      }\n    } else {\n      this.begin_op(flags)\n      this.curFlags = flags\n    }\n\n    // Operation\n\n    const cAfter =\n      (flags & (Flag.FlagC | Flag.FlagI | Flag.FlagT)) ===\n      (Flag.FlagC | Flag.FlagT)\n    const cBefore = (flags & Flag.FlagC) !== 0 && !cAfter\n\n    // length should be zero for prf only, already checked this before\n    // if len!==0 then just use input count\n    const processed = this.duplex(\n      data,\n      starIndex,\n      length === 0 ? count : length,\n      cBefore,\n      cAfter,\n      false,\n    )\n\n    if ((flags & (Flag.FlagI | Flag.FlagA)) === (Flag.FlagI | Flag.FlagA)) {\n      return processed\n    }\n\n    if ((flags & (Flag.FlagI | Flag.FlagT)) === Flag.FlagT) {\n      // Return data for the transport.\n      return processed\n    }\n\n    if (\n      (flags & (Flag.FlagI | Flag.FlagA | Flag.FlagT)) ===\n      (Flag.FlagI | Flag.FlagT)\n    ) {\n      // Check MAC: all output bytes must be 0\n      if (more) {\n        // throw new Exception(\"not supposed to check a MAC with the 'more' streaming option\");\n      }\n\n      let failures = 0\n      processed.forEach((d) => {\n        failures |= d\n      })\n      // foreach (let dataByte in processed) failures |= dataByte;\n\n      return Uint8Array.from([failures]) // 0 if correct, 1 if not\n    }\n\n    // Operation has no output\n    return null\n  }\n\n  // beginOp: starts an operation\n  begin_op(flags: Flag) {\n    if ((flags & Flag.FlagT) !== 0) {\n      if (this.i0 === Role.None) {\n        this.i0 = flags & Flag.FlagI\n      }\n\n      flags ^= this.i0\n    }\n\n    const oldBegin = this.posBegin\n    this.posBegin = this.pos + 1\n    const forceF = (flags & (Flag.FlagC | Flag.FlagK)) !== 0\n    // let data = new[] { oldBegin, (byte)flags };\n\n    const data: Uint8Array = new Uint8Array(2)\n    data[0] = oldBegin % 255\n    data[1] = flags\n\n    this.duplex(data, 0, data.length, false, false, forceF)\n  }\n\n  duplex(\n    data: Uint8Array,\n    startIndex: number,\n    count: number,\n    cbefore: boolean,\n    cafter: boolean,\n    forceF: boolean,\n  ): Uint8Array {\n    if (cbefore && cafter) {\n      // throw new Exception($\"either {nameof(cbefore)} or {nameof(cafter)} should be set to false\");\n    }\n\n    // Copy data\n    const newData = data.slice()\n\n    for (let i = 0; i < newData.length; i++) {\n      // Process data block by block\n      if (cbefore) {\n        newData[i] ^= this.state[this.pos]\n      }\n\n      this.state[this.pos] ^= newData[i]\n      if (cafter) {\n        newData[i] = this.state[this.pos]\n      }\n\n      this.pos += 1\n      if (this.pos === this.strobeR) {\n        this.run_f()\n      }\n    }\n\n    // sometimes we the next operation to start on a new block\n    if (forceF && this.pos !== 0) {\n      this.run_f()\n    }\n\n    return newData\n  }\n\n  /// <summary>\n  /// Authenticate Additional Data.\n  /// Should be followed by a SendMAc or RecvMac in order to truly work\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"additionalData\">\n  /// Data to authenticate\n  /// </param>\n  ad(meta: boolean, additionalData: Uint8Array) {\n    this.ad_f(meta, additionalData, 0, additionalData.length)\n  }\n\n  /// <summary>\n  /// Authenticate Additional Data.\n  /// Should be followed by a SendMAc or RecvMac in order to truly work\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"additionalData\">\n  /// Data to authenticate\n  /// </param>\n  /// <param name=\"startIndex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  ad_f(\n    meta: boolean,\n    additionalData: Uint8Array,\n    startIndex: number,\n    count: number,\n  ) {\n    this.operate(\n      meta,\n      operationToFlagMap[Operation.Ad],\n      additionalData,\n      startIndex,\n      count,\n      0,\n      false,\n    )\n  }\n\n  /// <summary>\n  /// Send data in cleartext\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"cleartext\">\n  /// Cleartext to send\n  /// </param>\n  send_clr(meta: boolean, cleartext: Uint8Array): Uint8Array | null {\n    return this.send_clr_f(meta, cleartext, 0, cleartext.length)\n  }\n\n  /// <summary>\n  /// Send data in cleartext\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"cleartext\">\n  /// Cleartext to send\n  /// </param>\n  /// <param name=\"startIndex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  send_clr_f(\n    meta: boolean,\n    cleartext: Uint8Array,\n    startIndex: number,\n    count: number,\n  ): Uint8Array | null {\n    return this.operate(\n      meta,\n      operationToFlagMap[Operation.SendClr],\n      cleartext,\n      startIndex,\n      count,\n      0,\n      false,\n    )\n  }\n\n  /// <summary>\n  /// Receive data in cleartext\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"cleartext\">\n  /// Cleartext to send\n  /// </param>\n  recv_clr(meta: boolean, cleartext: Uint8Array): Uint8Array | null {\n    return this.recv_clr_f(meta, cleartext, 0, cleartext.length)\n  }\n\n  /// <summary>\n  /// Receive data in cleartext\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"cleartext\">\n  /// Cleartext to send\n  /// </param>\n  /// <param name=\"startIdex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  recv_clr_f(\n    meta: boolean,\n    cleartext: Uint8Array,\n    startIdex: number,\n    count: number,\n  ): Uint8Array | null {\n    return this.operate(\n      meta,\n      operationToFlagMap[Operation.RecvClr],\n      cleartext,\n      startIdex,\n      count,\n      0,\n      false,\n    )\n  }\n\n  /// <summary>\n  /// Produce an authentication tag.\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"outputLength\">\n  /// Expected tag length\n  /// </param>\n  send_mac(meta: boolean, outputLength: number): Uint8Array | null {\n    return this.operate(\n      meta,\n      operationToFlagMap[Operation.SendMac],\n      new Uint8Array(0),\n      0,\n      0,\n      outputLength,\n      false,\n    )\n  }\n\n  /// <summary>\n  /// Verify a received authentication tag.\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"mac\">\n  /// Tag to verify\n  /// </param>\n  recv_mac(meta: boolean, mac: Uint8Array): boolean {\n    return this.recv_mac_f(meta, mac, 0, mac.length)\n  }\n\n  /// <summary>\n  /// Verify a received authentication tag.\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"mac\">\n  /// Tag to verify\n  /// </param>\n  /// <param name=\"startIndex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  recv_mac_f(\n    meta: boolean,\n    mac: Uint8Array,\n    startIndex: number,\n    count: number,\n  ): boolean {\n    const r = this.operate(\n      meta,\n      operationToFlagMap[Operation.RecvMac],\n      mac,\n      startIndex,\n      count,\n      0,\n      false,\n    )\n\n    if (r === null) {\n      return false\n    }\n\n    return r[0] === 0\n  }\n\n  /// <summary>\n  /// Introduce forward secrecy in a protocol.\n  /// </summary>\n  /// <param name=\"length\">\n  /// Expected length\n  /// </param>\n  ratchet(length: number) {\n    this.operate(\n      false,\n      operationToFlagMap[Operation.Ratchet],\n      new Uint8Array(0),\n      0,\n      0,\n      length,\n      false,\n    )\n  }\n\n  /// <summary>\n  /// Encrypt plaintext.\n  /// Should be followed by SendMac in order to protect its integrity\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"plaintext\">\n  /// Plaintext to be encrypted\n  /// </param>\n  send_enc_unauthenticated(\n    meta: boolean,\n    plaintext: Uint8Array,\n  ): Uint8Array | null {\n    return this.send_enc_unauthenticated_f(meta, plaintext, 0, plaintext.length)\n  }\n\n  /// <summary>\n  /// Encrypt plaintext.\n  /// Should be followed by SendMac in order to protect its integrity\n  /// </summary>\n  /// <param name=\"meta\">\n  /// Framing data.\n  /// </param>\n  /// <param name=\"plaintext\">\n  /// Plaintext to be encrypted\n  /// </param>\n  /// <param name=\"startIndex\">\n  /// Start index for reading from buffer\n  /// </param>\n  /// <param name=\"count\">\n  /// Number of bytes to read\n  /// </param>\n  send_enc_unauthenticated_f(\n    meta: boolean,\n    plaintext: Uint8Array,\n    startIndex: number,\n    count: number,\n  ) {\n    return this.operate(\n      meta,\n      operationToFlagMap[Operation.SendEnc],\n      plaintext,\n      startIndex,\n      count,\n      0,\n      false,\n    )\n  }\n}\n","import {Strobe, Operation, operationToFlagMap} from './strobe'\nimport {RandomGenerator} from '../signingContext'\n\nconst textEncoder = new TextEncoder()\n\nexport function getBytesU32(num: number): Uint8Array {\n  const r = new Uint8Array(4)\n  r[0] = num % 256\n  r[1] = num << 8 % 256\n  r[2] = num << 16 % 256\n  r[3] = num << 24 % 256\n  return r\n}\n\nclass TranscriptRngBuilder {\n  strobe: Transcript\n\n  constructor(strobe: Transcript) {\n    this.strobe = strobe\n  }\n\n  RekeyWithWitnessBytes(\n    label: Uint8Array,\n    witness: Uint8Array,\n  ): TranscriptRngBuilder {\n    this.strobe.MetaAd(label, false)\n    this.strobe.MetaAd(getBytesU32(witness.length), true)\n    this.strobe.Key(witness, false)\n\n    return this\n  }\n\n  Finalize(rng: RandomGenerator): Transcript {\n    // TranscriptRngBuilder\n    const bytes = rng.GetRandomArrayU8_32()\n\n    const newStrobe = this.strobe.Clone()\n    newStrobe.MetaAd(textEncoder.encode('rng'), false)\n    newStrobe.Key(bytes, false)\n\n    return newStrobe\n  }\n}\n\nexport class Transcript {\n  obj: Strobe\n  MERLIN_PROTOCOL_LABEL = 'Merlin v1.0'\n\n  Init(label: string) {\n    // strobe_init();\n    this.obj = new Strobe()\n    this.obj.strobe_init(this.MERLIN_PROTOCOL_LABEL)\n\n    this.AppendMessage(\n      textEncoder.encode('dom-sep'),\n      textEncoder.encode(label),\n    )\n  }\n\n  GetStrobe(): Strobe {\n    return this.obj.clone()\n  }\n\n  Clone(): Transcript {\n    const c = new Transcript()\n    c.obj = this.obj.clone()\n    return c\n  }\n\n  AppendMessage(label: Uint8Array, message: Uint8Array) {\n    this.MetaAd(label, false)\n    this.MetaAd(getBytesU32(message.length), true)\n    this.Ad(message, false)\n  }\n\n  MetaAd(data: Uint8Array, more: boolean) {\n    const error = this.obj.operate(\n      true,\n      operationToFlagMap[Operation.Ad],\n      data,\n      0,\n      data.length,\n      0,\n      more,\n    )\n    if (error !== null) {\n      // throw new ApplicationException($\"{error}\");\n    }\n  }\n\n  Ad(data: Uint8Array, more: boolean) {\n    const error = this.obj.operate(\n      false,\n      operationToFlagMap[Operation.Ad],\n      data,\n      0,\n      data.length,\n      0,\n      more,\n    )\n    if (error !== null) {\n      // throw new ApplicationException($\"{error}\");\n    }\n  }\n\n  Prf(expectedOutput: number, more: boolean): Uint8Array {\n    const ed = new Uint8Array(0)\n    const result = this.obj.operate(\n      false,\n      operationToFlagMap[Operation.Prf],\n      ed,\n      0,\n      0,\n      expectedOutput,\n      more,\n    )\n    if (result === null) {\n      throw new Error('Error in Prf: result is null')\n    }\n\n    return result\n  }\n\n  Key(data: Uint8Array, more: boolean) {\n    const error = this.obj.operate(\n      false,\n      operationToFlagMap[Operation.Key],\n      data,\n      0,\n      data.length,\n      0,\n      more,\n    )\n    if (error !== null) {\n      // throw new Exception($\"{error}\");\n    }\n  }\n\n  AppendU64(label: Uint8Array, message: Uint8Array) {\n    this.AppendMessage(label, message)\n  }\n\n  ChallengeBytes(label: Uint8Array, size: number): Uint8Array {\n    const sz = getBytesU32(size)\n    this.MetaAd(label, false)\n    this.MetaAd(sz, true)\n\n    return this.Prf(size, false)\n  }\n\n  WitnessBytes(\n    label: Uint8Array,\n    nonceSeeds: Uint8Array,\n    rng: RandomGenerator,\n  ): Transcript {\n    const ns = new Array<Uint8Array>(1)\n    ns[0] = nonceSeeds\n    return this.WitnessBytesRngL(label, ns, rng)\n  }\n\n  WitnessBytesRngL(\n    label: Uint8Array,\n    nonce_seeds: Uint8Array[],\n    rng: RandomGenerator,\n  ): Transcript {\n    let br = this.BuildRng()\n    nonce_seeds.forEach((ns) => {\n      br = br.RekeyWithWitnessBytes(label, ns)\n    })\n\n    return br.Finalize(rng)\n  }\n\n  WitnessBytesHdkd(\n    label: Uint8Array, dest_len: number, nonce_seeds: Uint8Array[],\n  ): Uint8Array {\n    const dest = new Uint8Array(dest_len)\n\n    let br = this.BuildRng()\n    for (const ns of nonce_seeds) {\n      br = br.RekeyWithWitnessBytes(label, ns)\n    }\n    const r = br.Finalize(new RandomGenerator())\n    r.FillBytes(dest)\n\n    return dest\n  }\n\n  BuildRng(): TranscriptRngBuilder {\n    return new TranscriptRngBuilder(this.Clone())\n  }\n\n  FillBytes(dest: Uint8Array) {\n    const data_len = getBytesU32(dest.length)\n    this.MetaAd(data_len, false)\n    this.Prf(dest.length, false)\n  }\n}\n","import {Transcript, getBytesU32} from './external/merlin'\nimport {randomBytes} from '@noble/hashes/utils'\nimport {\n  Scalar,\n  ScalarAdd,\n  ScalarMul,\n  ScalarBigintToBytesForm,\n  ScalarBytesToBigintForm,\n} from './scalar'\nimport {CompressedRistretto, RistrettoBasepointTable, RistrettoPoint} from './ristretto'\nimport {sha512} from '@noble/hashes/sha512'\n\ninterface ISigningContext {\n  BytesClone: (data: Uint8Array) => Transcript\n  Bytes: (data: Uint8Array) => any\n  GetTranscript: () => Transcript\n}\n\nfunction isUint8ArrayEqual(a: Uint8Array, b: Uint8Array): boolean {\n  if (a.length !== b.length) return false\n\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) return false\n  }\n\n  return true\n}\n\nconst textEncoder = new TextEncoder()\n\nexport class SecretKey {\n  nonce: Uint8Array\n  key: Scalar\n\n  static FromBytes(bytes: Uint8Array): SecretKey {\n    if (bytes.length !== 64) {\n      throw new Error(`Invalid secret key length: ${bytes.length} (expected 64)`)\n    }\n\n    const secretKey: SecretKey = new SecretKey()\n\n    secretKey.key = Scalar.FromBytes(\n      Scalar.DivideScalarBytesByCofactor(bytes.slice(0, 32)),\n    )\n\n    secretKey.nonce = bytes.slice(32, 64)\n\n    return secretKey\n  }\n\n  static FromScalarAndNonce(scalar: Scalar, nonce: Uint8Array): SecretKey {\n    if (nonce.length !== 32) {\n      throw new Error(`Invalid nonce length: ${nonce.length} (expected 32)`)\n    }\n    const secretKey: SecretKey = new SecretKey()\n\n    secretKey.key = scalar\n    secretKey.nonce = nonce\n\n    return secretKey\n  }\n\n  static FromMiniSecret(miniSecret: Uint8Array): SecretKey {\n    if (miniSecret.length !== 32) {\n      throw new Error(`Invalid mini secret length: ${miniSecret.length} (expected 32)`)\n    }\n\n    const r = sha512(miniSecret)\n\n    const key = r.slice(0, 32)\n    key[0] &= 248 // 1111_1000 0xf8\n    key[31] &= 63 // 0011_1111 0x3f\n    key[31] |= 64 // 0100_0000 0x40\n    const scalar = Scalar.FromBits(Scalar.DivideScalarBytesByCofactor(key))\n\n    const nonce = r.slice(32, 64)\n\n    const secretKey: SecretKey = new SecretKey()\n\n    secretKey.key = scalar\n    secretKey.nonce = nonce\n\n    return secretKey\n  }\n\n  ToBytes(): Uint8Array {\n    const bytes = new Uint8Array(64)\n    const key = this.key.bytes.slice()\n    Scalar.MultiplyScalarBytesByCofactor(key)\n    bytes.set(key, 0)\n    bytes.set(this.nonce.slice(), 32)\n    return bytes\n  }\n\n  ToPublicKey(): PublicKey {\n    const publicKey = new PublicKey()\n\n    const point = new RistrettoBasepointTable().Mul(this.key).Compress()\n\n    publicKey.key = point.ToBytes()\n\n    return publicKey\n  }\n\n  sign(\n    message: Uint8Array,\n    publicKey: PublicKey,\n    rng: RandomGenerator = new RandomGenerator(),\n  ): Signature {\n    const signingContext = new SigningContext085(textEncoder.encode('substrate'))\n\n    const st = new SigningTranscript(signingContext)\n\n    signingContext.Bytes(message)\n\n    st.SetProtocolName(textEncoder.encode('Schnorr-sig'))\n    st.CommitPointBytes(textEncoder.encode('sign:pk'), publicKey.ToBytes())\n\n    const r = st.WitnessScalarLabel(\n      textEncoder.encode('signing'),\n      this.nonce,\n      rng,\n    )\n    const sc = new Scalar()\n    sc.bytes = r\n\n    const tbl = new RistrettoBasepointTable()\n    const R = tbl.Mul(sc).Compress()\n\n    st.CommitPoint(textEncoder.encode('sign:R'), R)\n\n    const k = st.ChallengeScalar(textEncoder.encode('sign:c')) // context, message, A/public_key, R=rG\n    const scalar = ScalarAdd(\n      ScalarMul(\n        ScalarBytesToBigintForm(k),\n        ScalarBytesToBigintForm(this.key.ToBytes()),\n      ),\n      ScalarBytesToBigintForm(r),\n    )\n\n    const sig = Signature.FromCompressedRistrettoAndScalar(\n      R,\n      Scalar.FromBytes(ScalarBigintToBytesForm(scalar)),\n    )\n\n    return sig\n  }\n}\n\nexport class PublicKey {\n  key: Uint8Array\n\n  static FromBytes(bytes: Uint8Array): PublicKey {\n    const publicKey = new PublicKey()\n\n    publicKey.key = bytes\n\n    return publicKey\n  }\n\n  ToBytes(): Uint8Array {\n    return this.key.slice()\n  }\n\n  ToRistrettoPoint(): RistrettoPoint {\n    return RistrettoPoint.FromCompressedPointBytes(this.key)\n  }\n\n  verify(message: Uint8Array, signatureBytes: Uint8Array): boolean {\n    const signingTranscript = new SigningContext085(textEncoder.encode('substrate')).BytesClone(message)\n\n    const signature = Signature.FromBytes(signatureBytes)\n\n    // console.log(printTranscriptMax(signingTranscript))\n    // console.log(\"signature.R\", signature.R)\n    // console.log(\"signature.S\", signature.S)\n\n    signingTranscript.AppendMessage(textEncoder.encode('proto-name'), textEncoder.encode('Schnorr-sig'))\n    signingTranscript.AppendMessage(textEncoder.encode('sign:pk'), this.key)\n    signingTranscript.AppendMessage(textEncoder.encode('sign:R'), signature.R.ToBytes())\n\n    const k = Scalar.FromBytes(Scalar.FromBytesModOrderWide(\n      signingTranscript.ChallengeBytes(textEncoder.encode('sign:c'), 64),\n    ))\n\n    // printTranscriptMax(signingTranscript)\n    // console.log(\"k\", k)\n\n    const A = this.ToRistrettoPoint()\n    const negA = A.Negate()\n\n    // console.log('negA', negA.Ep)\n\n    const R = RistrettoPoint.vartimeDoubleScalarMulBasepoint(\n      k,\n      negA.Ep,\n      signature.S,\n    )\n    const compressed = new RistrettoPoint(R).Compress()\n    return isUint8ArrayEqual(compressed.ToBytes(), signature.R.ToBytes())\n  }\n}\n\nexport class RandomGenerator {\n  GetRandomArrayU8_32(): Uint8Array {\n    return randomBytes(32)\n  }\n\n  GetHardcoded(): Uint8Array {\n    return Uint8Array.from([\n      77, 196, 92, 65, 167, 196, 215, 23, 222, 26, 136, 164, 123, 67, 115, 78,\n      178, 96, 208, 59, 8, 157, 203, 111, 157, 87, 69, 105, 155, 61, 111, 153,\n    ])\n  }\n}\n\nclass Signature {\n  public R: CompressedRistretto\n  public S: Scalar\n\n  static FromBytes(bytes: Uint8Array) {\n    const signature = new Signature()\n    if (bytes.length !== 64) {\n      throw new Error('Invalid signature length')\n    }\n\n    const lower = bytes.slice(0, 32)\n    const upper = bytes.slice(32, 64)\n    if ((upper[31] & 128) === 0) {\n      throw new Error('Invalid signature')\n    }\n    upper[31] &= 127\n\n    signature.R = CompressedRistretto.FromBytes(lower)\n\n    // todo: proper check scalar and reduce it if necessary\n    signature.S = Scalar.FromBytes(upper)\n\n    return signature\n  }\n\n  static FromCompressedRistrettoAndScalar(R: CompressedRistretto, S: Scalar): Signature {\n    const signature = new Signature()\n    signature.R = R\n    signature.S = S\n    return signature\n  }\n\n  ToBytes() {\n    const compressedRistrettoBytes = this.R.ToBytes()\n    const scalarBytes = this.S.ToBytes()\n    const mergedArray = new Uint8Array(compressedRistrettoBytes.length + scalarBytes.length)\n    mergedArray.set(compressedRistrettoBytes)\n    mergedArray.set(scalarBytes, compressedRistrettoBytes.length)\n    mergedArray[63] |= 128\n    return mergedArray\n  }\n}\n\nexport class SigningTranscript {\n  context: ISigningContext\n\n  constructor(context: ISigningContext) {\n    // _operations = new SigningTranscriptOperation();\n    this.context = context\n  }\n\n  SetProtocolName(label: Uint8Array) {\n    this.CommitBytesB(\n      this.context.GetTranscript(),\n      textEncoder.encode('proto-name'),\n      label,\n    )\n  }\n\n  CommitPoint(label: Uint8Array, compressed: CompressedRistretto) {\n    this.CommitBytesB(this.context.GetTranscript(), label, compressed.ToBytes())\n  }\n\n  CommitPointBytes(label: Uint8Array, bytes: Uint8Array) {\n    this.CommitBytesB(this.context.GetTranscript(), label, bytes)\n  }\n\n  WitnessScalarLabel(\n    label: Uint8Array,\n    bytes: Uint8Array,\n    rng: RandomGenerator,\n  ): Uint8Array {\n    return this.WitnessScalarFR(this.context.GetTranscript(), label, bytes, rng)\n  }\n\n  WitnessScalar(bytes: Uint8Array, rng: RandomGenerator): Uint8Array {\n    return this.WitnessScalarSR(this.context.GetTranscript(), bytes, rng)\n  }\n\n  ChallengeScalar(label: Uint8Array): Uint8Array {\n    const data = this.ChallengeBytes(label)\n    return Scalar.FromBytesModOrderWide(data)\n  }\n\n  ChallengeBytes(label: Uint8Array): Uint8Array {\n    return this.ChallengeBytesTL(this.context.GetTranscript(), label)\n  }\n\n  ChallengeBytesTL(ts: Transcript, label: Uint8Array): Uint8Array {\n    return ts.ChallengeBytes(label, 64)\n  }\n\n  CommitBytesB(ts: Transcript, label: Uint8Array, bytes: Uint8Array) {\n    ts.AppendMessage(label, bytes)\n  }\n\n  CommitBytesS(ts: Transcript, label: string, bytes: Uint8Array) {\n    ts.AppendMessage(textEncoder.encode(label), bytes)\n  }\n\n  CommitPointF(\n    ts: Transcript,\n    label: Uint8Array,\n    compressedRistretto: Uint8Array,\n  ) {\n    this.CommitBytesB(ts, label, compressedRistretto)\n  }\n\n  WitnessScalarSR(\n    ts: Transcript,\n    nonce: Uint8Array,\n    rng: RandomGenerator,\n  ): Uint8Array {\n    const t = ts.WitnessBytes(new Uint8Array(0), nonce, rng)\n\n    // Fill bytes size = 64\n    t.MetaAd(Uint8Array.from([64]), false)\n    const dst = t.Prf(64, false)\n\n    return Scalar.FromBytesModOrderWide(dst)\n  }\n\n  WitnessScalarFR(\n    ts: Transcript,\n    label: Uint8Array,\n    nonce: Uint8Array,\n    rng: RandomGenerator,\n  ): Uint8Array {\n    const t = ts.WitnessBytes(label, nonce, rng)\n\n    // Fill bytes  size = 64\n    t.MetaAd(getBytesU32(64), false)\n    const dst = t.Prf(64, false)\n\n    return Scalar.FromBytesModOrderWide(dst)\n  }\n}\n\nexport class SigningContext085 implements ISigningContext {\n  ts: Transcript\n\n  constructor(context: Uint8Array) {\n    this.ts = new Transcript()\n    this.ts.Init('SigningContext')\n    this.ts.AppendMessage(new Uint8Array(), context)\n  }\n\n  Bytes(data: Uint8Array) {\n    this.ts.AppendMessage(textEncoder.encode('sign-bytes'), data)\n  }\n\n  BytesClone(data: Uint8Array): Transcript {\n    const clone = this.ts.Clone()\n    clone.AppendMessage(textEncoder.encode('sign-bytes'), data)\n    return clone\n  }\n\n  GetTranscript(): Transcript {\n    return this.ts\n  }\n}\n","export const LFACTOR = 0x51da312547e1b\nexport const L = BigUint64Array.from([\n  0x0002631a5cf5d3edn,\n  0x000dea2f79cd6581n,\n  0x000000000014def9n,\n  0x0000000000000000n,\n  0x0000100000000000n,\n])\nexport const R = BigUint64Array.from([\n  0x000f48bd6721e6edn,\n  0x0003bab5ac67e45an,\n  0x000fffffeb35e51bn,\n  0x000fffffffffffffn,\n  0x00000fffffffffffn,\n])\nexport const RR = BigUint64Array.from([\n  0x0009d265e952d13bn,\n  0x000d63c715bea69fn,\n  0x0005be65cb687604n,\n  0x0003dceec73d217fn,\n  0x000009411b7c309an,\n])\nexport const U64size = BigInt(2 ** 64)\n\nclass Tuple2<T = any> {\n  public i0: T\n  public i1: T\n\n  constructor(a: T, b: T) {\n    this.i0 = a\n    this.i1 = b\n  }\n}\n\nexport function AsU8(a: number) {\n  return a % 256\n}\n\nexport function AsU8bn(a: bigint): number {\n  return Number(a % 256n)\n}\n\nexport function AsU64Bn(val: any): number {\n  return Number(BigInt(val) % BigInt(U64size))\n}\n\nexport function ScalarBigintToBytesForm(scalar: BigUint64Array): Uint8Array {\n  const s = new Uint8Array(32)\n\n  s[0] = AsU8bn(scalar[0] >> 0n)\n  s[1] = AsU8bn(scalar[0] >> 8n)\n  s[2] = AsU8bn(scalar[0] >> 16n)\n  s[3] = AsU8bn(scalar[0] >> 24n)\n  s[4] = AsU8bn(scalar[0] >> 32n)\n  s[5] = AsU8bn(scalar[0] >> 40n)\n  s[6] = AsU8bn((scalar[0] >> 48n) | (scalar[1] << 4n))\n  s[7] = AsU8bn(scalar[1] >> 4n)\n  s[8] = AsU8bn(scalar[1] >> 12n)\n  s[9] = AsU8bn(scalar[1] >> 20n)\n  s[10] = AsU8bn(scalar[1] >> 28n)\n  s[11] = AsU8bn(scalar[1] >> 36n)\n  s[12] = AsU8bn(scalar[1] >> 44n)\n  s[13] = AsU8bn(scalar[2] >> 0n)\n  s[14] = AsU8bn(scalar[2] >> 8n)\n  s[15] = AsU8bn(scalar[2] >> 16n)\n  s[16] = AsU8bn(scalar[2] >> 24n)\n  s[17] = AsU8bn(scalar[2] >> 32n)\n  s[18] = AsU8bn(scalar[2] >> 40n)\n  s[19] = AsU8bn((scalar[2] >> 48n) | (scalar[3] << 4n))\n  s[20] = AsU8bn(scalar[3] >> 4n)\n  s[21] = AsU8bn(scalar[3] >> 12n)\n  s[22] = AsU8bn(scalar[3] >> 20n)\n  s[23] = AsU8bn(scalar[3] >> 28n)\n  s[24] = AsU8bn(scalar[3] >> 36n)\n  s[25] = AsU8bn(scalar[3] >> 44n)\n  s[26] = AsU8bn(scalar[4] >> 0n)\n  s[27] = AsU8bn(scalar[4] >> 8n)\n  s[28] = AsU8bn(scalar[4] >> 16n)\n  s[29] = AsU8bn(scalar[4] >> 24n)\n  s[30] = AsU8bn(scalar[4] >> 32n)\n  s[31] = AsU8bn(scalar[4] >> 40n)\n\n  return s\n}\n\nexport function FloatArrayToBytes(scalar: Float64Array): Uint8Array {\n  const s = new Uint8Array(32)\n\n  s[0] = AsU8(scalar[0] >> 0)\n  s[1] = AsU8(scalar[0] >> 8)\n  s[2] = AsU8(scalar[0] >> 16)\n  s[3] = AsU8(scalar[0] >> 24)\n  s[4] = AsU8(scalar[0] >> 32)\n  s[5] = AsU8(scalar[0] >> 40)\n  s[6] = AsU8((scalar[0] >> 48) | (scalar[1] << 4))\n  s[7] = AsU8(scalar[1] >> 4)\n  s[8] = AsU8(scalar[1] >> 12)\n  s[9] = AsU8(scalar[1] >> 20)\n  s[10] = AsU8(scalar[1] >> 28)\n  s[11] = AsU8(scalar[1] >> 36)\n  s[12] = AsU8(scalar[1] >> 44)\n  s[13] = AsU8(scalar[2] >> 0)\n  s[14] = AsU8(scalar[2] >> 8)\n  s[15] = AsU8(scalar[2] >> 16)\n  s[16] = AsU8(scalar[2] >> 24)\n  s[17] = AsU8(scalar[2] >> 32)\n  s[18] = AsU8(scalar[2] >> 40)\n  s[19] = AsU8((scalar[2] >> 48) | (scalar[3] << 4))\n  s[20] = AsU8(scalar[3] >> 4)\n  s[21] = AsU8(scalar[3] >> 12)\n  s[22] = AsU8(scalar[3] >> 20)\n  s[23] = AsU8(scalar[3] >> 28)\n  s[24] = AsU8(scalar[3] >> 36)\n  s[25] = AsU8(scalar[3] >> 44)\n  s[26] = AsU8(scalar[4] >> 0)\n  s[27] = AsU8(scalar[4] >> 8)\n  s[28] = AsU8(scalar[4] >> 16)\n  s[29] = AsU8(scalar[4] >> 24)\n  s[30] = AsU8(scalar[4] >> 32)\n  s[31] = AsU8(scalar[4] >> 40)\n\n  return s\n}\n\nexport function ScalarBytesToBigintForm(scalar: Uint8Array): BigUint64Array {\n  // let dt = new Float64Array(5);\n  const dt = new BigUint64Array(5)\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 8; j++) {\n      dt[i] |= (BigInt(scalar[i * 8 + j]) << BigInt(j * 8)) % U64size\n    }\n  }\n\n  const mask = (1n << 52n) - 1n\n  const topMask = (1n << 48n) - 1n\n  const s = new BigUint64Array(5)\n\n  s[0] = dt[0] & mask\n  s[1] = ((dt[0] >> 52n) | (dt[1] << 12n)) & mask\n  s[2] = ((dt[1] >> 40n) | (dt[2] << 24n)) & mask\n  s[3] = ((dt[2] >> 28n) | (dt[3] << 36n)) & mask\n  s[4] = (dt[3] >> 16n) & topMask\n\n  return s\n}\n\nfunction WrappingSub(a: bigint, b: bigint): bigint {\n  // convert from signed to unsigned 64 bits integer\n  const r = (a - b) % U64size\n  return r > 0 ? r : U64size + r\n}\n\nexport function ScalarSub(\n  a: BigUint64Array,\n  b: BigUint64Array,\n): BigUint64Array {\n  const difference = new BigUint64Array(5)\n  const mask: bigint = (1n << 52n) - 1n\n\n  // a - b\n  let borrow: bigint = 0n\n  for (let i = 0; i < 5; i++) {\n    borrow = WrappingSub(a[i], b[i] + (borrow >> 63n))\n    difference[i] = (borrow & mask) % U64size\n  }\n\n  // conditionally add l if the difference is negative\n  const underflowMask = WrappingSub((borrow >> 63n) ^ 1n, 1n)\n  let carry: bigint = 0n\n  for (let i = 0; i < 5; i++) {\n    carry = BigInt((carry >> 52n) + difference[i] + (L[i] & underflowMask))\n    difference[i] = carry & mask\n  }\n\n  return difference\n}\n\nexport function ScalarAdd(\n  a: BigUint64Array,\n  b: BigUint64Array,\n): BigUint64Array {\n  const sum = new BigUint64Array(5)\n  const mask: bigint = (1n << 52n) - 1n\n\n  let carry: bigint = 0n\n  for (let i = 0; i < 5; i++) {\n    carry = BigInt(a[i]) + BigInt(b[i]) + (carry >> 52n)\n    sum[i] = carry & mask\n  }\n\n  // subtract l if the sum is >= l\n  return ScalarSub(sum, L)\n}\n\nexport function ScalarMul(\n  a: BigUint64Array,\n  b: BigUint64Array,\n): BigUint64Array {\n  const ab = MontgomeryReduce(MulInternal(a, b))\n  return MontgomeryReduce(MulInternal(ab, RR))\n}\n\nexport function _m(x: bigint, y: bigint): bigint {\n  return BigInt(x) * BigInt(y)\n}\n\n// function WrappingMul (a: number, b: number): bigint {\n//   return (BigInt(a) * BigInt(b)) % U64size\n// }\n\nfunction _part1(sum: bigint): Tuple2<bigint> {\n  const p = (sum * BigInt(LFACTOR)) & ((1n << 52n) - 1n)\n\n  return new Tuple2(p, (sum + _m(p, BigInt(L[0]))) >> 52n)\n}\n\nfunction _part2(sum: bigint): Tuple2<bigint> {\n  const w = sum % U64size & ((1n << 52n) - 1n)\n  return new Tuple2(w, sum >> 52n)\n}\n\nfunction MontgomeryReduce(limbs: bigint[]) {\n  const l = L\n\n  // the first half computes the Montgomery adjustment factor n, and begins adding n*l to make limbs divisible by R\n  const n0 = _part1(limbs[0])\n  const n1 = _part1(n0.i1 + limbs[1] + _m(n0.i0, BigInt(l[1])))\n  const n2 = _part1(\n    n1.i1 + limbs[2] + _m(n0.i0, BigInt(l[2])) + _m(n1.i0, BigInt(l[1])),\n  )\n  const n3 = _part1(\n    n2.i1 + limbs[3] + _m(n1.i0, BigInt(l[2])) + _m(n2.i0, BigInt(l[1])),\n  )\n  const n4 = _part1(\n    n3.i1 +\n    limbs[4] +\n    _m(n0.i0, BigInt(l[4])) +\n    _m(n2.i0, BigInt(l[2])) +\n    _m(n3.i0, BigInt(l[1])),\n  )\n\n  // limbs is divisible by R now, so we can divide by R by simply storing the upper half as the result\n  const r0 = _part2(\n    n4.i1 +\n    limbs[5] +\n    _m(n1.i0, BigInt(l[4])) +\n    _m(n3.i0, BigInt(l[2])) +\n    _m(n4.i0, BigInt(l[1])),\n  )\n  const r1 = _part2(\n    r0.i1 + limbs[6] + _m(n2.i0, BigInt(l[4])) + _m(n4.i0, BigInt(l[2])),\n  )\n  const r2 = _part2(r1.i1 + limbs[7] + _m(n3.i0, BigInt(l[4])))\n  const r3 = _part2(r2.i1 + limbs[8] + _m(n4.i0, BigInt(l[4])))\n  const r4 = r3.i1\n\n  return ScalarSub(BigUint64Array.from([r0.i0, r1.i0, r2.i0, r3.i0, r4]), l)\n}\n\nfunction MulInternal(a: BigUint64Array, b: BigUint64Array): bigint[] {\n  const z = Array(9)\n\n  z[0] = _m(a[0], b[0])\n  z[1] = _m(a[0], b[1]) + _m(a[1], b[0])\n  z[2] = _m(a[0], b[2]) + _m(a[1], b[1]) + _m(a[2], b[0])\n  z[3] = _m(a[0], b[3]) + _m(a[1], b[2]) + _m(a[2], b[1]) + _m(a[3], b[0])\n  z[4] =\n    _m(a[0], b[4]) +\n    _m(a[1], b[3]) +\n    _m(a[2], b[2]) +\n    _m(a[3], b[1]) +\n    _m(a[4], b[0])\n  z[5] = _m(a[1], b[4]) + _m(a[2], b[3]) + _m(a[3], b[2]) + _m(a[4], b[1])\n  z[6] = _m(a[2], b[4]) + _m(a[3], b[3]) + _m(a[4], b[2])\n  z[7] = _m(a[3], b[4]) + _m(a[4], b[3])\n  z[8] = _m(a[4], b[4])\n\n  return z\n}\n\nfunction MontgomeryMul(a: BigUint64Array, b: BigUint64Array): BigUint64Array {\n  return MontgomeryReduce(MulInternal(a, b))\n}\n\n// function ToBigIntArray (a: Float64Array): BigUint64Array {\n//   const r = new BigUint64Array(a.length)\n//   for (let i = 0; i < a.length; i++) {\n//     r[i] = BigInt(a[i])\n//   }\n//\n//   return r\n// }\n\n// function ToU64Array (a: BigUint64Array): Float64Array {\n//   const r = new Float64Array(a.length)\n//   for (let i = 0; i < a.length; i++) {\n//     r[i] = Number(a[i])\n//   }\n//\n//   return r\n// }\n\nexport function FromBytesWide(data: Uint8Array): BigUint64Array {\n  const words = new BigUint64Array(8)\n\n  for (let i = 0; i < 8; i++) {\n    for (let j = 0; j < 8; j++) {\n      // const s1 = BigInt(data[i * 8 + j])\n      // const s2 = BigInt(j * 8)\n      // const s3 = s1 << s2\n      // const s4 = AsU64Bn(s3)\n      words[i] |= (BigInt(data[i * 8 + j]) << BigInt(j * 8)) % U64size\n    }\n  }\n\n  const mask = (1n << 52n) - 1n\n  let lo = new BigUint64Array(5)\n  let hi = new BigUint64Array(5)\n\n  lo[0] = words[0] & mask\n  lo[1] = ((words[0] >> 52n) | (words[1] << 12n)) & mask\n  lo[2] = ((words[1] >> 40n) | (words[2] << 24n)) & mask\n  lo[3] = ((words[2] >> 28n) | (words[3] << 36n)) & mask\n  lo[4] = ((words[3] >> 16n) | (words[4] << 48n)) & mask\n  hi[0] = (words[4] >> 4n) & mask\n  hi[1] = ((words[4] >> 56n) | (words[5] << 8n)) & mask\n  hi[2] = ((words[5] >> 44n) | (words[6] << 20n)) & mask\n  hi[3] = ((words[6] >> 32n) | (words[7] << 32n)) & mask\n  hi[4] = words[7] >> 20n\n\n  lo = MontgomeryMul(lo, R) // (lo * R) / R = lo\n  hi = MontgomeryMul(hi, RR) // (hi * R^2) / R = hi * R\n\n  return ScalarAdd(hi, lo)\n}\n\nexport function readUint8ArrayIntoBigIntArray(bytes: Uint8Array): bigint[] {\n  const bigInts: bigint[] = []\n  for (let i = 0; i < bytes.length; i += 8) {\n    let num: bigint = 0n\n    for (let j = i + 7; j >= i; j--) {\n      num = (num << 8n) | BigInt(bytes[j])\n    }\n    bigInts.push(num)\n  }\n  return bigInts\n}\n\nexport class Scalar {\n  public bytes: Uint8Array\n\n  static FromBytes(data: Uint8Array): Scalar {\n    if (data.length !== 32) {\n      throw new Error(`Invalid size of data: should be 32, got ${data.length}`)\n    }\n    const s = new Scalar()\n    s.bytes = data\n    return s\n  }\n\n  static FromBits(bytes: Uint8Array): Scalar {\n    if (bytes.length !== 32) {\n      throw new Error(`Invalid size of data: should be 32, got ${bytes.length}`)\n    }\n    const s = new Scalar()\n    s.bytes = bytes\n    s.bytes[31] &= 0b0111_1111\n    return s\n  }\n\n  ToBytes(): Uint8Array {\n    return this.bytes.slice()\n  }\n\n  static FromBytesModOrderWide(data: Uint8Array): Uint8Array {\n    const tt1 = FromBytesWide(data)\n    // todo: replace return type with Scalar\n    return ScalarBigintToBytesForm(tt1)\n  }\n\n  static ToRadix16(bytes: Uint8Array): number[] {\n    const output: number[] = []\n\n    // Step 1: change radix.\n    // Convert from radix 256 (bytes) to radix 16 (nibbles)\n    for (let i = 0; i < 32; i++) {\n      output[2 * i] = bytes[i] & 15            // bottom 4 bits\n      output[2 * i + 1] = (bytes[i] >> 4) & 15 // top 4 bits\n    }\n\n    // Step 2: recenter coefficients from [0,16) to [-8,8)\n    for (let i = 0; i < 63; i++) {\n      const carry = (output[i] + 8) >> 4  // if output[i] >= 8, carry = 1, else carry = 0\n      output[i] -= carry << 4             // if output[i] >= 8, output[i] -= 16\n      output[i + 1] += carry              // if output[i] >= 8, output[i + 1] += 1\n    }\n    // Precondition note:\n    // since self[31] <= 127 (01111111), output[63] <= 7 (0111)\n    // output[63] is not recentered\n    // It increases by carry <= 1. Thus output[63] <= 8\n\n    return output\n  }\n\n  static DivideScalarBytesByCofactor(bytes: Uint8Array): Uint8Array {\n    const res = new Uint8Array(bytes.length)\n    let low = 0\n\n    for (let i = bytes.length - 1; i >= 0; i--) {\n      const r = bytes[i] & 0b00000111 // save remainder\n      bytes[i] >>= 3 // divide by 8\n      bytes[i] += low\n      res[i] = bytes[i]\n      low = (r << 5) % 256\n    }\n\n    return res\n  }\n\n  static MultiplyScalarBytesByCofactor(bytes: Uint8Array): Uint8Array {\n    const res = new Uint8Array(bytes.length)\n    let high = 0\n\n    for (let i = 0; i < bytes.length; i++) {\n      const r = bytes[i] & 0b11100000 // carry bits\n      bytes[i] = bytes[i] << 3 // multiply by 8\n      bytes[i] += high\n      res[i] = bytes[i]\n      high = r >> 5\n    }\n\n    return res\n  }\n\n  // sbyte[]\n  NonAdjacentForm(size: number): number[] {\n    // sbyte[] naf = new sbyte[256];\n    const naf: number[] = new Array(256).fill(0)\n\n    const decoded_xU64 = readUint8ArrayIntoBigIntArray(this.ToBytes())\n    const xU64: bigint[] = [...decoded_xU64, ...new Array(5 - decoded_xU64.length).fill(0n)]\n\n    const width = 1n << BigInt(size)\n    const windowMask = width - 1n\n\n    let pos = 0\n    let carry = 0n\n    while (pos < 256) {\n      // Construct a buffer of bits of the scalar, starting at bit `pos`\n      const u64_idx = Math.floor(pos / 64)\n      const bit_idx = pos % 64\n      let bit_buf: bigint\n      if (bit_idx < 64 - size) {\n        // This window's bits are contained in a single u64\n        bit_buf = xU64[Number(u64_idx)] >> BigInt(bit_idx)\n      } else {\n        // Combine the current u64's bits with the bits from the next u64\n        bit_buf = (xU64[u64_idx] >> BigInt(bit_idx)) | (xU64[u64_idx + 1] << BigInt(64 - bit_idx))\n      }\n\n      // Add the carry into the current window\n      const window: bigint = carry + (bit_buf & windowMask)\n\n      if ((window & 1n) === 0n) {\n        // If the window value is even, preserve the carry and continue.\n        // Why is the carry preserved?\n        // If carry === 0 and window & 1 === 0, then the next carry should be 0\n        // If carry === 1 and window & 1 === 0, then bit_buf & 1 === 1 so the next carry should be 1\n        pos += 1\n        continue\n      }\n\n      if (window < width / 2n) {\n        carry = 0n\n        naf[pos] = Number(window)\n      } else {\n        carry = 1n\n        // naf[pos] = (window as i8).wrapping_sub(width as i8);\n        naf[pos] = Number(window - width)\n      }\n\n      pos += size\n    }\n\n    return naf\n  }\n}\n","import {U64size, _m as m} from './scalar'\n\nconst LOW_51_BIT_MASK = (1n << 51n) - 1n\n\n/**\n  * Converts Uint8Array[8] to a BigInt in little endian\n  * @param input Uint8Array[8]\n  * @returns {bigint\n */\nfunction uint8ArrayToBigIntLE(input: Uint8Array): bigint {\n  return (\n    BigInt(input[0]) |\n    (BigInt(input[1]) << 8n) |\n    (BigInt(input[2]) << 16n) |\n    (BigInt(input[3]) << 24n) |\n    (BigInt(input[4]) << 32n) |\n    (BigInt(input[5]) << 40n) |\n    (BigInt(input[6]) << 48n) |\n    (BigInt(input[7]) << 56n)\n  )\n}\n\nclass WrappedRes {\n  public i0: boolean\n  public i1: FieldElement\n}\n\nfunction pow22501(fe: FieldElement): FieldElement[] {\n  // Instead of managing which temporary letiables are used\n  // for what, we define as many as we need and leave stack\n  // allocation to the compiler\n  //\n  // Each temporary letiable t_i is of the form (self)^e_i.\n  // Squaring t_i corresponds to multiplying e_i by 2,\n  // so the pow2k function shifts e_i left by k places.\n  // Multiplying t_i and t_j corresponds to adding e_i + e_j.\n  //\n  // Temporary t_i                      Nonzero bits of e_i\n  //\n  const t0 = fe.Square() // 1         e_0 = 2^1\n  const t1 = t0.Square().Square() // 3         e_1 = 2^3\n  const t2 = fe.Mul(t1) // 3,0       e_2 = 2^3 + 2^0\n  const t3 = t0.Mul(t2) // 3,1,0\n  const t4 = t3.Square() // 4,2,1\n  const t5 = t2.Mul(t4) // 4,3,2,1,0\n  const t6 = t5.Pow2k(5) // 9,8,7,6,5\n  const t7 = t6.Mul(t5) // 9,8,7,6,5,4,3,2,1,0\n  const t8 = t7.Pow2k(10) // 19..10\n  const t9 = t8.Mul(t7) // 19..0\n  const t10 = t9.Pow2k(20) // 39..20\n  const t11 = t10.Mul(t9) // 39..0\n  const t12 = t11.Pow2k(10) // 49..10\n  const t13 = t12.Mul(t7) // 49..0\n  const t14 = t13.Pow2k(50) // 99..50\n  const t15 = t14.Mul(t13) // 99..0\n  const t16 = t15.Pow2k(100) // 199..100\n  const t17 = t16.Mul(t15) // 199..0\n  const t18 = t17.Pow2k(50) // 249..50\n  const t19 = t18.Mul(t13) // 249..0\n\n  const pr: FieldElement[] = Array(2)\n  pr[0] = t19\n  pr[1] = t3\n\n  return pr\n}\n\nfunction powP58(e: FieldElement): FieldElement {\n  // The bits of (p-5)/8 are 101111.....11.\n  //\n  //                                 nonzero bits of exponen\n  const t19 = pow22501(e)\n  const t20 = t19[0].Pow2k(2)\n  const t21 = e.Mul(t20)\n\n  return t21\n}\n\nexport class FieldElement {\n  public data: bigint[] = Array(5)\n\n  constructor(data: bigint[]) {\n    this.data[0] = data[0]\n    this.data[1] = data[1]\n    this.data[2] = data[2]\n    this.data[3] = data[3]\n    this.data[4] = data[4]\n  }\n\n  static FromBytes(bytes: Uint8Array): FieldElement {\n    const res = this.Zero()\n    // load bits [  0, 64), no shift\n    res.data[0] = uint8ArrayToBigIntLE(bytes.slice(0, 8)) & LOW_51_BIT_MASK\n    // // load bits [ 48,112), shift to [ 51,112)\n    res.data[1] = (uint8ArrayToBigIntLE(bytes.slice(6, 6 + 8)) >> 3n) & LOW_51_BIT_MASK\n    // // load bits [ 96,160), shift to [102,160)\n    res.data[2] = (uint8ArrayToBigIntLE(bytes.slice(12, 12 + 8)) >> 6n) & LOW_51_BIT_MASK\n    // // load bits [152,216), shift to [153,216)\n    res.data[3] = (uint8ArrayToBigIntLE(bytes.slice(19, 19 + 8)) >> 1n) & LOW_51_BIT_MASK\n    // // load bits [192,256), shift to [204,112)\n    res.data[4] = (uint8ArrayToBigIntLE(bytes.slice(24, 24 + 8)) >> 12n) & LOW_51_BIT_MASK\n    return res\n  }\n\n  Clone(): FieldElement {\n    return new FieldElement(this.data.slice())\n  }\n\n  CtEq(a: FieldElement) {\n    const b1 = this.ToBytes()\n    const b2 = a.ToBytes()\n\n    // Short-circuit on the *lengths* of the slices, not their\n    // contents.\n    if (b1.length !== b2.length) {\n      return false\n    }\n\n    for (let i = 0; i < b1.length; i++) {\n      if (b1[i] !== b2[i]) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  Negate(): FieldElement {\n    return this.Reduce([\n      36028797018963664n - this.data[0],\n      36028797018963952n - this.data[1],\n      36028797018963952n - this.data[2],\n      36028797018963952n - this.data[3],\n      36028797018963952n - this.data[4],\n    ])\n  }\n\n  static SqrtRatioI(u: FieldElement, v: FieldElement): WrappedRes {\n    // Using the same trick as in ed25519 decoding, we merge the\n    // inversion, the square root, and the square test as follows.\n    //\n    // To compute sqrt(α), we can compute β = α^((p+3)/8).\n    // Then β^2 = ±α, so multiplying β by sqrt(-1) if necessary\n    // gives sqrt(α).\n    //\n    // To compute 1/sqrt(α), we observe that\n    //    1/β = α^(p-1 - (p+3)/8) = α^((7p-11)/8)\n    //                            = α^3 * (α^7)^((p-5)/8).\n    //\n    // We can therefore compute sqrt(u/v) = sqrt(u)/sqrt(v)\n    // by first computing\n    //    r = u^((p+3)/8) v^(p-1-(p+3)/8)\n    //      = u u^((p-5)/8) v^3 (v^7)^((p-5)/8)\n    //      = (uv^3) (uv^7)^((p-5)/8).\n    //\n    // If v is nonzero and u/v is square, then r^2 = ±u/v,\n    //                                     so vr^2 = ±u.\n    // If vr^2 =  u, then sqrt(u/v) = r.\n    // If vr^2 = -u, then sqrt(u/v) = r*sqrt(-1).\n    //\n    // If v is zero, r is also zero.\n\n    // const vsq = v.Square()\n\n    const v3 = v.Square().Mul(v)\n    const v7 = v3.Square().Mul(v)\n    let r = u.Mul(v3).Mul(powP58(u.Mul(v7)))\n    const check = v.Mul(r.Square())\n\n    const i = SQRT_M1\n\n    const correct_sign_sqrt = check.CtEq(u)\n    const flipped_sign_sqrt = check.CtEq(u.Negate())\n    const flipped_sign_sqrt_i = check.CtEq(u.Negate().Mul(i))\n\n    const r_prime = r.Mul(SQRT_M1)\n    r.ConditionalAssign(r_prime, flipped_sign_sqrt || flipped_sign_sqrt_i)\n\n    // Choose the nonnegative square root.\n    const r_is_negative = r.IsNegative()\n    if (r_is_negative) {\n      r = r.Negate()\n    }\n    const was_nonzero_square = correct_sign_sqrt || flipped_sign_sqrt\n\n    const res = new WrappedRes()\n    res.i0 = was_nonzero_square\n    res.i1 = r\n\n    return res\n  }\n\n  ConditionalNegate(choice: boolean): void {\n    const nself = this.Negate()\n    this.ConditionalAssign(nself, choice)\n  }\n\n  IsNegative(): boolean {\n    const dt = this.data[0] % 256n\n    const dti = Number(dt) & 1\n    return dti > 0\n  }\n\n  ConditionalAssign(other: FieldElement, choice: boolean): void {\n    this.data[0] = choice ? other.data[0] : this.data[0]\n    this.data[1] = choice ? other.data[1] : this.data[1]\n    this.data[2] = choice ? other.data[2] : this.data[2]\n    this.data[3] = choice ? other.data[3] : this.data[3]\n    this.data[4] = choice ? other.data[4] : this.data[4]\n  }\n\n  Pow2k(k: number): FieldElement {\n    const a = this.Clone().data\n\n    while (true) {\n      // Precondition: assume input limbs a[i] are bounded as\n      //\n      // a[i] < 2^(51 + b)\n      //\n      // where b is a real parameter measuring the \"bit excess\" of the limbs.\n\n      // Precomputation: 64-bit multiply by 19.\n      //\n      // This fits into a u64 whenever 51 + b + lg(19) < 64.\n      //\n      // Since 51 + b + lg(19) < 51 + 4.25 + b\n      //                       = 55.25 + b,\n      // this fits if b < 8.75.\n      const a3_19 = 19n * a[3]\n      const a4_19 = 19n * a[4]\n\n      // Multiply to get 128-bit coefficients of output.\n      //\n      // The 128-bit multiplications by 2 turn into 1 slr + 1 slrd each,\n      // which doesn't seem any better or worse than doing them as precomputations\n      // on the 64-bit inputs.\n      // const t1 = m(a[1], a4_19) + m(a[2], a3_19)\n      // const t2 = 2n * t1\n      // const t3 = m(a[0], a[0]) + t2\n      const c0 = m(a[0], a[0]) + 2n * (m(a[1], a4_19) + m(a[2], a3_19))\n      let c1 = m(a[3], a3_19) + 2n * (m(a[0], a[1]) + m(a[2], a4_19))\n      let c2 = m(a[1], a[1]) + 2n * (m(a[0], a[2]) + m(a[4], a3_19))\n      let c3 = m(a[4], a4_19) + 2n * (m(a[0], a[3]) + m(a[1], a[2]))\n      let c4 = m(a[2], a[2]) + 2n * (m(a[0], a[4]) + m(a[1], a[3]))\n\n      // Same bound as in multiply:\n      //    c[i] < 2^(102 + 2*b) * (1+i + (4-i)*19)\n      //         < 2^(102 + lg(1 + 4*19) + 2*b)\n      //         < 2^(108.27 + 2*b)\n      //\n      // The carry (c[i] >> 51) fits into a u64 when\n      //    108.27 + 2*b - 51 < 64\n      //    2*b < 6.73\n      //    b < 3.365.\n      //\n      // So we require b < 3 to ensure this fits.\n\n      // Casting to u64 and back tells the compiler that the carry is bounded by 2^64, so\n      // that the addition is a u128 + u64 rather than u128 + u128.\n      c1 += c0 >> 51n\n      a[0] = c0 % U64size & LOW_51_BIT_MASK\n\n      c2 += c1 >> 51n\n      a[1] = c1 % U64size & LOW_51_BIT_MASK\n\n      c3 += c2 >> 51n\n      a[2] = c2 % U64size & LOW_51_BIT_MASK\n\n      c4 += c3 >> 51n\n      a[3] = c3 % U64size & LOW_51_BIT_MASK\n\n      const carry = c4 >> 51n\n      a[4] = c4 % U64size & LOW_51_BIT_MASK\n\n      // To see that this does not overflow, we need a[0] + carry * 19 < 2^64.\n      //\n      // c4 < a2^2 + 2*a0*a4 + 2*a1*a3 + (carry from c3)\n      //    < 2^(102 + 2*b + lg(5)) + 2^64.\n      //\n      // When b < 3 we get\n      //\n      // c4 < 2^110.33  so that carry < 2^59.33\n      //\n      // so that\n      //\n      // a[0] + carry * 19 < 2^51 + 19 * 2^59.33 < 2^63.58\n      //\n      // and there is no overflow.\n      a[0] = a[0] + ((carry * 19n) % U64size)\n\n      // Now a[1] < 2^51 + 2^(64 -51) = 2^51 + 2^13 < 2^(51 + epsilon).\n      a[1] += a[0] >> 51n\n      a[0] &= LOW_51_BIT_MASK\n\n      // Now all a[i] < 2^(51 + epsilon) and a = self^(2^k).\n      k--\n      if (k === 0) {\n        break\n      }\n    }\n\n    return new FieldElement(a)\n  }\n\n  static One(): FieldElement {\n    return new FieldElement([1n, 0n, 0n, 0n, 0n])\n  }\n\n  static Zero(): FieldElement {\n    return new FieldElement([0n, 0n, 0n, 0n, 0n])\n  }\n\n  Mul(second: FieldElement): FieldElement {\n    // Alias self, _rhs for more readable formulas\n    const a = this.data\n    const b = second\n\n    // Precondition: assume input limbs a[i], b[i] are bounded as\n    //\n    // a[i], b[i] < 2^(51 + b)\n    //\n    // where b is a real parameter measuring the \"bit excess\" of the limbs.\n\n    // 64-bit precomputations to avoid 128-bit multiplications.\n    //\n    // This fits into a u64 whenever 51 + b + lg(19) < 64.\n    //\n    // Since 51 + b + lg(19) < 51 + 4.25 + b\n    //                       = 55.25 + b,\n    // this fits if b < 8.75.\n    const b1_19 = b.data[1] * 19n\n    const b2_19 = b.data[2] * 19n\n    const b3_19 = b.data[3] * 19n\n    const b4_19 = b.data[4] * 19n\n\n    // Multiply to get 128-bit coefficients of output\n    const c0 =\n      m(a[0], b.data[0]) +\n      m(a[4], b1_19) +\n      m(a[3], b2_19) +\n      m(a[2], b3_19) +\n      m(a[1], b4_19)\n    let c1 =\n      m(a[1], b.data[0]) +\n      m(a[0], b.data[1]) +\n      m(a[4], b2_19) +\n      m(a[3], b3_19) +\n      m(a[2], b4_19)\n    let c2 =\n      m(a[2], b.data[0]) +\n      m(a[1], b.data[1]) +\n      m(a[0], b.data[2]) +\n      m(a[4], b3_19) +\n      m(a[3], b4_19)\n    let c3 =\n      m(a[3], b.data[0]) +\n      m(a[2], b.data[1]) +\n      m(a[1], b.data[2]) +\n      m(a[0], b.data[3]) +\n      m(a[4], b4_19)\n    let c4 =\n      m(a[4], b.data[0]) +\n      m(a[3], b.data[1]) +\n      m(a[2], b.data[2]) +\n      m(a[1], b.data[3]) +\n      m(a[0], b.data[4])\n\n    // Casting to u64 and back tells the compiler that the carry is\n    // bounded by 2^64, so that the addition is a u128 + u64 rather\n    // than u128 + u128.\n\n    const output: bigint[] = Array(5)\n\n    c1 += c0 >> 51n\n    output[0] = (c0 & LOW_51_BIT_MASK) % U64size\n\n    c2 += c1 >> 51n\n    output[1] = (c1 & LOW_51_BIT_MASK) % U64size\n\n    c3 += c2 >> 51n\n    output[2] = (c2 & LOW_51_BIT_MASK) % U64size\n\n    c4 += c3 >> 51n\n    output[3] = (c3 & LOW_51_BIT_MASK) % U64size\n\n    const carry = (c4 >> 51n) % U64size\n    output[4] = (c4 & LOW_51_BIT_MASK) % U64size\n\n    // To see that this does not overflow, we need out[0] + carry * 19 < 2^64.\n    //\n    // c4 < a0*b4 + a1*b3 + a2*b2 + a3*b1 + a4*b0 + (carry from c3)\n    //    < 5*(2^(51 + b) * 2^(51 + b)) + (carry from c3)\n    //    < 2^(102 + 2*b + lg(5)) + 2^64.\n    //\n    // When b < 3 we get\n    //\n    // c4 < 2^110.33  so that carry < 2^59.33\n    //\n    // so that\n    //\n    // out[0] + carry * 19 < 2^51 + 19 * 2^59.33 < 2^63.58\n    //\n    // and there is no overflow.\n    output[0] = output[0] + carry * 19n\n\n    // Now out[1] < 2^51 + 2^(64 -51) = 2^51 + 2^13 < 2^(51 + epsilon).\n    output[1] += output[0] >> 51n\n    output[0] &= LOW_51_BIT_MASK\n\n    // Now out[i] < 2^(51 + epsilon) for all i.\n    return new FieldElement(output)\n  }\n\n  Reduce(limbs: bigint[]): FieldElement {\n    // Since the input limbs are bounded by 2^64, the biggest\n    // carry-out is bounded by 2^13.\n    //\n    // The biggest carry-in is c4 * 19, resulting in\n    //\n    // 2^51 + 19*2^13 < 2^51.0000000001\n    //\n    // Because we don't need to canonicalize, only to reduce the\n    // limb sizes, it's OK to do a \"weak reduction\", where we\n    // compute the carry-outs in parallel.\n\n    const c0 = limbs[0] >> 51n\n    const c1 = limbs[1] >> 51n\n    const c2 = limbs[2] >> 51n\n    const c3 = limbs[3] >> 51n\n    const c4 = limbs[4] >> 51n\n\n    limbs[0] &= LOW_51_BIT_MASK\n    limbs[1] &= LOW_51_BIT_MASK\n    limbs[2] &= LOW_51_BIT_MASK\n    limbs[3] &= LOW_51_BIT_MASK\n    limbs[4] &= LOW_51_BIT_MASK\n\n    limbs[0] += c4 * 19n\n    limbs[1] += c0\n    limbs[2] += c1\n    limbs[3] += c2\n    limbs[4] += c3\n\n    return new FieldElement(limbs)\n  }\n\n  Add(element: FieldElement): FieldElement {\n    const f = new FieldElement(this.data)\n    for (let i = 0; i < 5; i++) {\n      f.data[i] += element.data[i]\n    }\n    return f\n  }\n\n  Sub(x: FieldElement): FieldElement {\n    // To avoid underflow, first add a multiple of p.\n    // Choose 16*p = p << 4 to be larger than 54-bit _rhs.\n    //\n    // If we could statically track the bitlengths of the limbs\n    // of every FieldElement51, we could choose a multiple of p\n    // just bigger than _rhs and avoid having to do a reduction.\n    //\n    // Since we don't yet have type-level integers to do this, we\n    // have to add an explicit reduction call here.\n\n    return this.Reduce([\n      this.data[0] + 36028797018963664n - x.data[0],\n      this.data[1] + 36028797018963952n - x.data[1],\n      this.data[2] + 36028797018963952n - x.data[2],\n      this.data[3] + 36028797018963952n - x.data[3],\n      this.data[4] + 36028797018963952n - x.data[4],\n    ])\n  }\n\n  Square(): FieldElement {\n    return this.Pow2k(1)\n  }\n\n  Square2(): FieldElement {\n    const square = this.Pow2k(1)\n    for (let i = 0; i < 5; i++) {\n      square.data[i] *= 2n\n    }\n\n    return square\n  }\n\n  BitXor(a: FieldElement): FieldElement {\n    const res = new FieldElement(this.data)\n    res.data[0] ^= a.data[0]\n    res.data[1] ^= a.data[1]\n    res.data[2] ^= a.data[2]\n    res.data[3] ^= a.data[3]\n    res.data[4] ^= a.data[4]\n    return res\n  }\n\n  BitAnd(a: bigint): FieldElement {\n    const res = new FieldElement(this.data)\n    res.data[0] &= a\n    res.data[1] &= a\n    res.data[2] &= a\n    res.data[3] &= a\n    res.data[4] &= a\n    return res\n  }\n\n  ToBytes(): Uint8Array {\n    // Let h = limbs[0] + limbs[1]*2^51 + ... + limbs[4]*2^204.\n    //\n    // Write h = pq + r with 0 <= r < p.\n    //\n    // We want to compute r = h mod p.\n    //\n    // If h < 2*p = 2^256 - 38,\n    // then q = 0 or 1,\n    //\n    // with q = 0 when h < p\n    //  and q = 1 when h >= p.\n    //\n    // Notice that h >= p <===> h + 19 >= p + 19 <===> h + 19 >= 2^255.\n    // Therefore q can be computed as the carry bit of h + 19.\n\n    // First, reduce the limbs to ensure h < 2*p.\n    const cp = this.Clone()\n\n    const limbs = cp.Reduce(this.Clone().data).data\n\n    let q = (limbs[0] + 19n) >> 51n\n    q = (limbs[1] + q) >> 51n\n    q = (limbs[2] + q) >> 51n\n    q = (limbs[3] + q) >> 51n\n    q = (limbs[4] + q) >> 51n\n\n    // Now we can compute r as r = h - pq = r - (2^255-19)q = r + 19q - 2^255q\n\n    limbs[0] += 19n * q\n\n    // Now carry the result to compute r + 19q ...\n    const low_51_bit_mask = (1n << 51n) - 1n\n    limbs[1] += limbs[0] >> 51n\n    limbs[0] = limbs[0] & low_51_bit_mask\n    limbs[2] += limbs[1] >> 51n\n    limbs[1] = limbs[1] & low_51_bit_mask\n    limbs[3] += limbs[2] >> 51n\n    limbs[2] = limbs[2] & low_51_bit_mask\n    limbs[4] += limbs[3] >> 51n\n    limbs[3] = limbs[3] & low_51_bit_mask\n    // ... but instead of carrying (limbs[4] >> 51) = 2^255q\n    // into another limb, discard it, subtracting the value\n    limbs[4] = limbs[4] & low_51_bit_mask\n\n    // Now arrange the bits of the limbs.\n    const s = new Uint8Array(32)\n    s[0] = Number(limbs[0] % 256n)\n    s[1] = Number((limbs[0] >> 8n) % 256n)\n    s[2] = Number((limbs[0] >> 16n) % 256n)\n    s[3] = Number((limbs[0] >> 24n) % 256n)\n    s[4] = Number((limbs[0] >> 32n) % 256n)\n    s[5] = Number((limbs[0] >> 40n) % 256n)\n    s[6] = Number((limbs[0] >> 48n) % 256n | (limbs[1] << 3n) % 256n)\n    s[7] = Number((limbs[1] >> 5n) % 256n)\n    s[8] = Number((limbs[1] >> 13n) % 256n)\n    s[9] = Number((limbs[1] >> 21n) % 256n)\n    s[10] = Number((limbs[1] >> 29n) % 256n)\n    s[11] = Number((limbs[1] >> 37n) % 256n)\n    s[12] = Number(((limbs[1] >> 45n) | (limbs[2] << 6n)) % 256n)\n    s[13] = Number((limbs[2] >> 2n) % 256n)\n    s[14] = Number((limbs[2] >> 10n) % 256n)\n    s[15] = Number((limbs[2] >> 18n) % 256n)\n    s[16] = Number((limbs[2] >> 26n) % 256n)\n    s[17] = Number((limbs[2] >> 34n) % 256n)\n    s[18] = Number((limbs[2] >> 42n) % 256n)\n    s[19] = Number(((limbs[2] >> 50n) | (limbs[3] << 1n)) % 256n)\n    s[20] = Number((limbs[3] >> 7n) % 256n)\n    s[21] = Number((limbs[3] >> 15n) % 256n)\n    s[22] = Number((limbs[3] >> 23n) % 256n)\n    s[23] = Number((limbs[3] >> 31n) % 256n)\n    s[24] = Number((limbs[3] >> 39n) % 256n)\n    s[25] = Number(((limbs[3] >> 47n) | (limbs[4] << 4n)) % 256n)\n    s[26] = Number((limbs[4] >> 4n) % 256n)\n    s[27] = Number((limbs[4] >> 12n) % 256n)\n    s[28] = Number((limbs[4] >> 20n) % 256n)\n    s[29] = Number((limbs[4] >> 28n) % 256n)\n    s[30] = Number((limbs[4] >> 36n) % 256n)\n    s[31] = Number((limbs[4] >> 44n) % 256n)\n\n    // High bit should be zero.\n    // debug_assert!((s[31] & 0b1000_0000u8) === 0u8);\n\n    return s\n  }\n\n  Invert(): FieldElement {\n    // The bits of p-2 = 2^255 -19 -2 are 11010111111...11.\n    //\n    //                                 nonzero bits of exponent\n    const r = pow22501(this) // t19: 249..0 ; t3: 3,1,0\n    const t20 = r[0].Pow2k(5) // 254..5\n    const t21 = t20.Mul(r[1]) // 254..5,3,1,0\n\n    return t21\n  }\n}\n\n/// Precomputed value of one of the square roots of -1 (mod p)\nexport const SQRT_M1 = new FieldElement([\n  1718705420411056n,\n  234908883556509n,\n  2233514472574048n,\n  2117202627021982n,\n  765476049583133n,\n])\n","import {FieldElement} from './fieldElement'\nimport {CompletedPoint} from './completedPoint'\nimport {EdwardsPoint} from './edwardsPoint'\n\nexport class ProjectivePoint {\n  public X: FieldElement\n  public Y: FieldElement\n  public Z: FieldElement\n\n  Double(): CompletedPoint {\n    const XX = this.X.Square()\n    const YY = this.Y.Square()\n    const ZZ2 = this.Z.Square2()\n    const X_plus_Y = this.X.Add(this.Y)\n    const X_plus_Y_sq = X_plus_Y.Square()\n    const YY_plus_XX = YY.Add(XX)\n    const YY_minus_XX = YY.Sub(XX)\n\n    const r = new CompletedPoint()\n    r.X = X_plus_Y_sq.Sub(YY_plus_XX)\n    r.Y = YY_plus_XX\n    r.Z = YY_minus_XX\n    r.T = ZZ2.Sub(YY_minus_XX)\n\n    return r\n  }\n\n  static Identity(): ProjectivePoint {\n    const r = new ProjectivePoint()\n    r.X = FieldElement.Zero()\n    r.Y = FieldElement.One()\n    r.Z = FieldElement.One()\n    return r\n  }\n\n  ToExtended(): EdwardsPoint {\n    return EdwardsPoint.EdwardsPointFromElems(\n      this.X.Mul(this.Z),\n      this.Y.Mul(this.Z),\n      this.Z.Square(),\n      this.X.Mul(this.Y),\n    )\n  }\n}\n","import type {FieldElement} from './fieldElement'\nimport {EdwardsPoint} from './edwardsPoint'\nimport {ProjectivePoint} from './projectivePoint'\n\nexport class CompletedPoint {\n  public X: FieldElement\n  public Y: FieldElement\n  public Z: FieldElement\n  public T: FieldElement\n\n  ToProjective(): ProjectivePoint {\n    const r = new ProjectivePoint()\n    r.X = this.X.Mul(this.T)\n    r.Y = this.Y.Mul(this.Z)\n    r.Z = this.Z.Mul(this.T)\n    return r\n  }\n\n  ToExtended(): EdwardsPoint {\n    return EdwardsPoint.EdwardsPointFromElems(\n      this.X.Mul(this.T),\n      this.Y.Mul(this.Z),\n      this.Z.Mul(this.T),\n      this.X.Mul(this.Y),\n    )\n  }\n}\n","import {FieldElement} from './fieldElement'\n\nexport class AffineNielsPoint {\n  public Y_plus_X: FieldElement\n  public Y_minus_X: FieldElement\n  public XY2d: FieldElement\n\n  constructor() {\n    this.Y_plus_X = FieldElement.One()\n    this.Y_minus_X = FieldElement.One()\n    this.XY2d = FieldElement.Zero()\n  }\n\n  static FromElements(Y_plus_X: FieldElement, Y_minus_X: FieldElement, XY2d: FieldElement): AffineNielsPoint {\n    const res = new AffineNielsPoint()\n    res.Y_plus_X = Y_plus_X\n    res.Y_minus_X = Y_minus_X\n    res.XY2d = XY2d\n    return res\n  }\n\n  static FromArray(array: bigint[]): AffineNielsPoint {\n    if (array.length !== 15) {\n      throw new Error('Array length must be 15')\n    }\n    return AffineNielsPoint.FromElements(\n      new FieldElement(array.slice(0, 5)),\n      new FieldElement(array.slice(5, 10)),\n      new FieldElement(array.slice(10, 15)),\n    )\n  }\n\n  static FromStringInRadix36Form(param: string): AffineNielsPoint {\n    const array = param.split(',').map(x => BigInt(parseInt(x, 36)))\n    if (array.length !== 15) {\n      throw new Error('Array length must be 15')\n    }\n    return AffineNielsPoint.FromElements(\n      new FieldElement(array.slice(0, 5)),\n      new FieldElement(array.slice(5, 10)),\n      new FieldElement(array.slice(10, 15)),\n    )\n  }\n\n  ConditionalAssign(a: AffineNielsPoint, choice: boolean): void {\n    this.Y_plus_X.ConditionalAssign(a.Y_plus_X, choice)\n    this.Y_minus_X.ConditionalAssign(a.Y_minus_X, choice)\n    this.XY2d.ConditionalAssign(a.XY2d, choice)\n  }\n\n  BitXor(a: AffineNielsPoint): AffineNielsPoint {\n    const r = new AffineNielsPoint()\n    r.Y_plus_X = this.Y_plus_X.BitXor(a.Y_plus_X)\n    r.Y_minus_X = this.Y_minus_X.BitXor(a.Y_minus_X)\n    r.XY2d = this.XY2d.BitXor(this.XY2d)\n    return r\n  }\n\n  ConditionalNegate(choice: boolean): void {\n    const nself = this.Negate()\n    this.ConditionalAssign(nself, choice)\n  }\n\n  Negate(): AffineNielsPoint {\n    const r = new AffineNielsPoint()\n    r.Y_plus_X = this.Y_minus_X.Clone()\n    r.Y_minus_X = this.Y_plus_X.Clone()\n    r.XY2d = this.XY2d.Negate()\n    return r\n  }\n}\n","import {FieldElement} from './fieldElement'\n\nexport class ProjectiveNielsPoint {\n  public Y_plus_X: FieldElement\n  public Y_minus_X: FieldElement\n  public Z: FieldElement\n  public T2d: FieldElement\n\n  public constructor() {\n    this.Y_plus_X = FieldElement.Zero()\n    this.Y_minus_X = FieldElement.Zero()\n    this.Z = FieldElement.Zero()\n    this.T2d = FieldElement.Zero()\n  }\n\n  BitXor(a: ProjectiveNielsPoint): ProjectiveNielsPoint {\n    const r = new ProjectiveNielsPoint()\n    r.Y_plus_X = this.Y_plus_X.BitXor(a.Y_plus_X)\n    r.Y_minus_X = this.Y_minus_X.BitXor(a.Y_minus_X)\n    r.Z = this.Z.BitXor(a.Z)\n    r.T2d = this.T2d.BitXor(a.T2d)\n    return r\n  }\n\n  BitAnd(a: number): ProjectiveNielsPoint {\n    const aa = BigInt(a)\n    const r = new ProjectiveNielsPoint()\n    r.Y_plus_X = this.Y_plus_X.BitAnd(aa)\n    r.Y_minus_X = this.Y_minus_X.BitAnd(aa)\n    r.Z = this.Z.BitAnd(aa)\n    r.T2d = this.T2d.BitAnd(aa)\n    return r\n  }\n\n  Negate(): ProjectiveNielsPoint {\n    const r = new ProjectiveNielsPoint()\n    r.Y_plus_X = this.Y_plus_X.Negate()\n    r.Y_minus_X = this.Y_minus_X.Negate()\n    r.Z = this.Z.Negate()\n    r.T2d = this.T2d.Negate()\n    return r\n  }\n\n  Copy(): ProjectiveNielsPoint {\n    const r = new ProjectiveNielsPoint()\n    r.Y_plus_X = this.Y_plus_X.Clone()\n    r.Y_minus_X = this.Y_minus_X.Clone()\n    r.Z = this.Z.Clone()\n    r.T2d = this.T2d.Clone()\n    return r\n  }\n\n  GetPoint(): ProjectiveNielsPoint {\n    return this\n  }\n\n  FromPoint(a: ProjectiveNielsPoint): void {\n    this.Y_plus_X = a.Y_plus_X\n    this.Y_minus_X = a.Y_minus_X\n    this.Z = a.Z\n    this.T2d = a.T2d\n  }\n\n  ConditionalAssign(a: ProjectiveNielsPoint, choice: boolean): void {\n    // if choice = 0, mask = (-0) = 0000...0000\n    // if choice = 1, mask = (-1) = 1111...1111\n    const mask = choice ? 0b1111_1111_1111_1111 : 0b0000_0000_0000_0000\n\n    //    *self ^= mask & (*self ^ *other);\n    this.FromPoint(this.GetPoint().BitXor(this.BitXor(a).BitAnd(mask)))\n  }\n\n  ConditionalNegate(choice: boolean): void {\n    const p = this.GetPoint()\n    this.ConditionalAssign(p, choice)\n  }\n}\n","import {FieldElement} from './fieldElement'\nimport {CompletedPoint} from './completedPoint'\nimport {ProjectivePoint} from './projectivePoint'\nimport {AffineNielsPoint} from './affineNielsPoint'\nimport {ProjectiveNielsPoint} from './projectiveNielsPoint'\n\n/// Edwards `2*d` value, equal to `2*(-121665/121666) mod p`.\nconst EDWARDS_D2 = new FieldElement([\n  1859910466990425n,\n  932731440258426n,\n  1072319116312658n,\n  1815898335770999n,\n  633789495995903n,\n])\nconst EDWARDS_D = new FieldElement([\n  929955233495203n,\n  466365720129213n,\n  1662059464998953n,\n  2033849074728123n,\n  1442794654840575n,\n])\n\nexport class EdwardsPoint {\n  public X: FieldElement\n  public Y: FieldElement\n  public Z: FieldElement\n  public T: FieldElement\n\n  FromElems(\n    x: FieldElement,\n    y: FieldElement,\n    z: FieldElement,\n    t: FieldElement,\n  ) {\n    this.X = x\n    this.Y = y\n    this.Z = z\n    this.T = t\n  }\n\n  static EdwardsPointFromElems(\n    x: FieldElement,\n    y: FieldElement,\n    z: FieldElement,\n    t: FieldElement,\n  ) {\n    const ep = new EdwardsPoint()\n    ep.X = x\n    ep.Y = y\n    ep.Z = z\n    ep.T = t\n    return ep\n  }\n\n  public Equals(a: EdwardsPoint): boolean {\n    let result = true\n    for (let i = 0; i < 5; i++) {\n      result =\n        result &&\n        this.X.data[i] === a.X.data[i] &&\n        this.Y.data[i] === a.Y.data[i] &&\n        this.Z.data[i] === a.Z.data[i] &&\n        this.T.data[i] === a.T.data[i]\n    }\n\n    return result\n  }\n\n  Copy(): EdwardsPoint {\n    const ep = new EdwardsPoint()\n    ep.FromElems(this.X, this.Y, this.Z, this.T)\n    return ep\n  }\n\n  static FromCompressedPoint(bytes: Uint8Array): EdwardsPoint {\n    const s = FieldElement.FromBytes(bytes)\n\n    if (s.IsNegative()) {\n      throw new Error('Compressed point decompression error: s is negative')\n    }\n\n    // Step 2.  Compute (X:Y:Z:T).\n    const one = FieldElement.One()\n    const ss = s.Square()\n    const u1 = one.Sub(ss) //  1 + as²\n    const u2 = one.Add(ss) //  1 - as²    where a=-1\n    const u2_sqr = u2.Square() // (1 - as²)²\n\n    // v === ad(1+as²)² - (1-as²)²            where d=-121665/121666\n    const nEdwardsD = EDWARDS_D.Negate()\n    const v = nEdwardsD.Mul(u1.Square()).Sub(u2_sqr)\n\n    //  invsqrt(v * u2_sqr);\n    const I = FieldElement.SqrtRatioI(FieldElement.One(), v.Mul(u2_sqr)) // 1/sqrt(v*u_2²)\n\n    const Dx = I.i1.Mul(u2) // 1/sqrt(v)\n    const Dy = I.i1.Mul(Dx).Mul(v) // 1/u2\n\n    // x === | 2s/sqrt(v) | === + sqrt(4s²/(ad(1+as²)² - (1-as²)²))\n    const x = s.Add(s).Mul(Dx)\n    const x_neg = x.IsNegative()\n    x.ConditionalNegate(x_neg)\n    // y === (1-as²)/(1+as²)\n    const y = u1.Mul(Dy)\n\n    // t === ((1+as²) sqrt(4s²/(ad(1+as²)² - (1-as²)²)))/(1-as²)\n    const t = x.Mul(y)\n\n    return EdwardsPoint.EdwardsPointFromElems(x, y, one, t)\n  }\n\n  static Double(point: EdwardsPoint): EdwardsPoint {\n    return point.ToProjective().Double().ToExtended()\n  }\n\n  /// Compute \\\\([2\\^k] P \\\\) by successive doublings. Requires \\\\( k > 0 \\\\).\n  MulByPow2(k: number): EdwardsPoint {\n    let r: CompletedPoint\n    let s = this.ToProjective()\n    for (let i = 0; i < k - 1; i++) {\n      r = s.Double()\n      s = r.ToProjective()\n    }\n\n    // Unroll last iteration so we can go directly to_extended()\n    return s.Double().ToExtended()\n  }\n\n  static Identity(): EdwardsPoint {\n    return EdwardsPoint.EdwardsPointFromElems(\n      FieldElement.Zero(),\n      FieldElement.One(),\n      FieldElement.One(),\n      FieldElement.Zero(),\n    )\n  }\n\n  Negate(): EdwardsPoint {\n    return EdwardsPoint.EdwardsPointFromElems(\n      this.X.Negate(),\n      this.Y,\n      this.Z,\n      this.T.Negate(),\n    )\n  }\n\n  ToExtended(): EdwardsPoint {\n    return EdwardsPoint.EdwardsPointFromElems(\n      this.X.Mul(this.T),\n      this.Y.Mul(this.Z),\n      this.Z.Mul(this.T),\n      this.X.Mul(this.Y),\n    )\n  }\n\n  AddPnp(other: ProjectiveNielsPoint): CompletedPoint {\n    const Y_plus_X = this.Y.Add(this.X)\n    const Y_minus_X = this.Y.Sub(this.X)\n    const PP = Y_plus_X.Mul(other.Y_plus_X)\n    const MM = Y_minus_X.Mul(other.Y_minus_X)\n    const TT2d = this.T.Mul(other.T2d)\n    const ZZ = this.Z.Mul(other.Z)\n    const ZZ2 = ZZ.Add(ZZ)\n\n    const cp = new CompletedPoint()\n    cp.X = PP.Sub(MM)\n    cp.Y = PP.Add(MM)\n    cp.Z = ZZ2.Add(TT2d)\n    cp.T = ZZ2.Sub(TT2d)\n    return cp\n  }\n\n  AddAnp(other: AffineNielsPoint): CompletedPoint {\n    const Y_plus_X = this.Y.Add(this.X)\n    const Y_minus_X = this.Y.Sub(this.X)\n    const PP = Y_plus_X.Mul(other.Y_plus_X)\n    const MM = Y_minus_X.Mul(other.Y_minus_X)\n    const Txy2d = this.T.Mul(other.XY2d)\n    const Z2 = this.Z.Add(this.Z)\n\n    const cp = new CompletedPoint()\n    cp.X = PP.Sub(MM)\n    cp.Y = PP.Add(MM)\n    cp.Z = Z2.Add(Txy2d)\n    cp.T = Z2.Sub(Txy2d)\n    return cp\n  }\n\n  AddEp(other: EdwardsPoint): EdwardsPoint {\n    return this.AddPnp(other.ToProjectiveNiels()).ToExtended()\n  }\n\n  SubAnp(other: AffineNielsPoint): CompletedPoint {\n    const Y_plus_X = this.Y.Add(this.X)\n    const Y_minus_X = this.Y.Sub(this.X)\n    const PM = Y_plus_X.Mul(other.Y_minus_X)\n    const MP = Y_minus_X.Mul(other.Y_plus_X)\n    const Txy2d = this.T.Mul(other.XY2d)\n    const Z2 = this.Z.Add(this.Z)\n\n    const cp = new CompletedPoint()\n    cp.X = PM.Sub(MP)\n    cp.Y = PM.Add(MP)\n    cp.Z = Z2.Sub(Txy2d)\n    cp.T = Z2.Add(Txy2d)\n    return cp\n  }\n\n  SubPnp(other: ProjectiveNielsPoint): CompletedPoint {\n    const Y_plus_X = this.Y.Add(this.X)\n    const Y_minus_X = this.Y.Sub(this.X)\n    const PM = Y_plus_X.Mul(other.Y_minus_X)\n    const MP = Y_minus_X.Mul(other.Y_plus_X)\n    const TT2d = this.T.Mul(other.T2d)\n    const ZZ = this.Z.Mul(other.Z)\n    const ZZ2 = ZZ.Add(ZZ)\n\n    const cp = new CompletedPoint()\n    cp.X = PM.Sub(MP)\n    cp.Y = PM.Add(MP)\n    cp.Z = ZZ2.Sub(TT2d)\n    cp.T = ZZ2.Add(TT2d)\n    return cp\n  }\n\n  ToProjectiveNiels(): ProjectiveNielsPoint {\n    const cp = new ProjectiveNielsPoint()\n    cp.Y_plus_X = this.Y.Add(this.X)\n    cp.Y_minus_X = this.Y.Sub(this.X)\n    cp.Z = this.Z\n    cp.T2d = this.T.Mul(EDWARDS_D2)\n    return cp\n  }\n\n  ToProjective(): ProjectivePoint {\n    const cp = new ProjectivePoint()\n    cp.X = this.X\n    cp.Y = this.Y\n    cp.Z = this.Z\n    return cp\n  }\n\n  ToAffineNiels(): AffineNielsPoint {\n    // const recip = this.Z.Invert()\n    // const x = this.X.Mul(recip)\n    // const y = this.Y.Mul(recip)\n    const xy2d = this.X.Mul(this.Y).Mul(EDWARDS_D2)\n\n    const cp = new AffineNielsPoint()\n    cp.Y_plus_X = this.Y.Add(this.X)\n    cp.Y_minus_X = this.Y.Sub(this.X)\n    cp.XY2d = xy2d\n    return cp\n  }\n}\n","import type {ProjectiveNielsPoint} from './projectiveNielsPoint'\nimport type {LookupTable} from './edwardsBasepointTable'\nimport type {AffineNielsPoint} from './affineNielsPoint'\nimport {EdwardsPoint} from './edwardsPoint'\n\nexport class NafLookupTable5PNP {\n  public Pnp: ProjectiveNielsPoint[]\n\n  Select(v: number): ProjectiveNielsPoint {\n    return this.Pnp[v / 2]\n  }\n}\n\nexport class NafLookupTable {\n  public lookupTable: LookupTable\n\n  public NafLookupTable(lookupTable: LookupTable) {\n    this.lookupTable = lookupTable\n  }\n\n  Select(v: number): AffineNielsPoint {\n    return this.lookupTable.affineNielsPoints[v / 2]\n  }\n\n  static FromEdwardsPoint(points: EdwardsPoint): NafLookupTable5PNP {\n    const Ai: ProjectiveNielsPoint[] = new Array(8)\n\n    for (let i = 0; i < 8; i++) {\n      Ai[i] = points.ToProjectiveNiels()\n    }\n\n    const A2 = EdwardsPoint.Double(points)\n\n    for (let i = 0; i <= 6; i++) {\n      Ai[i + 1] = A2.AddPnp(Ai[i]).ToExtended().ToProjectiveNiels()\n    }\n\n    /// Now Ai = [A, 3A, 5A, 7A, 9A, 11A, 13A, 15A]\n    const nlt = new NafLookupTable5PNP()\n    nlt.Pnp = Ai\n    return nlt\n  }\n}\n","import {Scalar} from './scalar'\nimport {EdwardsPoint} from './edwardsPoint'\nimport {AffineNielsPoint} from './affineNielsPoint'\n\nexport class EdwardsBasepointTable {\n  public lt: LookupTable[]\n\n  constructor(lt: LookupTable[] = []) {\n    this.lt = lt\n  }\n\n  Mul(sclr: Scalar): EdwardsPoint {\n    const a = Scalar.ToRadix16(sclr.bytes)\n    let P = EdwardsPoint.Identity()\n\n    for (let i = 0; i < 64; i++) {\n      if (i % 2 === 1) {\n        const s1 = this.lt[Math.floor(i / 2)].Select(a[i])\n        const s2 = P.AddAnp(s1)\n        const s3 = s2.ToExtended()\n\n        P = s3\n      }\n    }\n\n    P = P.MulByPow2(4)\n\n    for (let i = 0; i < 64; i++) {\n      if (i % 2 === 0) {\n        P = P.AddAnp(this.lt[Math.floor(i / 2)].Select(a[i])).ToExtended()\n      }\n    }\n\n    return P\n  }\n}\n\nexport class LookupTable {\n  public ep: EdwardsPoint\n  public affineNielsPoints: AffineNielsPoint[]\n\n  static FromEdward(ep: EdwardsPoint): LookupTable {\n    const res = new LookupTable()\n    res.ep = ep\n    res.affineNielsPoints = new AffineNielsPoint[8]()\n    res.affineNielsPoints[0] = ep.ToAffineNiels()\n    for (let j = 0; j < 7; j++) {\n      res.affineNielsPoints[j + 1] = ep.AddAnp(res.affineNielsPoints[j]).ToExtended().ToAffineNiels()\n    }\n    return res\n  }\n\n  static FromANPArray(p: AffineNielsPoint[]): LookupTable {\n    const res = new LookupTable()\n    res.affineNielsPoints = p\n    return res\n  }\n\n  static FromBigintMatrix = (table: bigint[][]): LookupTable => {\n    return LookupTable.FromANPArray(table.map(AffineNielsPoint.FromArray))\n  }\n\n  static FromArrayOfStringsInRadix36Form(table: string[]): LookupTable {\n    return LookupTable.FromANPArray(table.map(AffineNielsPoint.FromStringInRadix36Form))\n  }\n\n  // x - sbyte\n  Select(x: number): AffineNielsPoint {\n    // Compute xabs = |x|\n    const xmask = x >> 7\n    const xabs = ((x + xmask) ^ xmask)\n\n    // Set t = 0 * P = identity\n    const t = new AffineNielsPoint()\n    for (let i = 1; i < 9; i++) {\n      // Copy `points[j-1] === j*P` onto `t` in constant time if `|x| === j`.\n      t.ConditionalAssign(this.affineNielsPoints[i - 1], xabs === i)\n    }\n\n    // Now t === |x| * P.\n    const neg_mask = (xmask & 1)\n    t.ConditionalNegate(neg_mask === 1)\n    // Now t === x * P.\n\n    return t\n  }\n\n  static From(ep: EdwardsPoint): LookupTable {\n    return LookupTable.FromEdward(ep)\n  }\n}\n","import {LookupTable, EdwardsBasepointTable} from './edwardsBasepointTable'\n\n// each string is a comma-separated list of 15 numbers in radix 36\n// the numbers are the coefficients of the affine Niels point\n\n// first 5 numbers are the Y_plus_X coefficients\n// second 5 numbers are the Y_minus_X coefficients\n// third 5 numbers are the XY2d coefficients\n\n// so 15 numbers make up an affine Niels point\n/* eslint-disable */\nconst oddMultiplesAffinePointsInStringRadix36Form: string[] = [\n  'yuw1d7ohv6,ola5qtbuuu,otp7yucl9y,eel1loivjl,niwkyful3f,m82pv8bwe,20jxbhurhe,67rvlup4sc,3bz0fuxjck,by7j4n28ox,2ysqonijjc,cehg3i7i49,e03f4y6pb4,7u8rkjn3se,j8m0w4201y',\n  'frq2ailels,gxz46s5gbo,b5aa5uikgg,ykznlfkz0v,l5boa0000e,347l7ponl1,lfz2mxs0jw,edbuo29w7j,ee2gvkgb9s,7eezzyyw8t,i81aass13d,bteze6jfdh,ailvyozgy4,6mak0o2ime,fm7k0we3yz',\n  '7kxaay9xcw,nhboz4phdu,uheea0ahwi,vrheeurh9o,tbkhe6zztr,46qlyo30sa,5zok62dgqa,4cvifd3adv,88yofi7wik,3oro8ffagl,ap1mri4l8l,2pgzzemq3b,jargu8y0ps,95gyia98jx,bpyqr4m56j',\n  'spx3qe9gvz,kc46eic4te,ptfkdlcy50,pmm0dv1b0z,c56yziv3yg,jvt0ojrgz5,6nvh5lhwel,138rxhmg79,awzdbtmwnd,53jicbsoc1,9i3yxjowwy,2fk3hg4j74,56ksm07bel,wlu2lpmwc,l8o6pnqdbt',\n  'hr02oe750c,ge5o3jqsth,s0lg0ous8p,l9t5w68ici,vazqjajg0n,gzp84xu3xg,j1f4oro2nh,f6prasj1fq,hemmy8tylv,crwnd7st6x,dlt6ghwh0b,e30hlvnowm,kav1ue4fm7,fa24ztrmq1,k1uavs9yq0',\n  '15ktisvac4e,rddovhgagm,fy0qknlrzu,lqfanx7ix7,bifpfmu860,kdw44w8vuw,ed565x982z,6590l3oybx,ae316ww59x,49u344m9gc,8sruvztk2x,bi13ys5b0l,c8g574sbte,cv2gdefopm,ap7za1r6qn',\n  'o9uxyv9cod,vfbfmqiqct,bf56j3ele5,pap8r9vd6l,6479gg0tbi,jewgn6k043,3btj8f7lzh,7i8wuca3e7,6g7n65qkwl,ezrwnxsle,1qscpkpp4o,ha0d9ytsa4,icucsapuai,bmiiwauatk,cq8ejgx193',\n  'iu5r5lhnkw,qpj1lg7grd,llo02ho3yh,9xmibug31c,gye4dq6iu6,ajfbo5w3kb,cj26raoadd,it3cgbu0ry,kfqc2hccn7,bq8fuh6ltx,6tm0eai6ty,4xap23rhdf,kd4go6hw3h,bfyn01dlft,e1tobl2cst',\n  'hx02gbaa9a,qxq3ecca54,ha55qiq2de,ubzy8tz22f,1534xj1z3wk,9rnqltgkuf,7v84to2802,hi3nx4x5ts,b69dcd5tw4,joqzx5zcsi,46q09qv4us,k3aavs166m,g9h4731is1,erw61jubep,cch1k0r08e',\n  'kqgabxlbfv,dnu20ziqni,zruqa25sqw,ls0ujq8jq1,g1gnq67nc9,emgk3codaf,a2ev4o4akw,4yptk3bcfv,9h7y7zcg03,5tg50j0u3i,2m8sk1i2jr,bqsies6qaq,ve0qcnjoq,563z0spa4o,ch39cvygpu',\n  'yz6vqt5upg,ccls2549z7,fuo6ojngjn,z8iyzg621w,10xi777yih1,d6jdqoigl,dts5af06el,5p2galm1wq,h51bdpvjm8,kmsz5qp0pw,87cujat71b,jxedl02d6q,i98j7hgx9x,8eovezbh73,fnjhvfi3x6',\n  '1085eflcsxv,czlyoai7u9,4wciwdngx4,q8tte073bj,bw8ywvn2m0,gah4tcp1eh,8xof3ddrvg,18p4y4xlyo,gzxggm81gt,a0qtrglbx,14kbhkqvsz,58u9281ya4,14wz9zrx5l,lktkxbysn2,3n94gveac2',\n  'axv9tdfg9x,jurj6cjh73,ibi0cmkon0,yttj1qagwi,14qht6c1spk,483bz3438o,9lq3bwy1ah,2cblh330nn,gakatd37ra,kwdfpugl0f,km6rfs1unq,7fkaudlzbr,dzhi1ksp8t,i0nwparsve,jt5adaqy51',\n  '6nq4vsekz6,s2cfwwl4zs,bv9eakscpf,r7ndz1juf9,l0eygd6ntq,h4v8uj740,csjsb5whm8,b75e1miunm,f423hi3yqs,db4h1tub8f,ir3gowe4wj,fnpq702cta,24hkm6qrhy,k4dep4cdqd,jemdvtkh54',\n  'naee4qp81a,kao7fvgmls,il1zozbrj7,ld2mok2spo,ndg1noik7k,a1ktpfqq7o,ces1bm0qv7,3lzplgcfip,5rhdjvxtes,3elpg8om0d,9lqw48pucl,ai28oxlqaa,4hg8wstcg,bns5yamn70,af5w7n0m27',\n  'e3frcj98nn,jxqp4ecic5,10w009a6l0v,apla2o383y,l8j0basrlz,95el11jr5t,2igc22c8f1,701rj40zlv,221r4zwmw8,1tp7uyfomv,83z1ufzd2g,gr5re0kiy,2286jvriu9,au9d7ja3yr,6zydddis6n',\n  'mr98nclixe,wgkkmbt0b2,jqgfx7ib8f,ibuhk6h885,uzvskmreu1,fea6yi6zzx,i5kdshnvd6,j7gric29pu,8z4437mt25,kj4hdfvrbr,e253fcb33e,11nf5knv4h,f3q0y4xu4,bzhu0dgr1d,ewr22x0z4i',\n  'ywd19ly9q6,nbdtngcbnk,pa0nmqh3ro,i97iixhffv,macyh5gxck,7r4aike2mt,kqiabxvlr8,b4pxmzpcpy,h7uj0it8tn,iyc8apfng,5g7ske2e96,23n72h1fa,n3tdwb73a,68l13wmc6h,5o6x1z5o4l',\n  '9s9nlfgome,123dlh2dq96,fwr2gflrsf,ord7n1o5wh,k9v17xxk17,2gz4iy699c,gk3v0atjx8,ezhhvr83xo,48zjaowtq4,i9nh5hr4vy,638isuo2ev,cdquf4szpt,1zxv2r4m08,cm075c0d2,epw412y4c5',\n  'gh73lsamw6,nq73q4a1h1,pyf1gxc58n,r6qdlz22px,wtpaqpu644,frdnyhcl3h,a1enkeyj1r,a9bttrf2ge,gjo38dbasz,kxx9t92lwd,8t8l4lybu3,11m5f6jthi,9xyvl8k4tx,34o9skrhhs,jkbrg0wqyw',\n  'hdqn96chtz,s6xplkk4pc,phr0uocbva,dng7v1g232,lhkogfzt6w,b9ru4rt6xh,lsjyzali04,eo1o0kb21x,6jqiw9as9m,b508dnpq4s,jqma6034wa,h46h366wbn,44h4uakuju,acgytivsre,5oslg9eo6k',\n  'lilbgzzubp,cw3l4jf26p,orefmiauxa,13c2j33ujt3,tptrgk4vl9,dud2j09077,h9yltwwe5q,bxkhslsxkn,huo5p42ch7,9tpjj5ds50,t2vka0lzx,g7lkyb3cu0,61bo5ux45m,cx6jvab5ax,sptmo9db5',\n  'nixjr0f31t,3z5iljkmdl,fq994pvt55,t2vizuusgs,l0utp5sx2e,hzggnikzge,2z5mnjks8e,ej0guqi2xx,8aol6t14a8,e5xw48m2ci,6j14wapx1d,g8mjzwt0o9,abhl0890u5,66wx4tj6xx,iul0zrmrmc',\n  'hoi4cnduo6,30s1vlrxmn,sssh46o8tm,rkypp0ea6n,ga7t5t78wz,kgg314tvhf,23die76xu8,6n7n9ty2w8,8mc1ekaude,kaejpt4cvi,dzi8t7fyjl,a61rafw4vq,d7o8r6ac37,d749aym99r,jkvq3j6l30',\n  'anrr6zjf0c,p25ag7porx,12ai91caoi7,gg2dkq67kz,xicih3tqpm,w1z8ofbt8,i3mwtzwxvf,5mi8hnu51v,g5b5ijoyer,2j8e7z2atz,f1tjl5o0i2,exlpcnwdfc,7qyv2jmg1k,ef4sfnbrsq,gl7wtu68yr',\n  '7zlbthbs7i,renlhq9t02,hf3bdblzkj,t92foykinm,8oauw468h1,hkkqj74lwl,49suqx520d,bof6fkfdm3,eqbcgzniqg,h1vh7g1z6c,46m8vf3xio,dcnr0za9np,416ymceh6p,4hiprsu6to,fx6jouqojc',\n  'oemw5db5rs,rdj35mmt1p,mxg84cjoix,14fxik5lqz4,cyj9x14j6i,fxbsr5dkv8,h589xgxeo3,6kh9thuii4,kojj8ix6kb,a5w54eqiqp,h9q0fitm2p,2fnihwjk4x,hwvtrum0ox,79d2p0a44p,a7w8kuy90o',\n  'hcs0sb3awi,6mtl0kbo04,k8a8ws3gj4,k36exobex3,txmtk95k0p,g0sfuchmji,glr617fhfc,cwbhuukksn,734a7qrn86,2yd34prhzm,2cfcv9texw,e6ljsluuig,202raasg0o,e5njk1307k,zzioie2kz',\n  'insqk5wz3k,j1nsc020ha,107ifl1u06n,oz31epigxc,71byjiqb1c,504x4pmohb,gnitxe51y7,lct14zo0pk,a6x5kxiipx,j2gvlfsbyw,3ufy35vu0v,dosk1e0e7g,dmapybao43,4ajqsnrzcq,ij56k93hsa',\n  '10wf58wzlq1,khxnbktarf,wcahofe5w9,kkvi8zy72f,pf4tdqbk01,2ejikb4ipt,cpk95d4qet,ilhlc8gdme,c5e05fr3eu,2dgvszt2ir,cgti6rb3f3,bay37x3342,8njv5euf7a,hvmij3xrot,8y6o6b2at1',\n  'otw4gj46fy,9e0a2bif6w,jukb0ihluy,ddi8b75xz7,rx2mq0qpug,m1yf09pnn6,39ayo6a3fl,45oj9q0qju,el2ina37vs,63q8pxnktd,de4zyzrt6p,hflyglpnxa,dqiab16xbr,hv0dji6plq,55b6cd5rtg',\n  'ppsxyuy9iu,6yoz7af3om,cxsmjwo6m3,sqsd3cn1tq,laazra6rpt,97dbsjnsdr,49qurk4ji6,gcq7td0yh7,jdqjar2v6n,8lsddyyzhm,9bp6u2e02,48qhu3ibr1,et8eo2j2ar,hccl0xg9zm,5c6x9c0qhu',\n  'hcmfu1tcfh,urck10gr5r,zn5jjudqg1,sni7cqmuhq,dwd9fq9f35,5asuwwn3ou,e1dgbswfiv,5sjfkc70qk,eqnwts1shu,frx8lgr2yo,8xofbesi7r,jc1mqaaxc3,6686hieia7,cbcpxp3sau,9g98idtp9b',\n  'd58ox9jwgt,sfn35a4dc9,q4fpaxhxfa,r86vqku8gu,98sdd8k4m3,2x65u6w1mw,k5sklfk8yr,kg1gfs7f3n,28qqca6pg5,frvt68uogb,fi8d3uxihn,dmopfieq2f,3vjdf9fh4r,lc4jgubvx7,fagc0qczxg',\n  'fy47gffz5v,fioe1nzw96,tvwco8x1fp,h34ewzx1of,n6w55k0pbe,a305d4bhye,9f9cd7xrw2,gn7ernvjgl,kp5vjtaf6c,anqa4u6xht,ifj9tmt7pp,gxgy1zmh9c,flhqdbaoqe,8400brfsz9,m3g5njae1x',\n  '6bmenc17zj,wtwuk66t7n,306pkjligj,phsbbkztx9,lwl048zlse,h2pj74maj5,2key6n0moq,1jpp0dwxqb,9dncspw57r,26zdhyfygl,by0hkbitcz,2tnkbg5kkf,kz37k9votm,31atnpsgam,bzm0pwxfhv',\n  'x31ep9rzk3,i5gm1mh5sr,fdko8svth9,ao9e048vpj,idjd0xaafd,4jb163320q,jdnganfsar,4w69dcmbh8,65rgythenz,lfn71gyvyf,gaxk4tmz85,k1wruyxeip,6k8hqbs0bv,fwq4frkba3,eus12nzoi5',\n  'm44eczuqsl,af4zdegxtw,eb0c4syp1i,1302ddbifio,g2xlxl71ww,9pqji09v07,eua4uwfkmi,ceu32n1xm5,kech4vh7nq,6upaz0bgmh,cx6wb3zsuf,g3noldwah3,8vpob2ld8p,5reomvrp80,c7s2lq5954',\n  'ms5a3os4tr,etunynf1qf,9t2ek8392f,69niqx8yh8,eqxcp9aljd,2viq909wb6,bet25bk9x0,kb4ut8j3fe,j5tix8msuh,h80zog1a32,6g2dnfr6ji,f18myjo6sf,jrcvnwm2za,lm180od7bt,eaodkm18z4',\n  'toqqpzy8sp,t2c0twsp2p,pg9aw7mh9n,op2viguj6r,pfahols9pf,g14dlw83ob,kesfz2od3m,g7w53ada5q,8faywlic5j,hb7c4qzgpw,fwsbyj9w8v,2pl0w930aw,98dhlpfoek,cxlg2dmh2i,bokgb4z9lu',\n  'fs8oa8qbnq,keiaaeg0fu,gnzs3f8o3i,ojtrxfuyfg,capr3kh9bl,3yifl880q,5vgq99zacm,lmjhr27pg3,33kfox995v,aumqp86g2l,dvgroggi3r,osrcul6v2,6rwue2umkw,cw9l1ws1rg,1h9vlnywj6',\n  'jk09yjv35s,6t6xuz9fkc,depzn1a0l1,y24qkcs7p6,ah0gnotoml,bu2hcywcrh,lnejoxgm2w,bujopbtlq2,4tf7606v62,lppesk3en5,k198nuarva,kgdegjo177,1gmcbhnqpl,esntqhegkq,4nqawz7urb',\n  '4nbdlgo9bs,73hwyp408x,ryx536vusb,v0v4yqjawz,rqdzc0g1w1,2hufv8r04b,1nnuhr7dm9,51esuu7dmf,afc2ms9b0v,g7rgc8gyk1,5uxxy4xcff,eomj79fkor,2vcutm1lt6,fg8ae61ram,a5lfr7zg80',\n  'yao322pm6r,f19dhmxkzm,rcpymt262y,4i6ref1vvx,at03wazwv4,ca0s2tj6zy,submp774f,5862dt39c4,1m0exb6o27,j7hapnm1p6,1vw4w2ypo7,5b6z2c6ii1,a24qbyojuy,a3wf315m1k,hgludctxjx',\n  '14t58h8j5rb,5t78q90nku,13pxwq85g18,m7leylg8g2,qkzaky3rwi,lq69wn3bkg,5gc87slhpd,1seiujxuje,bcqxlk4j5s,7nz98bd4r7,gsu2m4al3f,ike19uvid3,8re5gmm8qk,5f071027sd,9wwibm5au4',\n  'vlx4hm1urm,k64s4794iu,xidey8o2tr,94ncv4bdwj,15cpjtnvavn,9rnlko0fo5,4orqr5oncn,jfllqdz6xg,jxwi02r0ma,lhkfi156q6,d87k6surb1,cyhz41ar0z,ik5qo7gy3z,hdys9omw6f,lmz0liiges',\n  'ut84l1278i,17gzve0r8le,ipl63h3f8r,f1wvaabtw3,le62ka79ao,hglo2za5xf,mx1sehcdb,d475c3zbx9,7dbgivcvbl,8tff0ukel3,jp8li5k158,5dqoxtx8ia,453o9gjh84,1xae0lj65n,jaapfvwwds',\n  '7bf5c1tyg6,xl51qxter3,pikk42akql,nfnk8bkp4i,trayq2wcru,1mtn00i3jn,14tvrk52g7,airzskdu3x,i54v15xuga,je3bvw8ss3,5g4wqmxkbt,2b1g5squm9,4rr8qm5pl1,c73wp9je1e,jvbgosxx8k',\n  'pf85kzidhf,c9ck4gfhql,ytrn10j4ny,i26bg8tlxd,93itsyd59j,i9od14i61s,8rhtalkt9i,hdjgc5417q,1y5fxen5bi,gx0xkr3uev,cl2jxykvim,inepwvt9k6,9q1h2maw4t,1qvvj6xhh0,7p15nbvwr1',\n  'jnqiyc6j9j,bqhm5kemg9,bw02ba11gz,r8evj7cfep,ov5doea7nc,7yqdb8hxmx,9r7sh2j7ao,aoec0sn67n,ambgwgbsr1,2i7ufonmmh,62avy1hks5,5rqi5ggov7,6ttc2t23k2,jcdbvum730,danhah4jnx',\n  'wxjih1ixzw,73ct2gcjrm,ofduscqi72,k1pp5yaewu,juisbrk65p,d632arpgni,jjb3wf2a2n,7clwhxyp31,40e4oqdu3k,h4y3btye50,1dx974ivb1,agwi7nodl7,b6u44tm3cm,3nvlu9bgyv,4cw2ynxnxi',\n  'my6ybkqyp5,3pkc6nt45i,k0hx8qrwcr,ens3aoajay,cyxpavkgwv,cpb3g01bn4,lc3nx0ehcx,86x259d9fi,8kq770022s,krewnij9n3,iu0321hep3,8by8hkikje,k4j76j9egm,9s2livlpl5,45baaoxohd',\n  'q3rlduci2u,rbwk5gavcj,p0a1l2w31w,pd3uituzex,kwelqrqfjw,bd2t7zjnte,96a1vlnyyx,g82q84f5hg,8ivz5xcfc2,ao6i8uz7ah,9pmmusxdc4,ezmcx0odyl,jlphwa79bb,4xrxugx4l7,1ydjp3zcmz',\n  'eqfn3yrfxr,13apbwpubun,xa7xqkqth0,s3x8w1dxkm,wyeban4dow,7xkd2p6i4h,iml0c9yhmf,fmjpo5s9jx,73yxoqfqm1,3q1mtdhwdk,fn9205cj33,9mg28z7mym,d37533otoi,kditg7x188,fm6xmpckxn',\n  'oitm0jrpdu,jjvdx1nujr,myjgtjarqk,14tbbgd0eue,otmy4t1236,62aeofazf0,m44l1v2naa,4r1yzn9frx,kov0thhvho,c7v8fckmov,e5tbh3lqzx,8lwh39s77b,fyj20hzgxt,8j0y7rbinj,a8stcuy2fx',\n  'nntldk0j4s,p3e0y5hof3,ojl66ab4h3,n7xz8yniu3,vjpkw0fq8c,iug99xiee1,jgug8u5xmf,jfc4gqn8ik,g8x3n5dmnq,irkf3439i3,8g742g8scm,61ut7iwzlx,atrqcu686c,69sovq8wa2,ajf7vnnu3w',\n  '103qguqczpo,zb04kw3fq5,nd5mmxh498,pvqyjfbcwz,yajy3rpsou,jmvd2xikz4,ln51ch334y,m99c6erhl,ezm22zhwtl,9d6hwibwcx,8e43nurbv1,493bemt3ep,3nf6pex43x,4b48jb15tl,66k1o9mwgl',\n  'ho9balwpdo,pgzbfadui4,d0u7xt9bbj,8fgv5vi7pc,q47isompyp,96xif0v2am,rnra14k8d,9499g30imd,ehnmg47wk6,bz6vbi31k,ekdhzcug57,20a17vbd2g,6hw0yqo1k3,fq1yt4muj,cjfzllmd0z',\n  'fofrvr3fh9,vryc1c9cwx,n3bgjlbdt9,pdqi1vx2f5,svud70layj,lihyqu80j7,exv7teegw2,fc8rvsclcu,ldfc0j4nq5,7cwfm4njcq,hy9nl4872m,b6m3j2x4g3,h1of0wd82t,a5outw7ye4,kwpxh0g17h',\n  'd96n9evb59,k7m9xuiuy3,gx0x4jbsyc,oj6lmxy90q,y7k7y4l2oh,46kjemqtxp,2rmgxochzz,662aixugk4,9qzt60m1t0,do7puyyvy,1w7b69q5qi,adxdndzrjx,5r1mwlrj64,e98okzefzp,l0o2dkp81c',\n  'v7mu0s99qv,yhqsvwzix2,5x8yjg23yv,e0cex24atn,kvu2dxjdax,fsc82zd6jz,kcdxd5vek3,hmdbfdvigm,l4l7pksruu,jjtu8gzocu,3gzxsy8r7o,8fr7483t76,7tf85byb66,x5t00s54m,c15zpq3u7b',\n  'har9bt55f1,8z6jvmz57l,qnqaviphq3,13gc1sfzyga,83jvqvwkau,arsxe6zn4r,ioi5q7lu3g,eszfuxcmr4,ipvazwtka6,2w8l5vcmv5,5scksevemw,azw76qcmmf,3dq37xsi48,97z6ejwjrp,g6nqtysir8',\n  'y8rc5e30ei,2mzwb06wec,t31080lj1w,w0v9nnpxxn,11ans137o2l,k3yiz7mfuj,ernfpnjrv,gi7bokk180,d4uoogsv0a,hdw38e7i7q,eb6oeby1h6,fm48jnmf51,egtrg24vdb,cqwvunfmz8,k4607addbf',\n  'htm6bblpft,ddhqxcsvlz,jl68jep7rb,mt1rrs47rd,tqdvr1zahn,idhd4ywqpo,gdmsr5xsdo,e5ma9u2kxs,5at6tqxn0m,bxvby5tgyj,hf53cry47d,fdoqgji3cq,b34ow2oku,5a2e9gow68,jghbivvd5r'\n];\n\nconst ed25519BasepointLookupTablesInStringRadix36Form: string[][] = [\n  ['yuw1d7ohv6,ola5qtbuuu,otp7yucl9y,eel1loivjl,niwkyful3f,m82pv8bwe,20jxbhurhe,67rvlup4sc,3bz0fuxjck,by7j4n28ox,2ysqonijjc,cehg3i7i49,e03f4y6pb4,7u8rkjn3se,j8m0w4201y','zrpka7v3dj,7sbrcgoldv,kcrfmh0vw6,jngdnwzuuo,ffaecgsnv6,4k88ogi46g,49hadqy2xf,fuxafdco3o,7e669e1ryw,innyjc2u1e,7dascowxnj,a68qwx78n3,dqubw8eh0v,fv8bqjp8g5,jf2tu0y91s','frq2ailels,gxz46s5gbo,b5aa5uikgg,ykznlfkz0v,l5boa0000e,347l7ponl1,lfz2mxs0jw,edbuo29w7j,ee2gvkgb9s,7eezzyyw8t,i81aass13d,bteze6jfdh,ailvyozgy4,6mak0o2ime,fm7k0we3yz','976bdqo49r,i6o7kyisy6,bjkv11el23,9wyqgwxvr1,i0w0oduamw,gom08balz3,h3bs88zvlr,6xxchgwc9x,6dpia17pmr,6uscau35ga,b1i6z45vk9,1wdab57cci,1vgby0s3j9,jmvf5zev7s,m3sark80nn','7kxaay9xcw,nhboz4phdu,uheea0ahwi,vrheeurh9o,tbkhe6zztr,46qlyo30sa,5zok62dgqa,4cvifd3adv,88yofi7wik,3oro8ffagl,ap1mri4l8l,2pgzzemq3b,jargu8y0ps,95gyia98jx,bpyqr4m56j','do7rqc9jxt,34a8sjcu9t,q1yoxvgthy,c40ypqqa98,e6p5gi72yr,2m6pd0of8,1fts58kysz,302urp1gne,bsyoypjlao,9tngdr3z87,bmqpyk419t,14m2btshit,2l5mzeky2o,2m6qi9m8hw,2wa1bbu2ty','spx3qe9gvz,kc46eic4te,ptfkdlcy50,pmm0dv1b0z,c56yziv3yg,jvt0ojrgz5,6nvh5lhwel,138rxhmg79,awzdbtmwnd,53jicbsoc1,9i3yxjowwy,2fk3hg4j74,56ksm07bel,wlu2lpmwc,l8o6pnqdbt','16jgl91bzp8,15j6ks3tgdx,9fhif3p6h8,76qaf20ai7,nqupotu3ta,kf13c5xmft,azuwoqpn8,2lra2g7d22,2fx5kaqxiv,a56zc86msg,5fld5lo0ey,jl8dh0lgxk,7vzo5h3dtx,k7j7dsp6dj,6ohfdu4z44'],\n  ['dh94ohfifx,tycn8u1pll,qha367lj2x,l3h9zz7ob7,j0v63797fy,9e1biswn6m,ar77a6qoq3,dz9niuls0i,7xl7ctwsdp,8gkkcm3goh,btmwauwh53,7514qfds8,efiv5xmct6,g770la6s6s,2wm161yxr8','h39e6n1w4y,cagoklpsic,bv1rxwuk2z,9lzirqtx5p,mtkkpb2zr4,afruobzra6,fmhdqjnd02,2395vmts1q,jg6pjdkc9v,6kc0syvmnj,ar2temfuh0,fhjo0h9luq,sp86x9vpr,30gyrb7wfa,eyydfd7dda','10qzurpzvlp,evnq937me7,yfa28ayg5g,p68gaoq5vc,pt1lomuhbu,l6kzhf7r5g,7i4eq3ko92,gmden4taaj,83qu5uvq2n,8xpuyf3mpv,k5qkk8llg4,1npu3bjkwq,fafobvmq9m,3cuut5imgt,3jwe4rm8jp','jis49op0v9,ju1jn7jepo,nfw2mjwkmu,123nm83ftra,n7iq2u5j2u,9ngpfvgqma,guxzvxdz3c,5srd4n7cc8,20f1kuh4ta,8ae4t5rdqw,1y12ekxn19,4h7w66ddp3,jc3ckokyvi,kt4lt5a578,9kboobjzo1','nsksfoqlxs,m7aza9cj1j,xzdvj32uz4,he1sm0dy6b,ip82beuzgn,77kcybzftl,ghj2lrrilz,lhm6mqkrx5,dauohdqtje,5hyggq6g7j,kpk50tyufe,jb1rae3nxw,71hsavl7y7,ebpsldplxp,egzqbb2ut','c7ahiyqjf5,h6ff20410i,7gxr2ptf0y,13v3g2tjhxc,m6rizjv8ph,lz74dsk7f8,9pzfj6a1wn,ktwyoy3iql,hwzrtbwrxb,b0rdx2s96q,35hgkho0tw,992cnj1jf1,6bj12nrz8f,j04q998c7k,38ogomgl1q','vtwnssh1n6,c8fbfb7r38,cblmi1qfrg,ap69q97pyy,jb9oy3z71o,2q4i5vqs0d,f4rgiv2o8u,cunqgen4sp,lsgpzcven,k75hlmu13m,87fllxn1tx,h8f33ur9pn,b26yhl2khz,1tqv5htj3r,2qkp5u3hmq','7tmvqshpad,i7qjolxq66,mp3ulfhl4p,cj0m1oqvr4,baoo9bayzv,etf8rdk7yc,bugmszg495,5j9fa9j8hm,2p8qujissk,cn9figu4wh,4r85ivc4j4,ku2xy8s9w6,aod0vdyax,2vnyedwyof,bdwhaxjkcx'],\n  ['vb9ytzdhnf,l5akheyksj,ebznnnm4c4,jk8mqzojyy,nzuhhx50h5,1ctlndaym6,6yhs52ebkt,dnnwi0noff,jcrgav8zf4,dmv1tosst7,4qjuybh5l5,k7u9vc6ee8,kc4gpo98e0,631o9u4zyk,aw9a8d1qal','t10hg4c4d4,uyuer1zywu,bb5of9crmw,mfo80opxpt,lp8j934ex4,6h0wyj2ylz,9txsjvs0xm,9rlhiav77p,7zacvfl9l5,3dms9021oy,7snasyzbhc,97cibxlx4r,84be3f1ec2,hboe9cuolv,3k5gr7bq8u','jwxio5507u,16speki3txm,11fzdtrcjkl,ok98ohurar,t0whu1mhgp,codjgcxanb,lt9g988l3o,fagtgcjdaq,ge55wqkls4,b2s45fi6sb,6o4p6ssdwm,9qrzxc3ghh,hw83ls0dw2,ad81uldrbk,b9gajp7kqu','psdqdinq91,pb2jtljyub,t0ry9lxexm,seylhe8j6n,mewr6urg09,7m4szujz1m,hvhyo4g192,3ky37kfo6o,5ba6ldgut9,7pne2aulmd,1s3fxpb1py,1nvt14itki,7dahobfaw6,c319824nqk,ffnvx6itik','qvwp0ba5i5,kb8hmjuiba,t23ygncn87,pp4r5f8tpc,ckro8ei0w0,jjj5dv9fy2,amj56h7z1h,aebtidorb9,gcemflo4zz,apuncmpkaf,5puqmbag33,i59iusqq12,bla6w1j0b2,kfota1xuvg,ct7ofzdnez','exa47nndi3,fidsx13bmz,evc5p0p4be,o1xel2hrfs,nbjs7f2yk4,cr56nb0r10,gvtpqs8vma,5de5e0y1dh,k14ztl3dlk,ewegkpvwkm,29s2yltw3a,axb7huzwx,7hnaqdh079,3uhag68u18,5n9lpyw778','xopgcwupej,orhbwtik0d,16396kx0h2n,u8trrclfsf,163lwo7so60,kp6qaxlshr,fgtakbrn76,carjeb4kw,jmj9r1fe5l,p1ewi6t0n,8sxyyp2no2,5ehm7mrs4p,8bng4igtgj,j4h6d8ls0b,fwpm5s2ww3','yumy326k2y,c1ae74862f,i6iu0u8d2e,bbsio5eb12,fvy2f0ulxb,7t8dni20g2,cyagn3icqb,jf4850gtht,iq52s4r8dj,3bwmuovnd6,5f133dkuym,7nzqbl1kx8,kblfo5gtxj,14xw81o79p,k3p91wb7ke'],\n  ['728ujlmhj0,542xg70llv,khfxrrrq8s,5c46q8xkdt,7mh5fw4v5c,2krqb9m34e,hoeee5g5bd,eqlk9sxvxn,4x559ap8ik,3twefztckq,jnyd55qnwd,gwqfna81ep,gl1f4qxgjo,g6wewru102,iadvqgkzmz','10p6zwpv60l,mxgsku1nh6,x61ksck1oy,jpuc2se4nt,tbdqmkh602,jwuiuek5hr,75g7szubab,33s3ing83o,afafdkho9x,e9cef0yqyt,gu6136t8m9,inr6l79wbx,17y7fkavhe,ba1wksh3fn,fttc92dxde','rp9oi1miih,ajwblcnb0c,ngt37lkevy,j63v0fafbi,ubqvyke0ff,f8w8v1hk09,4csangzcq4,9tsc750itc,5g1hnxjipt,6ckk7f1xij,e8e9q1rakg,lwvpodjoso,907ip3u661,ahf9boas3g,gcix9x92kj','xzg8mt2ry9,mepoxd00lg,mttfre6pis,mqmfn6wqhi,rqi74zk76e,8mueljsjdk,5glgfurhg6,9yqs90cyot,89qp4tdr5f,dxec0xxfbx,6x7jmcfi35,ch22wodk8a,1monltos2t,4smgulww7r,9yhgp887kw','fz982kuprb,bdwofrmltu,14kqy7771hs,pe581svl1d,kmqj6nxvrv,3apgxi2awi,4timaloa3c,19s7okrfd2,gxz4sjzoah,63nyc8ayue,g7ngp1w0iv,hbagdw5tzj,71ctuy4m0d,ei0y4fhgnj,8uo0i6si9d','pgdm4rk23g,p31el0h4g9,go5mderafd,8ze6s379u0,qt8h854asa,hu0k21oczq,aix1yi512a,2unlrpvzmn,jl0xsj1juw,8i3v2aqnkv,8x90ef673c,krgmukw211,499s5qqsi8,1he4jqg4rp,gtrjtz0kuj','944chbyjhh,mdsdbfzofg,147dwxjlae3,5x3bptpis0,ptzter8hhs,ekjgb1s8zx,h4draqaer7,obzmkzmvr,l4vfq815uw,ca9cdvv08f,ig0oo6rlk,996vz5xqiv,32lplj5a0y,l81im0hy3,c4h4hzxlj7','si8vt4qr9a,p124j63nml,jtqxhpuazi,pbi2uku6pm,q1rioppswx,19uqeh4kuk,j14hedgpqh,bl4f7gih4x,3x3d7n7kpq,bj08r5quk9,k7d6yhfd31,1771oaxr0p,k62lr5pobr,c5uorc37z5,53zpuw0jpv'],\n  ['1208u3kae39,q9l6ljzisr,dap8me5rq5,k2mp4jjwge,wa7byme12w,i3e7jt0ggv,evaq065nhi,8x8rs8kurh,hxihccw0iu,5kepqvog5p,5ow60y44lu,k19ybwoli2,kyng07k2j7,4pq54f4km1,lmh7hfcd1a','g2x0lft8tc,ukhfklfsuk,f8znpwgy43,cguusz2s9l,x2o7ko1wi5,4jtyuynvsm,hknxhkwz24,fv64rbs8mg,cu7gyvnw50,6yti5msjwg,a88fl043sg,dj638puel,7ezg785ga5,b6peazqb22,5v5te3lrpe','101g8dyb7p6,lm2266qmog,ln95gu8y9t,agfmt5r1y9,g75mjgz01i,1nzmtslag,g81fuu1lzg,abbr7ein8l,ixvdq46wi1,21d4uloe29,h8hr0ww1vv,dezgdbkz65,imk4qzjfli,9iggin7g72,a3auzi4zrt','o9lb5bg2bc,b0a35ca4xq,ig9ar35vrk,zzswpny9mi,nglfdtaluh,69q9sv1fqy,cfevgm1lk8,3ukwl1s76v,gdmsx06kem,5j70vftk9q,54l0sifqil,e8o5qiobfw,2p1cihnrwz,fes5pm3cm0,a1cnbtd5a8','vamfenucwe,xwo8hd0xf6,789i34xkvm,nzfkun7vh2,13sukyxepum,ef6btlw6n0,elxvi4wsmt,eylly9621p,bfoxhylow9,3zvurxi26h,9t3i9avt99,7u8b4j60v9,1978va177x,3dzr23mhsn,623jnqcr0u','tg1vpluba1,ljtfkj8pxb,jb872ugg1m,eu0xl7yc3n,xiar83fnv0,64t09vg3ij,c03fwao5jf,cnfzhg6osg,9k0ihpx5pr,3gfer5pkyq,kcz8wmdn64,gir007f8ec,kjgplqq6kd,2beh4thnme,dy1hova7r1','ry7r33f4jn,p76cjwcssi,4ihlr92fmp,s3m0sa6bp2,wasb2pb07e,6oi5yu0qx7,juufpddzy8,w8yfkwg4c,a3zc2djx1y,623ftl246y,2yrx6kpe9i,as35aquv0w,bu6bntua9z,6cejktn8mx,g7tz1aer27','bx69crdgy3,dy58vclrs4,sxjajoo9j4,yfk3xcd57a,witus0wwxk,b6jdb4r533,gkorhkms82,7kn1mfx1t7,kjo3ak9fja,8v6j1awt17,jeuf32h1xo,3ygqomxhns,4f0wfut2an,dvmdbthx25,byludmjapn'],\n  ['dfiexkbqrj,ioluac0wsu,loxl40yixv,nlralha22b,dah9zg04oa,aai46jf52t,8212x8uqj3,67hxrdeohz,ggovkkeius,7y4oemnzut,4bybqkhubx,3syck2ujh6,dm4miizmko,31ujc6g5gv,lqllxpyozr','y9ubifn1xw,v8jcjxuyzy,ne54ajlb49,svqoex18o0,dsgg0gkpe4,jq9xfqdvr5,1oaaxzopr1,b8ht8wu17n,emjch868st,fhuonqae0l,76qa1xat7s,ciaigcl0s2,17q3m2fr6o,476145xt4e,lm9l0mctr4','cikxrs5dog,k4nzhbda3l,moo8mja2v5,10eg5moawj4,vgasd49u6j,hcfrqsa9sn,5qs89uopzo,fmfuuovgfp,l8m24du6pp,biz4nej2fg,8kwunchhgn,ihyutarbr6,m2nvkzcgss,5el7npjpnt,6slnf1f1li','p3jjxfhqoj,dgbvikbar7,yzfexbp2sh,5j5q9c55gl,f3llekyd37,9uc7804l5f,b5k1zz9cuw,kiz93qkma5,4md9cyarss,6olwllthvn,lk355o3z5q,6w24kkzkz3,42b9cjvo9v,ejxu1i9ufp,m3o5s23j5o','1315inxddn4,o6nkuzdill,100hlyuw3u0,q761yw8zlu,unfa9i6yeo,509prpl4wn,9iqwt52j9l,m0ulz0gng4,46hkr7zz4h,kkl2qv5rtr,26fanfol8l,bdrwckiuyp,4u3h6tydm5,5c9tfb229z,85jc9i001z','nop5j43xds,csrlxp5kw8,q1jdteso2e,af42745vml,9teifw4x27,5i6gxp59u9,5n6a7a2tpj,g1oyvp513m,ds70ar4doj,g7soe9pu46,il8695ya7v,28zyol7364,eghr3umska,95usa8k5gi,61h0f8s8m6','c22587dea6,fj0aarcuzh,lqap8u0pgr,65uuon03rd,oxf8zg6evy,alifr1t23d,az1htkb7az,1ue32xhk7t,2grxpkk6jd,ik8r6qvfyk,8vwpkc3prv,r7edmpbdn,gbope2cbhy,dzfki5ty9e,d73r9cbkzk','b4egc9emzx,ysmigysabj,9tcnxfine1,opltbhyyg1,xi50331xt5,66vbgzdu2t,j4qzka97xd,4lte2xl9su,ark24967tb,2bg3mtqxt7,2c5rqc9xo0,4mgppfwclx,ew3i9ntitz,c85l7vadcd,4cj9kfhoxq'],\n  ['139pdy5l620,75j7vms0l7,i1v2hk6yhb,g1l7ku790b,sbj8n7udz9,jb1299poa9,4w6pgp3yde,isz93l8bdj,cionuyynyy,luuh0u37bg,f4u182kqb4,ddoe4rzxnq,kzbhrczyoj,85rezzzsn5,joxpn6dout','66z5yc2pc3,atif0mw30o,8qijiipey0,106n6lgjqah,m900xomxl4,hu588vprfh,esdf2oo7nd,lspowuv9pj,3jghlbrh78,cw4endbmk,25lgjhnurk,bwns91mydi,j578vwqucw,b4so3sed2t,d7tcotnpjp','dhm6ond6jh,dr0dvf8u75,13k2i0tg0w8,lp4r278g1m,w02o12vsop,lypuarnc21,d9vy7iruvy,le7obpi0gm,e1nyupawvv,4dgbo21nbb,7pz9aoau7j,91h5cp3kl6,cnc0n72eex,d1iat7vtb0,ifq7dtag2c','pbhylrlj9i,s1k70vmdp1,k2djkocszj,fbzkl6tjf2,3d7g6pup9a,iq5iimhotn,jqj5l8whmw,g0bbtubwfg,9l35e1fdmv,kfmm01htop,dia5023r2p,a9h5353i21,j75zcarar2,hmxbz9fvmp,dadgh4wi5','6rlbepw3fw,anq6gzt8kr,sijzelpwu2,pj1ki9vk9q,pjzhn85ywz,ki9f1gshsk,9v4ntfjha,1fmp0hzsde,gn8ph8mfbc,id6gujuz2e,afn52eoflk,layy8mw4vu,e6jlqe5u20,hf3x5bv719,8kbuj0h2b1','120q03i3kcx,7nish003b4,kos9pzofo3,5f88nqm209,irgi2csj6s,jxqmckfoa0,47c9ihvhut,5uyggfgi5d,4n9dvxhgpe,5wsnz02qko,5w53fq475t,egeothsm78,bqi1xopawz,es6yt2iiw0,cmb7pmugis','gy3c3uegzk,cg63zj3sm6,qfpdnq9o13,de2q21a6c9,11ju0bj3e07,731r1crdfr,3vfwlqx0bd,1awwxnhket,f71l18k295,hwz2nf3p8k,3wiepcly6w,hu2krabau7,df12jjw8of,kufbz6h0h0,4wjgyf3fx3','hugu2jv1j8,ia2kncxyst,18v9tew10m,wdiivbhjng,jg48418np1,6emkiaqrp7,b787uieytr,kxbu5ivc4z,gzp0chwhhz,l0r8ae4m78,558nrx2d2r,c861t4299u,h63a03skm0,lxjrbvu5jj,glwgez6rz5'],\n  ['47ogs4k06t,grqke30emn,flys1y8pyt,10bkc442tg0,to0jqliuhl,34ra0md63e,2fyh7ldkgb,elahe091x3,31mok6d3j1,ce3um93dp3,cjz2eel5zi,523mvzur0j,3g1e1f430m,6s0zuvnvl0,grg7uq10nu','wmlg5nztw1,vn24o1nf9g,pcaatsgkv9,wgtwunsfa4,jjo4841085,fcjydv2lf5,jbse4jyxkb,d66fepetl4,es7fzphkru,2wda3v0poc,8231bbb0wr,ic32gswspd,666tv4cl8b,5ncdt3klrs,h87p28mfe7','jkp0zxfstz,wtrtpoac3c,i23tin1790,10hw0sl0xdz,6tmflwlqa9,l4vis5v0b7,5ragb8hqy3,4kte9vabx2,li5jn0ce73,2chu75s2dy,b476o0vquh,ln31ksit76,2lzgwevz21,9khwddiqne,jj62hvufiu','cpr1my4hz4,pxetcmeq7u,guo478yuuz,hvg2tpwbnq,uyhe864rir,4dkuz6rvv2,easj6pp67g,kt96thcem2,6cp7eg0cz7,7z8es0btc8,m2z97xh7j8,ditagbgvng,9ws4yefv1l,l55xybu2ts,bca90hu4ys','13d03cbgv8h,14zug1hjct0,k8wooiderd,po43nx7kd5,utuwityxp7,1m19j0qluy,14wxgn7fke,bdrulk36zv,inp8fsa0no,jei1wmkxp5,6pqpychwj8,2mpu28in74,dja93viahy,6ad58q8adx,6d1udj332q','maxsmezrko,n7uraqyjb2,j58ikca9ea,14b4ezyifgx,ofz1yrogxg,2kekizif2b,8eqlvz1yyd,8zuw7rrw40,1o193kybf,2rcba6e2dk,71kuoswo9r,bjwukkkzln,hscxz0pu2y,inkte25783,3xeer7agj5','r3fvijdep9,11w30ynodgq,dzhdq4fuyh,vvfahvn2vl,3v3ypn5tuo,kn4arh23wd,ixh6vgoy1n,7ryzd26rvs,47googppcb,35rafrlxc2,izc5n7928q,emo3vcru33,i84fvfokhf,5fk5nosh5o,kxmcp0awjj','ksocyhxpxd,theyvdcvo3,m8htinrto7,j7m43v7qcj,n36zonnq60,3s2zm4wz8q,8gtq737sla,8fak6f8k98,a0jh4sch6r,7tjdsmcn8x,rhw06iwu0,9u8221tfcp,4sxb429nmq,a7y8x9hycz,3c6sxt1j2y'],\n  ['stgmvetdsl,oshxqfdspw,854o557g3p,du17nbu8od,hjlbhs07v0,9uyymiymm6,3ffb4hkoiq,gerk2j8mlm,8qx4t3l77c,5puvsyutcd,j3illjf0dd,dvrjqg6doz,5fvdbusr6l,3s2c8y6q51,1vllgb5gp7','lfpo1adpc5,e668s3xyhk,y2f6mw7vwp,lyor0d4obk,dr5kqz9sih,6nyo2tsytz,iii2nnjjbc,k5i2nhjcwi,8qxmdpve2j,czardejcw3,eg01ji96hq,62q2nr5sv9,6f804lw6v0,7gfwjhuinc,21kydkctxi','111tkfxo68m,n7k42xn570,r13rewd5nx,ar27vuaug7,hr0cwub4dv,i96jrbrr9k,ihxicpf8qz,f1muklplso,a1fdxl5vq5,b3zxg778ff,jc5pj24f5u,2w0s0vux80,6vdtpnr4fl,9pgsayjcfw,7u8toxff10','q9xgi971q8,q0bfucmka5,cxxybzay03,h83r8cjad6,xm22m7anfn,e2b6qqm1ej,a42y8vtlvi,3021vsvbz5,4cgt18qq9w,hwwpouvy99,20n9pmuwqv,fb5hhcd2xz,24pt18ibiz,2lmseojppa,k5mvjsn83z','j1oy2es85z,dpvmbx76yu,r98xq45w68,xkkac28v6r,nd3nepnpi3,6io6y57pa5,2tn0qxnylm,b56hc6zogo,824r1u8wa7,4nn7dmqq4v,6k01ayujpm,in2qpr6wz2,7yitydkgaa,2q46wirbhp,fe6s2kwtf0','9b1p8dezrp,rcqv4m7zjz,d1ds4ojrul,gew3jtrz7c,nomhcnepxx,k02zmeeb18,20b6r1o4qq,1ofkq2h6mz,9nx14id1su,8b0sj29z6n,ejeexq19q2,8988bkcq2l,iakxivd844,juywdvxfjs,34eb36pubz','ee2u2m3lyv,fre3i57nmf,l8n23c4ict,gg6y5n3vd4,nfhh933udv,cqiton6t6q,l3unjtkl82,af5olas9tw,23w2v1tqyy,9bn6ku6bfd,3ikir84et0,cpkscgl2i7,54rkwtggl3,epxa8yvrfx,7vwrujxh0t','rqv8yfg60e,82r4gp6ngr,9siagnzmuc,pe5woocwyl,n30mf1hipr,62srsevzm1,g9mftsst67,iabrw85i3j,aot8ggu1kq,81r7fbpq7u,7lkzrvtpz5,d158anuke5,6p7saejp60,8duyqfc575,d06q2rbu61'],\n  ['c06wcmx4u0,sjljw2ft1r,myeuszrf6h,la9me6lxdn,q5phjhls9y,d2q47n1zzu,d5e8me8cyg,dstk95usqg,5hucqouw54,f9wt743bmu,4418r4owys,e2vjpryn5y,3wfc6equ4r,j3u7yw9qcn,23uu9i7kmg','chhh66n5f6,le1jhs4tdk,f3q7bsxvlt,hcbr3jkoru,11u0wiolv7x,g0qyz7sw1z,lry4fgp0eh,itvmgsvrso,bqg3s34igt,ljc48aysmc,bbc77xq4hp,3q8h13kdul,85o4jpyt8q,lufnkcq93i,p21oczeey','yywyljyzlq,10c55xaral2,11ax659hq6z,k81n529ijh,w3ngs3gqz2,k3djkz9u52,3xmpbqkio3,687uexyiir,8lbtuhc9tf,c5wsi3iz89,lrueivv6os,l2hop2v8dr,98qrv6z6dy,4gwsqo4ve,khyypexstp','d1o62kz2sf,phna3kbmg7,bnoxlidz1c,wx5ls7psje,mngvqkahdi,i66litdgk7,c18e4gu2ly,1hgvfk4bwm,iz2oxltree,bpseo6du8r,amo6tb6ssl,lt9sejajnt,iqrbr8d8b1,hdpw9iw2c,30d27vja6g','n3qxq70yii,ztj9wsfgw6,wmouk4gkoh,mj5j7duqy1,udph3plap9,e3luzdl6zu,4c3gsl8ivd,dqpreqnxbx,jgqrm9gsgy,978hhrvgyg,crm5fz8hxa,kd53pnr4ie,iatqpzv3t9,eoywsuls70,m0js13eoyq','eoa09tgsgf,iavyxs3cbs,10baumefm3n,p2m3me745a,y2g2eumw1w,cmlfc0kezw,7az5ktbosv,jys1mf9kx5,53yshxz543,hzh91y0lpl,f0uzavkpyv,74iwyybwjz,fqc6c36vi3,2erwj6sd44,espkcwb17b','nagzso2dce,ybiqwzfiv1,st5ce1wiqn,kth0rllnec,ntb542jiyv,k3plob0io2,lib1y95zb1,g2zpw6h8nw,ks6a5nl7r7,k608jkc2lg,4ybi04nkx0,7hi1skoayx,jykd4o0tk5,6kdqju5rln,f5lfjj7my0','iv83n889pn,v6rbj2hbj3,8p2obkib7i,3ktogj6py8,jgfzkfztop,6ocf28xone,5m986kg93w,ft15v9yw2w,l5bgi0clrp,gsqyvziyd4,e698ey8w5i,llwwha4347,871yco426s,5j1jmt8foa,5r6qcdo0mt'],\n  ['o0tzptdjou,6ph1rgq4fm,j1d6omw3wo,ifw816d12o,qz8h8wy41j,dx15cv3g8j,41mr63ymgu,dradx46fag,40pcykwij6,fp83kv884j,kp5nxmgh9d,7310jtbfl8,ekhpkg9t8p,at1i413u98,ctndfl4yhh','vg4pkib5wb,wp8ih558qo,jrjk5tu4iy,mvcragzqkz,dz5avpyvw9,baf8xudndl,gd4b2ov1lo,405mzusoyl,5k2xvawmdl,ax5a1dqvir,lsy301fied,bh729deqbt,im3y4lc9lk,19dpvcw3p,4cptd63jct','tlenixg77v,gevwkz5nu2,f2m4gjt35n,x775hp8niq,lb4nm15fe3,62262tfim4,f05qr30w14,8ewznm423z,kcq3f7eckb,hdr7hyvvi2,arzc929h1f,hou728leah,8kgu0didic,jy00x7p215,gq8ytuevkg','j7p2eo3m8b,ivbsabhvnf,o4e22f9x56,ispltby3mi,j35m17z6fb,9zjpn6rk31,8k36ai7s3i,hagbtx1qqf,d578ql7hdk,f7my3xec8q,7iu2fu0tpt,fsfbf9gdlb,1g1dedf6ud,i5eei1kod5,9e9i4nspyz','sebn99z1v,7j07c6e7z7,wk7mvki2mh,qsj68ufl7h,s980r2kwii,qeni1cog4,7acak65905,h6n2wql2od,75yb570amy,cmspullw9s,56evhxrwsm,gz105656rq,ejcteeevuo,5ne393gelc,1bg8bchguq','rijaxppb8y,jk9kybcvp4,bg31bfldf1,qwvg4htrl4,rj8ol1uh39,mq9sxy4tw,c7imxivzoy,dec3ibimj4,26wpzut4lh,m4npksg0n,hnmtn279ws,wah8nwjah,p5c4nbqy1,l95lgz5b2k,f4u3j7k6gv','io0vkhzoj2,zwn8snaduw,h0pw6oj13b,xelkninwnp,rpzpn820hg,1e3v3ift8v,wet2fuheg,apdsq17cub,i0jeh68yp5,bqzpodtetb,fv4t8kf1s5,9d02thndpt,4x38fbzcrm,jpj0ixp4mj,vjfm2ziec','xvouler2sq,liabzk5a7o,wf4w2phey7,jvfmmem8ih,guvhiqbrq2,8lsmu9drbw,aqlkcacmso,gtmtbgitxt,6mbqucbldi,d020tugm1b,eur0p83lw6,b56fpyu4bi,zzvtp9a63,47thab779l,5j4ziqkz5c'],\n  ['tmbnzko7eb,oiio5wfpsp,l18pv6qs4f,grapbqr1gm,t3n3xeexj4,hjdmdsrkpi,gpr9rofwmy,dlnvi122j8,1q3n2mzf25,elp5wp1oqu,lf5n2ifs7c,6z8pqqlx7h,9er7xa6rr2,jdfvfqpn03,jwgi50hq8m','x5h8xzvor8,odoalc1xq5,90olkkl0dx,5uiae0uhec,rpbhltbx8m,e7k3z04t3j,3uwp4tm5zm,lh1ncc62zs,4kny26herl,fp26lo01fe,8dlr5u9rz9,358b3akrm2,3874tfemdl,7al4bkax9l,62kooc5s0','kzzyqf6hxc,rga3efxk3h,mnj66sg0n6,s5vra4ux86,ylfeq8kfun,f0moagm302,9lbrtfll7q,2w0ir6bl7y,1gk24g6ywn,1cwiv7slgr,b1dyzea782,keder94pvj,cgltvi17e4,g88j1zk0dp,4vwdvpn7fo','ndk05f05s6,w8sigv6zsk,jpe591j9mz,jv4g07i4nf,vy9b1ax3bm,6g5gn74kei,bib4cwyl96,5o1wp38ydq,8x2bsyvljg,4w3b31gm3y,j8o9iu1b8a,kuf6rzm42t,3bui7clkik,brackpbgze,128o6nk7pg','gvu9qmof77,1682pqvkjjp,ih4d6grs1p,k91mtvvmyc,g7engrqjgi,11q5y14mfh,m5ca4c643,ewgzsmf12b,7y5dju00c2,6vdnx0sa,jpy8xs5hsb,c8tt7u3evr,emr9jg12j1,lifhd9ip25,3q5ynss5aj','9303n4j9vr,aq72leaz28,3you6zgfj2,b52be3ndnj,cpd5stdc9h,ie5et2erxd,71lhqd6a3h,e61bcf5d4,leadnwxir7,6frdz9ojq0,1lqnogx1xp,1spyr94a79,qm9a4wezi,4w6o2t2epy,1bgbtluypn','150v42tlhee,fucc7zpltl,jkk0jiacv5,eyo80i4n3t,hwum2ml7lk,j6z379aby7,aixhcurelc,j3dk496s5o,f8strc90dk,j1golhwckf,h1f1mqaj77,dpvm9yz0d2,fq51pb7zri,43gymyvd4m,e2rv5cafh1','3jpg9o4yma,rkdytaw8iu,oaj9zj7wco,s1oua5a4wu,pg4r98vh8c,gvg3xgnrl,ezm5mq317u,4b5jhas3r1,80juo1z1jf,3b2ses3d49,cptzqsb9ym,af1by5ekv5,3ysl5ecrwt,df9a9cjxul,kqficj0fzd'],\n  ['n90o99ys9d,1327d326njm,ay93ytktbv,k5h1wbqdgs,nhs7rja3rp,l8l7zzyme6,lxljtc3z8t,ieitrcs4g6,7fkx6l0fpn,h9trt2kxma,i6dtu5453c,z1zmxlb7q,dwnxis9ywc,1oqlo06bc2,au4quhvu28','n016t8dgkp,r3bulr4b9p,46wyohjiax,hcvwkxn6o9,s7fik3hzrs,8jsfsup4t0,gro088uw35,j865em8nwp,1j7021eb4,ke4ynetxvo,55f6bgubh2,3yh46j0093,duzg4n8pii,jwvjyh3gc5,1k8nmuz7nd','618rcfagft,ql2ol225ja,rstlbqzmwr,efxp4hxe4v,h0ozw2f33m,gz1xaaj1r0,lqyn22ma3d,gx8u2um4q4,jftienhec6,brb9ne6w2l,ccjoe0d5ls,9ml9nfznye,jsr4nwhi41,hk8rtfbf1v,f0wppzo94w','oglj2fjs0v,j6qbllr3a9,i2krl8kcry,a5oav0lhpn,mt1smp5plx,7jzyirm7sb,7favyf1xhh,ezxcrkbj4z,4agiykq8em,51qfoq73gh,cd764solcv,gqrt41maal,bhgdbxzsff,bkjnlb09vy,bq5fw7q46s','plyh3h5h75,d5xj3870o9,ej60rk522s,z6o5ou6up6,mn2mvn8dhb,8n1z3jmpiz,le7g0bqsa3,2oiuwrudkx,gap6cip0kw,8q5462tmra,3p7mwm75ki,240r1pqqok,5n2tjmnp5l,5mteh2xqd2,6v9gz9x3o3','bibbraiszl,841a0smaat,16khubgrzll,7rcep3nl83,s2q91gqsw2,j6js68ehs8,k8ef8yl8qc,lpl32swa58,22miog59xm,7qto3s7z7u,iux9xfyeog,1jgugfsy7x,6g7215mzy9,5u66cmyu65,lbqvjp5wjz','gzxo0wpeh8,b0zdouxckl,izue0qdhte,mi7wmo4osv,i33rny6jal,867jahhp2c,24xwsy96s2,glu5okut14,d9gbqsl1xi,gz1lluasat,3s81o3qd8a,6rj9bahbp2,lrsx50fvsb,2ia0gmezd3,c9k9yilc6o','ca84lefg31,15neiv17l7r,nzdfxxzo56,7xwl919xd6,p0g3y1bl58,e9nkyksum1,dkk39q3bg,l1c7umi8vc,l4v99rw6sl,751qfm9tbp,bu1qhy5hef,7vq1w42d8l,grpqth2i0n,9ti7gi1vqo,iapg2oobta'],\n  ['pojy2atzhp,tviw635z4v,gwzbfawtx1,zvp4mk6ely,6j2oo98l8e,7h9kmhpjng,9yywyjm2oc,3heke8g0f6,2f87may8tc,jzpj6517i2,k3cvz38nl0,8qza2lse5o,cs9cs4o2r3,hrqom3sa9b,3hi9ugi8ro','inp6qpd4uo,10kv1cf69wd,quczqbdkj6,olusahccsy,8n7skumdqf,21ph0gvixj,4lgx01bwv,830p6dlxas,9y65y0cn3a,gr33wyn62y,25l5cwks3z,59316nw8ot,c55cgmbx31,4a7p5zs9fb,ev3if4gmds','14rqezx47jz,wj5ucc7lsd,y4d5h2sdt2,nu5zp1ejz7,qqg5r4l4tb,2y19wt9e8o,fp5o72mjnz,8jp8keqt5t,2jdemtlle1,hrtnis29hl,hsh03pfawc,knzvy1r05j,dcvvodabfi,ecx0ht13xc,3f9otjzl20','dt33f4hwu8,11j773iw6u3,9xihqs5ez6,bauyqcendo,dzhuezd9wb,6jwhk4u6rd,2p1kf4de13,7vb0ear406,8cpgyhhit2,hu3s2z28or,egibefh9g1,7llqn6ccgd,j0r53l9bso,7vf5c2k6tu,561f1ntam5','lw29smtf9j,sdnrs24v2q,l4579jumcn,u7rmcgnyz3,w9aqxljbjj,cgz1spuc8t,1jfj8z29ys,ck6h2kqsa3,4epk6mlpd0,2hqw96fjef,jwtd6t77dz,1c9buwyq5t,hqats6iv9i,br86iu3fd7,8kzectc6u2','icagasppxh,8dv5wxqu24,eyjvxhrrdl,11d2mdufchl,104trfh9zkf,c3ckmt4sgp,3afuzj2moe,5s9wtbox69,49pavgphp9,5xvtq1axn9,177hbgfrop,i5etdegvy0,grpds4ojbj,4wgitz0r4e,zus1hmexd','qonzwzyl7o,p1bcqdwyrz,eayolg8k6u,rlhd10u7k7,f4x7txi23d,5r4hypbo5n,3qxlcx78au,14pghmfpz0,6g7gn24s15,ksl99je750,9te7ny1lcv,l5r8c8pcke,9ytjvea7em,aknnupso4a,gmcv3jfxnf','v9jmmsm4od,kj3wu8mt2y,rddwfypl0o,ftcp0k8vbv,tf1xlr613g,gps7n54z31,d5c8ffpfsh,86o0pu9aps,9cjg056oeb,2ucun1l8d2,dz1bv6t5n4,d1vkjsckl1,5xj3xbaoom,kr6ouhupgk,cxtwmggqmj'],\n  ['lo8qr1lcp5,lgtwwd6x95,n4tcixofej,g2zs92bgjz,uj4eish9le,bjwwr0n89f,8265zff6tr,guf2sq9kx,93khoofzs5,78ooujpsp6,868wwpar7s,ikrgifbapq,frhcv34199,eiv178pc4v,2tmavfp1s9','11p8hhagfo0,wbmb3dz0a2,nlk545nes9,15im4oku4j2,rro9d014dt,2qohzdy353,4soekoajpa,94v42n1saf,1s5yb5oo76,fx4zhuudnr,bq6pf8ffjt,99hsk4ukua,ftl69w53dh,8hfwiiyeo7,6hhb21hac1','ign62yodhj,e1v7i8of8l,tb3duscy5q,v1vnjwuchv,sfdoveg3kn,64sefkb9md,iqvsfwy4m7,ixi10pkiwt,eyzydn7lte,apcf70hxkg,90yw8rrmy,gocf9a376j,f0z56nx67n,18n5h8iw0h,1fhvbdg9gf','oabcokc3i3,926rybf33e,159u10tztkd,y3rkmu67zo,n0czt90ywn,jr5kmd0aiy,78g9c9b5j3,2i9hchp1er,duglgv5loe,2ctqmhtmra,fy4m6osnh1,iwdn8721n3,dd5kxx448q,f0silor7o9,cwfpvllaj5','wf46sue0y3,gs6dgkjudz,s4qski1g5l,joj1jhqptu,cx464qz1u6,jns20xrdsl,i5rjdbp0no,9pbc3kcfi4,bhaaek0tq8,32f54716b5,faxh2k2ja,louuiezt99,b7b8ch3n19,h2iteu4i72,dqhehtj64c','6litqelg8f,rn5qy4nhuk,qthppaa5s5,l32z2ifh14,8cy8jlypat,lmuiful4sk,7tjfamgpur,a566s3b6q1,2mv8ohoq6m,k3aeoawvk0,huhecvek3l,fufmbn54cv,gt1loy9z0t,2jnc6pqoq7,9t2jmji5zi','f60m6ns2s5,hdio6ritkn,htmmdek8x8,v9nqg4ebio,sppb51gbc2,d14lg9ol3i,cfl44jj6vz,8l0ovwnjt8,afrlirnf01,guxqrngip2,gp8mynee7i,dpbit708vb,5zss15u09k,a6nswdjiuf,hj8aus6umc','dgrwj0ek92,175x8m76h88,8rlqvkkc8f,isngbv53ff,ou77azy9wb,5vt4e6aulv,eb81nissa,j4h09vca4x,bo7w4lmdto,32twwnigup,iwdhfczow6,c5lhdyjyc0,ai664bkkgr,9xgp3nc1rx,da434dqgj4'],\n  ['kpeqewx5l5,11mt8qalgcx,fhsu30cl97,mct81ss31j,lzajmo14fl,i95wb98jla,2vgr2au0j,3g52blhkib,7msd5dlmbf,h957m4t9l4,dyc4z0mf2b,73p6wx1u2i,4z9j346r0j,3oasjho95j,2kqpbpg6sg','lj4reg0r28,m5syyyd6ng,9zq6doi77k,qwcanxgokl,mztgbzje9l,chicm7aoo8,5ik4m3gau1,7wi9oh3518,lrg38mub69,b4jrz8cxqs,622bch9jp4,919kzfx9ko,8nji5il8el,9n079q1sw2,98qisyh53r','551iulhrmg,wgn06b0z1c,imqtjizqq5,isah2p85nh,ka7i2etkx6,hpxl6svwtw,8zbo0g784j,97dfemgb7,496dzjt9x9,2pbr93n2ek,yzhlv0xf6,l47gbgwm8h,isbcegbhj6,7zndyhhmg4,cfig4cidmd','hn0leti3e8,gvectolcos,nc5bshzaxe,ij7zm87ktd,1k389fqtzc,bzoe3xvyvc,lelllfskko,jkb21ord1h,do1n71xd0j,4hvxey2qx,g96pqrldjk,b6rserqo95,h1zex766fo,78aiohqze6,cc48gq40v1','pueq5z2ci1,rcg26m5qpm,ku5pkulugm,r3xoyun0iv,irz50x7pl8,7wowpzf314,8k0i6os3fe,3449w6e6ov,9afvw1qceu,5mhctcfzuk,28q7jst79o,hhvsfcfsrt,66tk0xwvfu,4i2fsm6hfq,k3smu92euc','80w62kzflg,v5uwbt7qib,wj4cascn9g,d8yb0dqosu,5bzmczvmwz,fk518p2a25,ihp055mkdo,8ftzywxiep,6xdlvn3sku,lhq3xcy70z,ievz192x0b,pimxk2syk,hk3mgcpfmk,62bnkrhb7c,a72uibrmc6','tdb5oumb7q,8fzydqwblj,ao6gw2m2mu,9vgvvy8ak9,gxeynugw2y,3puqnuxwj6,fkrjrigwa9,7x0cro4ptp,k14mkemrtr,6c81vewdx5,1qq52n9u7d,fhug1gqovu,57dyvvmr3h,hvr98o7uoj,ex2lsl84ge','ilk9xu1c5y,ztvwi2fah4,154dje33apo,h1s29xdw44,lylpomd3gu,4d63jy51s3,2avf7c4501,lnnre5chcw,9yo9h0fwtd,9lhscvdkux,i6h5zjfsuf,j77mo1wrcb,6lxqmhrhx1,j62fqyg1xt,izvmrvdlmh'],\n  ['8d6a2xofpr,dvvgdgk8av,mwcf1w4ftb,g5x5s3kosj,toe6912bej,6tasizs0uf,74e1zufq3r,g4my652vhd,7d7z7cc49u,3alo5n5kl9,845cdrawu,m0idb5mdjn,gcxuv8r9v0,944w2kxwqk,bulgu3u2fx','u28e8yaqpn,138li6h4e42,ge0ouqqytv,qrzzj7186q,12e6oydeds6,8w4gtt4uxq,47eq9zrl13,5ix9r8lq41,ijxtd3jv36,iuiaed0lzf,d8h4ujg3wq,jb3d482lw2,eydsyzmwmz,hjhmvqin9i,feo3uvan02','st0esdxgc6,jhu9brkaju,xqsu3a5s44,boyqwa4kmh,ij2rusvm44,ivl2weg8rs,atbvm0uuch,23qvaomgu,jp4lpy2jmn,f5ehldtxdt,vufo39u0,6omuk6pwec,27r6se0w60,25urad61em,jf6i19macs','2o7huosz6b,zhta37y8pv,pkdwqfyuxm,ju8c5getlh,jr597w0v2t,1wz27k238t,52b5v8f4hh,863gshhqjc,gi8mqg6z96,7z5owp9oao,ji163uz12t,j6qja536o7,1hwh4wu624,1a2ihj957y,2j3cwqxlgv','ibdrqw8grf,j2gitjet31,qpn53qc90s,htylpo8cy5,vllhw6a5eb,7ue6rhy2zx,f706aw8dpz,es0uxd86yt,gf0idwgz01,5wfoeete7r,bc5yud13bo,l15hmu091j,79vq8348t7,356jh7etdg,bbuwzk36vn','h1m28rcel7,teyk10wlef,dfrhprru2j,qa3co9m2hj,vatu7nj5yk,a0kpcwt6o0,pd56vfyf,m0008z8vw5,6485bogxhs,kzxddtrexe,ffqyhdphos,a0s66az2k8,5kdp22ugci,861q71423w,30wpv2ze1y','2gahfqvnhh,es8q4mbvqq,vi7a9ot2r4,9atd3vke3y,rm3ihg62kw,kktxksaqor,i98kbca6c5,l6tab9jjmv,l2hlydwad1,1k14k67k5x,d6jwr9vlre,irvb32tr10,eyn4kdqpsm,14wf0evd2z,dpsqg54ryo','zlwx1jmk2t,112ak47ods4,iyyw9pwfz1,k3n84ipyih,v8g8zpi632,ik4dnk095g,5x7g4o2zkn,63udk0jxip,amns1hgihn,bu3meqe1v3,8a2ynmfv5o,761ea7ji96,cu0oqme376,55co81nzmr,2w9rvwr5vt'],\n  ['pnle0mclzv,fqkl5ljlwm,x88eb5gou3,153oeaijy9k,qar9z198lv,3jk3qfdvoc,1s4mwo6raj,8hgfocp1ib,25k6z8e556,5o1jaejfjp,7fsh2chcoa,8ya9yxj11a,76sh8g6o44,97w6g8w7j2,jrpdsdvqsc','fuh8vugeye,pqs1e310hf,d5bwvav5zc,u2455cppqw,rkei80dvmb,9ox36bkas3,815g66m9b0,g75pkzp8wj,gc3cilqta1,glum3ots0s,gpubjcif8q,5wlxqr6roa,avj64egcuf,86eqcovabn,4ji596xx5','bia6m9o0ti,8u96izvb9k,4k63pqibqf,p5g2t86q6r,jrwk2ufc7g,ia86643z6e,6od2mxhu05,iwna4auktb,cegr3k6bng,jor64n2zb,bepdjamr7d,4ox9xl1890,1r95t7cyul,culcghc22p,10nww1yf75','lflwy7kua8,11p3kcizeev,js96q1pl4i,jtbzajib22,kxcs5gwhos,84kx18q256,l423tr7ia8,iyjudnaalf,iuvgjxihqh,a04hyqgvq0,hske3lkiug,f3w9zfix11,3f4f5rfe5u,bcztxl65tk,2m412nyf3','vunujjwpil,qf1qk707ug,loicmswjpg,u7xs4rhd05,lt0krs952u,290qnh67fg,8ineoezrr0,3ixhgsjgqk,1kkvg2ahmg,deb0fmon06,2azxvkto0b,lya3z804pa,lf2q4s10ll,drc5e5xai1,ika1sjwl4y','x4a75l4wsq,onto1kep6k,whxn7z50fg,nlzl2b5wyt,c6nq4f2xtt,ayt0ds9qjb,aclvimsysk,aar1wsyzkw,jsyww89z3n,glp2cfub4j,adn9mxses9,ifqscyhig8,1sk19jkt7x,ahagx3nh7z,zjl1kbyfq','z1a3ewrpfm,g0z7242ari,mo9nx6t3fl,ax72e4xy1l,uqnnqilels,10y4ce3e9p,f91nxfqzh4,lwj8g36t7u,k8ekc2y3pa,a9zwnnm4q9,24u36az4oy,6yplwy0gnq,1vl8iq8nyd,9l8rc7fyms,dtbpomjuib','yrkm78rx8t,pkequf4upx,ov80qxzrji,148d6lnqu9d,68x16cqnnf,3dva8854sf,ctli5yntbt,5kxtng0pv9,k72g7xrhh8,35xqdn8gbc,4mmhvl15mc,fxr8069ben,joz1ntn5h3,2l93nuvzp,b04m45gfow'],\n  ['owsjmhdgcg,htow849x1e,hfz9l6jdrq,zsnuwst77z,sx52r4h95s,5oj6gh9tcu,hn0gam90vn,lfwrpzavxy,1pvde70cd4,dwovvhiek6,8ssp671l0x,btthjjb5w5,ezmlpff3np,kka5rh9nr,b4p1k7k4o3','429975y11m,clvt99m6w4,lzmpqs4low,mb80sj2lmp,pfqeglhslo,2l1jdo1biu,9r3uhvz248,56rjvqc6lu,5mmyzxtq8e,3higy7ggub,hx9ectbnm7,8ol4q07iw,f8on0daamd,3k55lzqlt,4qb2y3c68q','jx7bxd7xkh,sgbc7x1zeh,kqol38frny,rnxdum719k,gmancy1cwx,b9knufz1ht,5y99x3rb2j,f7hse90ulm,iygtr4dccr,661gudk302,ixcnwnihk8,jvk62ugqib,hhp7r6vbn1,9f2c1diip6,crsgzzxtf','rj98stdv92,a8lr1ae1id,usz84pw3g2,t63q7606za,y5kiwensx7,kn8760hq4,k1mvfvux9v,kuxxq790ob,bqf0a9di6p,gmrg40is3,2oieb3qwv3,dj3nct15uc,lyicroiv0w,adb6c9q4mw,dc1zi9lm7s','iakohj7uvm,h9zzs0cg28,uw8ka47t4l,exesxpjqwl,fs6j6zarir,br1df5q6ta,8veywr1c2e,9ucree545v,4pafftt8yn,3l41corp85,8q60le6tye,f5a200l71b,fnt33hbhvc,j59zfh1g9l,88tapwg5ua','tlnxvpy2ni,gux3lzdv41,12y3bp0lssb,tk5qmpqgft,ra5y1jlrmb,cwavrv65w6,eeafajh5le,22xafokyj6,f7ih7tnkjl,a4ab3evq7e,7wpt1yzoey,ik3t1elh9r,dd9lomwy3m,m3rqi4uar3,772ksm0krp','syj6cxcela,i13yiq1hf2,zpnqwa7qji,x2cautioxm,inafd3zxbw,6uu3ehm20i,eppr3upcgi,79m1ktsun8,69kvgsdyqg,94rjwru30u,j6wip8z5md,avhfeltzyl,7pq4yj30i7,h7fe29uj4i,jpvhpl1wwx','ftqz9nlpf9,redn9p0rs5,ead9ai4uom,11quxfu6wpr,4vupe4rv75,aiw66g3n28,jrdtgen2xy,b5zj1iombx,g4w48x6tq3,k8krxc15de,lvsv5pkyv5,if3xiasjrh,iju9bbcusx,d8fma1qv75,cz78my5ajh'],\n  ['1j70yhhji5,6pfh7cyzqg,3u6d1ei56x,l11tz2imqt,q72vzy3bbx,2rpc5p39l,1wxafl4nry,ke92iaq963,ahq47p8wxk,g79y71e9cr,5w5s6hgbj,g81jf70z8q,fk14pwf1i8,4apjelbgx0,16wyt8wtm2','wdvilz6kb7,rro7djo5ic,p3t8biltt9,11io2e69idm,m1dsx1xtfa,1vjsh44yeb,6mi9n6qzh6,3c3czl04p6,3bp7e0u1cg,8eg86vj386,hd8jhlik97,7jp8cu3lrw,d0apimy05x,omt8kml2k,8gex6m9cer','yw6x8lel31,ecbzjx2xlh,x0c5kgcuko,dnccs9y14o,yb808ij714,3ltqcou9ir,56c4by8buz,e9ue3iqfmm,bng0wjdrk7,1tx0zh4rdl,a1bw7rsj2,4j7f2h5vgy,hpxjompxl0,je1juzrv02,acu97ax1np','nptgb4ij7j,11zj0y0k970,ge9m6kyz2l,pashv05acv,dmidgi4753,jdtq91ew4,lrdslg6cda,brl4fr884s,59q5exo9vt,exi3wn365t,em66ap2juq,1ydivfxbvh,liz065mhxo,62y9p0g8f8,6dif00jf0q','l5auwd8f45,r3fybw93w9,sjbhfmc315,pn1tso4oxd,enjp5ymtir,1khx046x3a,ihk9qyt0xp,63bnxzt480,a3xbnky247,beipsik3fx,h6e0mfpe0e,jc7618lvf1,glk5g3unwy,ld3x3q3jzc,cnvzzc5tqn','mz96dr92n5,12lfl1kla65,12lsv4vn8a9,fsxijzcw3y,dbxsyncwt4,fry988tgvb,4bsytsvz1a,lv1pxcqgv7,6h74pkgy91,1jt894zt2m,a4uo078hx9,ncfq40bxs,567aqlznjk,eou2jp72ki,edwjwg6xrs','q6waukk4gb,kvv5x7zquk,8ztwmw7rgr,iiaucuiesk,ojn8njp3az,bo7vlebpk5,dcs5spvaix,5rca7wzs9s,107b5g6u3q,hnjda4q0l3,jcyidf47s3,lyhgcsw3vw,e1gvarco8h,2kkqu7kwll,ghlyfd4be','n85hbiozt8,uvvzjdwfco,mfvj5mjz13,lwny7j6ydp,vo13rtyt0n,h1aw8uzfs2,4921lupifw,i17uhdkm3v,did13r1qo5,akvsvufclc,eaald3o7yv,a1idxx9wlp,c3whwuwi7x,bkhem7cepb,84tlcwsl8i'],\n  ['ipgyabowup,frvw82grtp,99epye35k2,mzeyv3izkz,f66urf0u5b,l1e54icmho,ko7p4bghqe,gnc70vp097,bzm9s7lg1g,85r90b5em2,7jd3wom9dt,4jxlm5cwyr,9ts72ybiqe,5dnz4a2v5j,ls9ol8x1nu','mmpexyqlug,uyl3zwama6,cmfay5df6h,eop6vyh21b,qvvmt07yo,hqk0byvhs3,h2t19vjtte,chq5mzei5o,1n745w3qev,lzqsnbzqoc,jo2rcb9yvt,abqe8dn8l7,2p6k5zf8c,i9ni1d4389,m2x4rea231','bfjnzrz16i,r0tf5t5v0z,ld4vm9ql2c,vsc2zcrhry,hfq2te3ur0,dd15tokulk,76gdzsldnq,hcqr44ev9f,dg2rf7vh4q,1s9c7tvya5,amz330lhqx,bdhi840vyu,i7c6rcgb16,64ojbiswjo,18aoe4itfn','bnvo2yk5rl,2frwbkywld,szja8fx844,u8v9xsqob3,ljttodn59w,jw7xldeg3v,1zp1n9xx0g,adbfgsz6p0,k8z9qydk68,7nu4avt6sn,2c5i2pxen3,cvrg54qwvy,c3vvjcuxcw,739jsvqm4r,jae5a0kzwq','r8yeci18rv,mcge22n3s4,gwy8u29tlw,fftt6d1mhv,mmuixtmcb7,2rsjuz1wp1,d3s10fvjo,8jajjhtexz,lvqej85tem,cp4hh758ca,cl34ei9i1m,4vddjnu9dg,cfdcit3pft,fj30i1hrl8,iliomuht9n','3h55hxutcy,i0p86u721r,ay2qapk5o9,nw7qi92gko,3zbeqrcm36,kbprvsloyc,gep3ikxdze,dz389ieovl,4m5wxxy9mv,1vw60vbvcn,gwmcyre2xu,ib395etlox,hef1tnfkqy,murygmdms,b00y1by3v1','vv3k494zyp,ni3k7gdzkq,lv5lib41ou,gyp3cagnol,o1pt168vzh,2xxjxo8g72,bhccs7lk36,bm8kzbp336,d9rcmtg9id,dwui5g3ec0,b98t0039ul,8xaz8sdpep,lfok98k9yw,kfmrmnaw3o,379ojnezs1','t9s0srayr8,swtrxoyocz,zp1floez7y,llf462ushu,dnnz30frst,447bvk0uci,71gws8l3ur,ehr0xt1gmv,lcozgjzt0l,98fd75mwhg,a9x3ygj245,l3rqeup5uk,lr816v912z,4r08cqyhqs,8cfm6iuydu'],\n  ['camz7c0bc4,efdc0mzwl3,rhw88xqwak,moz4lojha3,oqv7weqd0s,aesiiulykd,63w1jb72f6,4jnqg2ufgi,jtd5ahq9nl,2xdfamste2,ae3a3k3rl3,fajnwve0sq,evkjca7erf,eh8f8n51fl,c2o7st12vf','10vf04v8jip,tycdlck2j6,xw1y6adrbk,zup1ovn9aw,124kzsvvm75,gnrsw47mp,9w5lt65uso,ie5zxui5s7,1peny5oz9t,5sp9r6p96f,at6sxn8gf,anmgq27081,5og58mi29w,7xvtkm9tce,cz28plgbsb','qb6lepojur,10vjob1np5t,nsr9h1t1cn,14qbgpmsup5,kc55tog56q,azgk977bxq,i9b4hocrej,tp9u0jtey,jf2ttasyhx,4i5jz8yjn7,gq8fc1f0s2,e4powwb4ya,ao4jav6tz2,98me4tmz3x,3ck1kh7yfi','jna7t2ghrf,8z3lfno14o,nsc01ygdrg,8f7ff5klmx,11nzp2082yy,2dokcm8ie0,31w94ww5cu,byzs62tcde,dv6511yyig,l2yz4lb3qb,cy6mt0xqfl,75twg9rvne,dfb3xuixca,gfkzxb3fx5,drpyeb9hwz','mwsipmkjjf,w64dgewe9k,i7o9se2o6j,159sx33fd6g,qjq31dx45l,k7xthxhj5a,jxln2shc98,lzq757827w,jtc7510svd,8laijz75fc,bzhhyr5x1u,5wnejuymd1,doqokvza46,ehqk1kk45u,7a5t73g5ng','133af8lj8yv,fd5kqbg0kl,v2sv2c80z6,dynd8c8qmr,n3nrb9ja1t,kzwq78l39e,23zoiflody,esoh1m7erg,jascib9amg,dbxy2goo1u,357robc4ae,ky4ddeu80z,72duc71ut6,6j56hyrecy,34vu2owd5u','q63viqkzpl,jax7i8rpoq,sqr2gtylq9,10vazn4h1fr,eacwg1rzrm,9bpp9bjdlj,36leydkl23,emnx8zbqwg,769bkk8d6y,8vl24qejgu,fikgrul8ha,kxofr4ogqv,fgbejvm6v5,dt69g381zr,imkvujjkoq','ufe8zotz6s,15ubmvkv18v,w7bt2y6uje,gd4p38yzne,mxym01b6ex,7a0a18gmj1,kfi45vk6cl,4z6fznz8rr,fvd4zovg2w,66u7yaj60u,hxv42eomit,6by0qr33vh,2l8oeo83s,5om8nc216b,2sxhule8n7'],\n  ['zmlmvya6ca,e9hko4env9,10qez45m3r4,nsyvhdeard,azhlzeywvd,20d3hcn16u,g1yui5cqcj,lt8h0auaej,1pwwet8qhi,9ex2zmmhts,fe0i8efuzw,ajlloe4h9l,40igcs7ku,9fxlt5pkg9,le3srcy51p','hfm22eva14,tex1g0yegl,d21rltw9g8,ev4jszvz5z,mtjx43u6ho,652rt8ewp9,d68fe11sew,9r1bo7kvqx,cxuvysfvol,bgvlbfc08z,274yrn6fat,74iyny8uvf,9uk9v4j955,96tjbzkgz5,2icew00p3a','jdze6slkva,sbo1qwi4lw,d5exjo2ps0,kdqylqnmf3,13132i54edq,c65u3hxeoz,i3h54a38nm,a3pn8ku4xj,a3n03zy271,hqqr8wyh52,azbincorv1,guxxmjwd3r,l5pin9jeur,kmyxs6xu7u,m08wqy7ex9','yyqy4gnmvh,k5nj0zwgvo,lbnp96wbfm,fvlibhzkbl,r8gpt9pgey,15yaigvejz,aifoo662ao,e4lchrnil6,gknpuxkk9z,29u2q9zze5,i80j1ymw2k,frpsmh1u0y,b7zbagtc3i,j8rrsrwoap,yxjs2bj','gyw19vwrq4,vzpkit8eyy,rfghito3pk,mdm51g0bt8,hanjim87yo,l4y1pee3nw,4yeb5bgtff,65ugxe7tla,ax5fbs12qb,a6gxvt3uwl,5mekioxdm6,jqseb1dssi,a0e0a0f516,k2daggybm,9053a83a8a','d9d4x85td4,kg40mh3qg5,wupn511mil,os8zj3a4c5,aiwuwx4tra,hfeg1jwcgm,gp56mvwxvk,bcauqhzc7k,hjbrrco29l,3xw1nxriwd,i8fkb0vmsx,3z5ef85r92,82uz8whqvn,7huszk7tr1,h63otm03c7','41nnt9orfs,kqw7nnhrln,w27qlg4duf,n5j55u91ug,bmkcmm6mlz,2tcxi8d5sv,6drb7gtail,atcnq0bqy5,dgef8781hr,etseafmr9t,6m8klfprmh,gi2ajgmgu8,69iz0yew9g,fg9p86k55c,lb4i4910lv','iqgc2h481y,wd70szukj2,blrjd02rf2,p4xc01jq5e,cm2gxhlae5,fwlgw29dfn,3zapdsc131,l9q6sswvzm,bfirv2snob,fjd8xmbvqd,jtkvp0ckfl,83mv7j8k3l,hkysqvuq2u,gfhjjt8zn8,3u1r9fs79v'],\n  ['qn3ht6fygw,n7wx66k9m0,kenk6hnfce,31dvrk44ri,cudaliwtkp,cr2gto39py,klhw3obinw,i88xz5v4tl,172gzhjhw,7ru02h2nlx,kidwr1120a,8cry4qps9i,9sc54i3zm1,du540mnm71,f3ca00ot0k','10wgxoq2wcb,dr9mens1e2,13nd3fcpdq6,njkpcm54z3,mtsztfs83m,hjt8hem01a,asr8hcnmgd,9s488e8ay,5c7igte6c9,f605eyuim9,6tu9p0z2nx,1oslk4i626,fc8dhkgqob,aky50po6zy,avd9dea4r0','3ee7803veg,wzzju2si5g,ni0ag31afy,h4z2jpkj8z,om6hnk85h6,2a199u01x5,f10w1z4ab8,jwimvurhvb,ez4suku055,7xtmgu1rss,amp09kdym6,8l8opcj7f9,7juabyeps0,layugbejtp,jx9arfpe2w','8ey2nwitro,j2ecmx1j4b,nnvumd75c5,uaqzyp7b7m,fayehq1a4j,eqow2vkzqm,aacvsop406,h5p4kvja9o,c6jvq12ded,8cyn0iglaz,6krtv0za02,ioiyn1ntwx,ds5n3nfw2a,b99lrfvna3,khxp01gbg9','nf9lgxa6bu,j2amhyahbh,gs61qswu0e,ulv1k6lwk8,t87lpnb0am,ak4y75mim8,l50xgxh5i0,eutg0hax57,97p9p9nmqd,aygdgmh5dw,3a8eb0re64,2rbuyg0k7g,kpv9eyz4g4,a7eaaykd1l,5a1l3rgc5r','puneh0l20e,nm402xigvw,p5zvmypv74,q9or33gw8y,ykbowlq7fi,bofxqjojjl,m64n9e9tly,atjk44bdm1,bcqsotj2zi,hn2te6c243,ievy6n7wwp,kyw2yhfwt0,8e3xp5rds6,2vt8lm7uj7,3ygoalolxu','degizej78w,814n484oz8,wa5zgdnd1b,j7uodl6l6e,rn8jybnjja,f848vh4oid,4iqh3nv9tj,at39yevnnz,hj29i6epyj,73hm33i69k,bxrfb7161i,f4pn6zpv1i,lms2o5emb,icphctgyeh,c1lfaqpnfa','cqsixwny04,xtqdci01sl,uuxof3uf9g,mstwxra2fy,lsjkhkhye6,3c6lvdyndi,5x698xm9xp,42nncavvlg,9ihi4uzmq4,i41fk8odin,2bijw0nw74,lemzdhephu,f5alcdgmxb,cmdth62bpk,hvp3f6d65t'],\n  ['g2mckvhmf4,i1uzjayo5p,klttfxe5pv,1546jtwu6a2,lrej8ebjza,ci3dfpaqu,guz71bk6pb,9ooh4cd7cs,yxv0fe3hq,c4xpkpdbks,joajq3rkae,hpo99kyikh,7q1ir2njr1,fndmbsulmn,fnk4ebid84','h2k4titnsp,mhfsjwdqky,o5se9jzrxn,vxv3t0yrp9,brchvjeql7,8c11v168ep,7chqrzvg18,8637ywa0v4,5tvc5de3iq,9fbb5fqymp,hb7mfj331v,63i730qxan,1nkz0vfjp1,di5lbdnggr,idtyjto5zy','pdz84u2u34,oqzd7ksyjr,gquao977s0,fjbkla0xl4,y5te61d7u0,gvmkimjcyn,ejutw8ax4o,5ns7fmfag8,l9cdaynwhy,fbe1qpwj1b,8enn9h6s5n,9txs2zzp3v,i2rn3iah8j,21liojfqy8,2jkyp59idu','nk861v5usd,yckvw8n9yf,si5n9mcaum,g7ocjqd1mc,bwa9lzdrn9,esamka72un,dc9j17ui80,e80b7kufbb,8u8xco5agp,8f3ec28i7g,7185zpumsu,a63szzsn8e,hguu3v02m2,ah3lr1dwkn,h4b6uvl9ae','g5k1kcjqqx,semwcs41ww,lsbhuup1ij,mh1fug84do,psto4kvdb5,bjbcq2bgq5,ffhh44qwcp,eba2jr5hhx,7gnp4o6hrh,fy2h8my2j8,457tvo62ut,9k86s3i4tq,ld1h4x0dkz,ct8f6mujfl,gcyh1gpyhs','v3qtemdgla,d4cntxxrqp,144rpyvhx7r,zmz3unms26,jiraq53kfn,b1jt6squm7,a204dy4usr,135p7rc3vh,evmj9zhf5m,kry1446ssu,2zha8if8ss,kaw6lqrg0a,3h2umegnig,eh0i0gtrj,2gkp1ju5wk','8fmhw2f50o,r6g8cdhrma,zqq412tdhf,13540qv3wag,jbkh1d12ew,e8gdflif3c,ee9zn2tvz,3yj8602eu9,4ryrluhmu0,gc7zwft65e,73y9p7hqy,bngtseugdk,l2kg71dsgv,k81co0s9z2,ksnbjxfprx','lxzpmmus1e,10s330lwixv,dh5ebgluwb,wrsd0dteiz,56ojzedpav,6zhnat27jw,58grfrvknw,34cr58k2uz,hv4d7nqjk5,2jngxoif54,adez8yznvr,j91cpik6wb,9yc1hjvayx,bn79dth0hp,c7k7tvqqxe'],\n  ['ja170br3x2,hm12g0wfpf,nj05swtq2a,m6kc3ogcut,ub4rns9a4j,i7e8fedwh9,fkrxb1rv0f,i7ipcuogz3,air1cpvvd0,jpfrhoy530,f1qb90dcjx,l3g7ft5p0f,lgmj5ek5b6,3kipvxcyuw,fo3fflkfhb','nqx5smhldt,ogjymeibob,l5tkc6f3dk,5vzklhjkrb,nzda7nyi71,jtnb7saowl,6iw60n9ahi,7tfxxtspwb,41xrej95n4,7x62168ptj,k7c26sppl8,4t4bud0ikh,lyj9x2qjp0,95qi2npo2s,6oopk6xlre','f2lgq7g7im,8mgyxf9xon,pj9p42fy1w,qlo96yj8cg,ae5tkrdt42,ee6e5evdyw,j92wfd1oto,1s40s2eax3,fa4pfc4b0w,5hpbzqw626,3jbgukxycr,d1n5m5h2dx,8w0xmmrggi,2wayjqbahv,ikwcdt3im5','16ah4klvnqr,k2hnu8a1mf,cz0w7bjpze,drweqekfer,jyqkwh1hcd,kes6d5uslg,32n3o3cbn8,31v0a74sf5,9t50bhgted,fnsa7kpb8v,dra9rl979i,6um7y7pxph,lzvtrzakf8,hhlq3m0xfw,aot4c0u4p7','qid49gktdu,oojrlnxf48,r19axyin59,fbo4hl8srp,11lta5awb1u,j7h1izcmvs,is9w62g03x,hy4386d1hj,kw16qy5iuc,q5wqe8ak5,3t89cbzdm6,k9igvtomfw,c0s0wmvqbx,ho7qgojvzr,c402h6kdww','hdzh5k4ct6,snwx16jzy9,md80lxr095,yzow6cxy3x,x5vo2r0ga4,b3ovskr8dn,c24vil3igg,ckdrbne6lm,f28w9m7v05,fnjl2lq7n1,lh6ixyk8g6,lklqro8ctw,evsm35xlhd,c9uk4m051m,6l3krajeht','qhenpunzfz,srch1ksmmn,mz85ijedv5,55p4kvj32x,ol25wzcdvo,jg8fpnzxfo,ajx6tjwuv2,5usbhtho1r,ihl6e5ok95,eo151g9bf9,9fsjc3kg8a,2alws3ww5j,8duta70wwd,5l8fjrk7cn,h4vusaewtl','ju3ezc97xw,1waoni9buo,oa0cdhpwfu,llzycw1m8y,gwf5rfvo0z,f65nsaa6v1,l5i6rxd2v1,fqdh3gh6tx,c47njjo0nw,811kd5rjvx,h49njxandm,hit29wca0o,hkaihkjp0g,iigqmn4vq7,apqrqiw8at'],\n  ['snwel8y8es,j9i3o9g6lw,i0vrkei2ga,ugbwc9s0t4,gftqx9rv33,b9bosllljf,f348jfvql7,arj8eip57t,4qijiboxrs,kvz47a2s0b,glscmlacge,eamex02bg1,2me6q3twc6,i2cbjqcqdv,gxyjay5zfk','uxeb7rxfj3,wg0fndghir,ulo0zlybvo,gfph49ur2z,fsc4dnyctj,bvmqr68cx2,3a3eqnotwu,dt6wxipa5q,b11esfnj8q,j5m2gx5er1,7js2cgeoaj,ew1djzhhsq,bppxruxdgm,klayxo2bd6,l32hunj3vh','qaydddj5gh,jojijscx0y,107vthico0b,xjl1bcqvcl,qynr9pavuy,98jssfvao2,dzz70v6r1y,j496l680em,1rszv0fi0i,dxctcua6z6,3x2vkf1aac,fj974pcky8,9yzmb1pp1e,f62fa7kego,9ym1l4nw3z','ga1cqfskwb,m8coi6zvns,ix7oljc4ur,fsmbo452w3,ungxg6uhtt,9tabzoprbn,ec2cu75afz,7bu4kzm5vh,1dchzbedfu,9ukjmh7k5p,ea9sctvu4g,eji6qmfq99,a5a0tuabyt,6444a1ck4g,h6grr3t33m','rolq8gvjis,mjby5cvwtc,k2mqgkp0at,g4crx51kff,wa305ywspw,9h24xrw78m,azsusvyod3,1sjn2mk0tb,ebyvx4g14n,1xhtrwtihg,7ugq6puimf,iok5prxs4b,451jufmry9,lbru3l2w00,96fgd6pyf5','8mvxxq7j45,djmcwn9zuf,sie82g3bt5,so5ktaqx6s,md21mkxcty,ltu9yjq56y,3vyjllbrci,lvv6hdyiwn,5huzd29t1d,alujsf5cx2,7vz0pe4y2l,iukn53ymes,5nnoi32is7,ehgwxs0zbt,f0z7pwygww','vit2zm2pdb,lqcvdgab5u,v5ss89q753,r3ublw11dw,msavinul5b,eio8e8jkev,hc5df8amwd,be9i4g2ja8,fz99kjwiz6,1mn0pj9mh4,jbcs5nwc1k,10dipgztgp,acwa6y4myy,fsg6b5woml,j48staz2qm','dsy1xsv027,ph1w5qqtls,mvqg4aai3d,8hpbqz2abp,ujohh40vnc,c5o0dmhfqz,ao0hb9pwkt,8uetd7k69j,g5mw9td91m,1juuilyefh,b9bwv4pnm8,jmbmouar7r,6n0aqwc5mk,hgluybkfkm,6n0xkt41ml'],\n  ['i2lfr4puge,1pn4kn21k8,821lrssu2k,13it4b2mq4y,a23dk7puci,eu21857846,ky4nn73nur,524qea0afj,1duqtx5f76,4cueybbhge,k917asl7s0,25nuqgbsb3,lljn89odp1,i4n7h5lg9k,5h967x0q91','z4by4zwhpn,abv6smblei,16iqh3vqe27,ost0rtt9q5,k3agnenp9b,xcr7vp6ia,92zqjzyh00,8ovc27brv,l2d4t2bsbr,kndgdkequ4,5alioqolgz,ds11fwc1xy,fe9t4abskp,l5o1who2mu,5exipzlilg','h7lxevekan,6p7ygmgq3z,htfob5bklh,s0ukdim7wm,o5olxg4v3x,36p8eovbi9,jfkmx37i0p,bqltv09bku,s4n3dnf95,dj22ngog0r,23lm94ezkr,43j4kferdj,j7enidb747,cxkqqbjnpo,ldoxbfjk16','o180r18a87,9sbz852kth,uzr7lt02jf,11eo32dalzj,ejonsqe2ut,fyg3g44m8i,5bs4772kfp,m0ips629rd,l7u3opqt3a,jfy38sg6oi,d9ehvsh9w5,davs99yrnm,9a6arwr791,l7x0rvnae6,9yw8m47ae9','kqwb90n376,b5gm4j635c,hyvvqlfu0a,7knn7qhghl,ial2oh2fjk,akxqsoad4j,2gd1dantl5,bk9ne907re,fcmgxgf4gg,ehvro077gx,ifsdt42v2k,imzl9fpylc,ix4w1y3a76,cidpbkm20w,e61vsxmml9','uf0yam9s50,w50daso0vi,9quinu3mci,db11i7kv52,peoo20p28e,a4ifqp1hje,guiifp0p8h,datvvbeexh,ixpdntjs9z,eq5z1tb3nj,ipscjy9exb,48hwtw18hf,6rocgkkngf,873nwc8w6g,glid0gpjga','ugvuqmug7i,5yowyvzzwn,2v3cf22zkx,ns1sjqpop0,lsqckr0kf0,bkz5h2lpnw,gzmpbqjo3f,4i2l2th6u,6oc4476luo,1loieqxtmv,e9agz00y09,hmakeyewip,3sogkofaqh,vz21w5kyi,879unrswnb','r94tcb7i7i,m26zat4vlz,zhbmynbf58,y7syehdx1j,tk4s4so2v5,cfx19hlhzz,auu8jtlt9s,56k3vvgp50,l6tqff7qhr,elz6d8ogey,4d0zl3kpcf,fqw8v4fsfe,iyhriay62g,8uuncegm0u,3g5ops60dk'],\n  ['gmybp5o4to,s0p7kl12ed,vswh7pbn35,jjo2wr0dne,12oba2sr3e1,fbzf10zsgr,3cqs1f1jzn,ejt5wsqzq3,61wlspkymz,k0q08muo5q,9jecgq5ril,c2eywjolr4,6j02z3i12k,bdlj7kii03,7sfq0u419a','en4jpmhe3m,vy76kpghhy,hncfjcj55r,t1uj20eg1u,l7hvzrn7mx,b24udcy5bb,6r0l8oj642,4zxiqc6h47,dwpz3l517l,5lcfk1o28i,5ilfc6k2fd,llp4fkxcwx,hyl1yc8jnm,5p9atk26nc,gn2snxnazd','iw0o5m20e5,pnlh4gejy3,j0a1m5g3fm,feoim2z55o,14hzjfsyatc,kzhp9kaz3w,bl2zf2kj58,harz4acwlx,dost3mn1l8,jd05bdealr,kbm19r1n0r,l2nt8ln48t,6w3bwdeh14,2ov5qwshsc,3p4reiaccw','jxjxfurw0a,q9zv0wnz27,wsoaulizbp,nv104dj2ny,a5p63ybb70,k0ygrjuisi,h6ilb8nwlg,lkhull8sp4,j714fzo7ft,29wesi6fhw,3dw336fncl,5f0i44trq0,ea6rndo9vi,4qpppr5mp6,8ty7ew0j22','l6ijrjcgdb,p9ritd0k00,mrdmgkie77,gibszki5fe,k62u45fjls,f1ykrxp0c5,fsxcm6age0,adzkdayibv,ecxijom6mp,c5hhqs8wra,86d2ib83ks,hj22pifdgp,e199myxi25,3kgjypyiv5,lcsp969l5y','xjvoe5sh56,9nm6bc0mmd,k7zzeb0ri9,r089bgt5eu,r74bry7yks,gku87tfejo,6f7ooxo2wg,c13aloi72b,iok3gpclrx,35b4xmq1jj,63ckt2ds2c,psf9rpoow,kacd3vxred,h1hr34uwce,hbj8oetu6','10kuih6mp5t,xfdc7go3vf,61ur794m1u,dviuefpawn,ijei6qs8cj,lyil2tgngb,5jwjhpvn80,k45in58oym,859ayv431c,6m7punibjj,2lnht5z9hc,gajcg6ebbt,lija7cprlv,lqc3lomdyc,4zd8e0esvm','hkj7btpkti,jfmumy4x64,3ap2vfkq53,xk8j92yyiq,w95mqvxy1h,kc2sdeaz4f,b5odmeknl,30m89n8ufn,1shynaker2,is0g6sjc3n,eqgy5txi2w,h7sb7x85ei,8ldgu8g364,8230uwr5xj,yppnaqtto'],\n  ['qtdl5bttr0,ssk8atuxk8,hrtfdaecjq,i51l6kjphw,10yk8nvufg2,9z5lgadzgb,5b15b8fdwm,iv33ocp7fa,h5s1krdkp1,ikq5f6ag6o,kmcuctxmh4,2zqyr4jsgk,egnui09to,6e7kpox9wa,hwmbrtdc7r','m2mo34a77u,5eqtvfh63p,893ytc0twg,gzpdn76pjh,12ysmbvsgcz,bz28xk5bss,hrl8lz9vp,ff1fwwjyk2,73txc5oz3o,3fs71uo2to,9c98on0896,3eq4fxjuw9,b3bcg7nwyv,hbnf6pt7i2,4urtjviggq','ebqb0itd4a,us90cs8d16,eg2h1hk8bv,e3pp28s1qp,ksjeivmpt7,kqaphm6ztu,jnoqmk963l,ctvlw69k2s,8dz56ombap,dbv0ifuyu3,7dyji17qw7,encwql9fkl,5dfv4956g,evyie6i37c,9kgb5booep','igi9h6l2u2,kx2g63k187,htlobdwl9u,91jn5l8sy7,ry1fe6xwkq,c5styxdi0s,bhco2chkk2,h6ovbtmfav,du7pcr6u8w,1kyi74ldt,gdrru0upxv,38701ip527,d7n7m79qcy,jc80scesil,h7fcs1g8yc','6hya83k5di,keevcvzr7b,zjtyuxqbrv,8z66oww2jm,w5ri98z3dj,lq6t0a1p2v,gn9hbg82w0,fr7pm3rrty,l89svfs2ut,awc370qph4,d8or611e8e,j723vws4v8,h3bwqvymmt,6nl034e1rp,i26d1ifkpo','iwx40ibkvd,nqilg3q956,mv49q27734,sc3wnjhhqw,10ml5zkakgg,64k4ef6gbr,bwylm5l4lc,h5koyge6f7,dtmawdpg41,43vq7fd660,820r9rwif,1npurb4i3p,d1ftunuw02,i3zboax8od,4z09k1kg3r','z3p8x3blck,gyd08jkv3h,moq03w81vm,kc07xt8u7z,u3ihbj0vli,d63bpa8rqk,cofk3y5hos,jvbtfdytmg,6f6fx55d7p,8ubgwjvw3n,je8e7chmj2,7oh598v7d1,jsyph6p662,hyjhlytian,afd6ns91wx','o7oyy8wrci,b0cze91smk,tn79x0u3lw,7xz2jydwrd,bedc3ecw5x,cjfvtxvmy6,g4swyfkppa,7h4k540ns7,6k2z4h19hv,8ub3wnee5p,gwpw3gimx6,aflibvi0oi,i3gah02s7m,adnoxxkgod,6pcu0podc7'],\n  ['m0ypu0kozn,m57mlh8wmu,k9pu09u7dz,nn68telm5b,lt7q3qqvc5,s650loho5,i865i0a3we,hz67l3wkj7,8398rfj6gc,7p4fssefbe,7fwzuftmka,1i1lcv9z70,bln13lzgkw,41fwubkohz,1ji4fnkgcu','104wfz591x5,qxy01n8u78,12dwz7t6zyd,zyzd3vfl14,da8va9lunk,eq2g3qww4t,377xo1qa39,gffgwktpp,famy63pwko,85uk7901b7,club3ty822,ke1rffsagg,g5nxpnnxfq,kns2s2a9b3,4fua5nbl5u','q6pqvzp9z1,nf28zqd30j,ozl7fpaihg,jood3pfpi1,jzr7yhzsyy,ccufuis5oj,bcsdabibvn,9a8dtidsaq,69u26k0pcw,bbe21f67yb,8szgbtynck,3xw3gvx0oa,4085hzyr0l,fqudmjcz6p,ba6ctnzg8q','10x6dp18ddf,n989axt1hn,b41647f7ev,ipj4vgff0c,ng7ci65b59,4ge5w6jbhl,dbabls65vd,bjywkeij3g,jomj8m65zt,3m7g7oqok2,gwtephynpm,eiwsgvs55z,8s5razwa0m,88mnuab06b,ikiz5djuss','yedeaxari8,o0lo095em6,x6ny05zb1c,qe6ajuvtk9,mgyh8lwbfg,jww4lm7bn6,apyb7fzu63,jh34pp3598,i9hf2pqof8,5k07r68ilp,98su89jlm1,au0nzfwikh,a0s5qlnp8w,j9shtjy76p,1i5ptcw8u2','upmvld2yiz,sa4vfry05p,oebgbb6tpv,pjfbuiu4cc,hcgmp521lj,cr2c12thrn,963c6yuyo6,dckef71od3,92wl8xp037,8s9nj3rlb5,gjv01dxwfe,59rq9oqob4,l1e6f6f0ne,j4gng5cby4,ch8klbpxb6','prxt0be9e4,qfk83pb5qj,nf06ddg6ly,jfo2xl2lil,sj1vns01xk,59tlmwiqup,5durqumd0q,f0gaazytcn,l1w3mn91x3,cew72zfji3,bf5hmy32df,lnbaqo7kui,71ag3g04qh,t0vhja753,em1hr3yuhm','dka07it97l,k5d25je91c,hqryb4seq5,ms843el3fx,dd0ie8sc5o,jtrkoj9p1r,i0yce3t2if,5a1l5t3neg,5zyvubpe22,2ny6o5ul5x,c6o77rahq1,ly02eduvfa,dn1hqf62lk,5u9kvfx6bu,4uzhysfpm9'],\n  ['mmz6xkyiil,img807ci00,9oreyv4k8w,nwn25hsndu,x9f7rm3ikb,gohept88hr,4xyhc0kv2w,gngs7idjp7,9cm586sgqz,2pinvi0t6y,b2lveimiuo,gd0iev943k,erkt92ehom,flt6jcd9cc,5huhx9yjgq','hkk7qr5itw,fy4v05unzb,knfig8iol7,opqs2euwgc,iribibiq2d,cow3crbdq6,96ahgatnca,1vlwm6595u,jrdeqhf4qe,9wkmjk4t52,efhsyfnve7,1i77mh2jrr,6p5p9kw939,1pejgx4z21,6k7z6zizsc','ksajuubqnb,zqxcdk0raj,cal3jsqls7,zhjjmsvbc6,insa128ion,1oqkacftdi,6ixijjpgzp,4jvvktvkvl,4lib24u04a,6gusvqts6z,4t7amccxkx,8j5bhfu5wa,gth0v104rs,ghb0h371hz,etvu2l87uf','nr28zssm4d,9cvx5bddag,qesm79g87a,709np251v3,35rt541h31,9qkaul0e6t,ddzf12gulq,ctgmegee6l,2w9il0nou4,aeierkb1f,e4g2c2pfo6,zh524hrn5,26dh0l8pe7,1ua2q9wp9o,cuus6n00i2','lpxk16k4ri,r3dstrh4kk,9gzikt6aon,nq83l17erd,i4qw6c87r4,bqfokrc7fk,i6pzeaewjf,dlyc4x0xr4,a8mrj9mpkg,7rlzmhn4yj,d9gjmdoavk,cpxm7vp6ae,l3lm3fsfqw,7qwkve1hi3,fh4h7pe3yn','7r0yblgjgw,o63vdo9rt1,zj2fl7viyz,e3bvijy3lp,7qqg8k8is5,4uk3jy0wpj,2zsnz84ylh,hchsnwixvk,2avaa6dn7i,jib6i7uj3d,6k0bqvhbd6,d86uhlg6e9,8tjn3n76dh,4bqdiyokfw,jk9sj8p2f5','tm7kcvg5vd,gyai1r9owc,opx5owuh71,dox7jw59lg,bxt10d5kn1,8eboreqjar,hw2h5wqpqa,f77zevq7r0,bkeem69dak,1znctlsrh0,bv8ipguds3,7y8fflwvu,9ryxxflb0s,dpl2p1ltm8,6s15n69fby','wim24psv7g,j9agvb3yem,ldm2854zc5,n2pu0uhvja,4ephr6s5a9,co9n003j8u,64qir1rc5z,8o9rtwxu8w,7aob3iwsn2,32fv40co24,9vri0rog2u,5d9p0aukc5,i7p01amblk,cziyd3uzw2,2rdh13tvy0']\n];\n/* eslint-enable */\n\n\nexport const AFFINE_ODD_MULTIPLES_OF_BASEPOINT = LookupTable\n  .FromArrayOfStringsInRadix36Form(oddMultiplesAffinePointsInStringRadix36Form)\n\nexport const ED25519_BASEPOINT_TABLE_INNER: EdwardsBasepointTable = new EdwardsBasepointTable(\n  ed25519BasepointLookupTablesInStringRadix36Form.map(LookupTable.FromArrayOfStringsInRadix36Form),\n)\n","import {FieldElement, SQRT_M1} from './fieldElement'\nimport type {Scalar} from './scalar'\nimport type {EdwardsBasepointTable} from './edwardsBasepointTable'\nimport {EdwardsPoint} from './edwardsPoint'\nimport {ProjectivePoint} from './projectivePoint'\nimport {NafLookupTable} from './nafLookupTable'\nimport {\n  AFFINE_ODD_MULTIPLES_OF_BASEPOINT,\n  ED25519_BASEPOINT_TABLE_INNER,\n} from './tables'\n\nexport const INVSQRT_A_MINUS_D = new FieldElement([\n  278908739862762n,\n  821645201101625n,\n  8113234426968n,\n  1777959178193151n,\n  2118520810568447n,\n])\n\nexport class CompressedRistretto {\n  public bytes: Uint8Array\n\n  static FromBytes(data: Uint8Array): CompressedRistretto {\n    const compressedRistretto = new CompressedRistretto()\n    compressedRistretto.bytes = data\n    return compressedRistretto\n  }\n\n  ToBytes(): Uint8Array {\n    return this.bytes.slice()\n  }\n}\n\nexport class RistrettoBasepointTable {\n  public edwardsBasepointTable: EdwardsBasepointTable\n\n  public constructor() {\n    this.edwardsBasepointTable = ED25519_BASEPOINT_TABLE_INNER\n  }\n\n  Mul(s: Scalar): RistrettoPoint {\n    const ep = this.edwardsBasepointTable.Mul(s)\n\n    return new RistrettoPoint(ep)\n  }\n}\n\nexport class RistrettoPoint {\n  public Ep: EdwardsPoint\n\n  public constructor(ep: EdwardsPoint) {\n    this.Ep = ep\n  }\n\n  static FromCompressedPoint(compressed: CompressedRistretto): RistrettoPoint {\n    const bytes = compressed.ToBytes()\n    const ep = EdwardsPoint.FromCompressedPoint(bytes.slice())\n    return new RistrettoPoint(ep)\n  }\n\n  static FromCompressedPointBytes(bytes: Uint8Array): RistrettoPoint {\n    const ep = EdwardsPoint.FromCompressedPoint(bytes.slice())\n    return new RistrettoPoint(ep)\n  }\n\n  Negate(): RistrettoPoint {\n    const ep = this.Ep.Negate()\n    return new RistrettoPoint(ep)\n  }\n\n  /// Compute \\\\(aA + bB\\\\) in letiable time, where \\\\(B\\\\) is the\n  /// Ristretto basepoint.\n  static vartimeDoubleScalarMulBasepoint(\n    a: Scalar,\n    A: EdwardsPoint,\n    b: Scalar,\n  ): EdwardsPoint {\n    // console.log('a is ok', a.bytes.toString() === `47,22,65,197,127,131,55,10,206,175,12,199,162,219,233,169,198,195,156,216,106,174,24,128,229,162,23,37,178,131,78,5`)\n    // console.log('b is ok', b.bytes.toString() === `73,169,253,171,114,135,149,240,248,209,238,64,225,244,19,87,70,53,221,245,134,0,153,2,119,98,93,49,221,3,16,3`)\n\n    const aNaf = a.NonAdjacentForm(5)\n    // console.log('a naf is ok', aNaf.toString() === '15,0,0,0,0,-15,0,0,0,0,0,3,0,0,0,0,1,0,0,0,0,0,-11,0,0,0,0,-7,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,15,0,0,0,0,3,0,0,0,0,5,0,0,0,0,0,0,0,7,0,0,0,0,-1,0,0,0,0,0,11,0,0,0,0,0,3,0,0,0,0,0,7,0,0,0,0,0,11,0,0,0,0,0,0,-3,0,0,0,0,-9,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,-11,0,0,0,0,-5,0,0,0,0,-7,0,0,0,0,0,0,-15,0,0,0,0,0,-3,0,0,0,0,5,0,0,0,0,0,-5,0,0,0,0,11,0,0,0,0,-13,0,0,0,0,0,0,11,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,-9,0,0,0,0,9,0,0,0,0,15,0,0,0,0,-15,0,0,0,0,-13,0,0,0,0,9,0,0,0,0,0,-5,0,0,0,0,0,1,0,0,0,0,-3,0,0,0,0,-11,0,0,0,0,3,0,0,0,0,0,0')\n\n    const bNaf = b.NonAdjacentForm(8)\n    // console.log('b naf is ok', bNaf.toString() === '73,0,0,0,0,0,0,0,-87,0,0,0,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,-85,0,0,0,0,0,0,0,-35,0,0,0,0,0,0,0,0,-79,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,-113,0,0,0,0,0,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,0,0,0,0,0,-123,0,0,0,0,0,0,0,0,0,-11,0,0,0,0,0,0,0,0,0,-59,0,0,0,0,0,0,0,0,-53,0,0,0,0,0,0,0,-87,0,0,0,0,0,0,0,-89,0,0,0,0,0,0,0,0,0,-81,0,0,0,0,0,0,0,0,0,0,-121,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,-103,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,119,0,0,0,0,0,0,0,0,-79,0,0,0,0,0,0,0,-81,0,0,0,0,0,0,0,-103,0,0,0,0,0,0,0,-17,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,49,0,0,0,0,0,0,0,0,0,0,0')\n\n    let i = 0\n\n    /// Find starting index\n    for (let ind = 255; ind >= 0; ind--) {\n      i = ind\n      if (aNaf[i] !== 0 || bNaf[i] !== 0) {\n        break\n      }\n    }\n\n    const tableA = NafLookupTable.FromEdwardsPoint(A)\n    const tableB = AFFINE_ODD_MULTIPLES_OF_BASEPOINT\n\n    let r = ProjectivePoint.Identity()\n\n    while (i >= 0) {\n      let t = r.Double()\n\n      if (aNaf[i] > 0) {\n        const t1 = t.ToExtended()\n        const i1 = Math.floor(Math.abs((-1 * aNaf[i]) / 2))\n        const t2 = tableA.Pnp[i1]\n        t = t1.AddPnp(t2)\n      } else if (aNaf[i] < 0) {\n        const t1 = t.ToExtended()\n        const i1 = Math.floor(Math.abs((-1 * aNaf[i]) / 2))\n        const t2 = tableA.Pnp[i1]\n        t = t1.SubPnp(t2)\n      }\n\n      if (bNaf[i] > 0) {\n        const t1 = t.ToExtended()\n        const i1 = Math.floor(Math.abs((-1 * bNaf[i]) / 2))\n        const t2 = tableB.affineNielsPoints[i1]\n        t = t1.AddAnp(t2)\n      } else if (bNaf[i] < 0) {\n        const t1 = t.ToExtended()\n        const i1 = Math.floor(Math.abs((-1 * bNaf[i]) / 2))\n        const t2 = tableB.affineNielsPoints[i1]\n        t = t1.SubAnp(t2)\n      }\n\n      r = t.ToProjective()\n\n      i--\n    }\n\n    return r.ToExtended()\n  }\n\n  /// Compress this point using the Ristretto encoding.\n  Compress(): CompressedRistretto {\n    const X = this.Ep.X\n    const Y = this.Ep.Y\n    const Z = this.Ep.Z\n    const T = this.Ep.T\n\n    const u1 = Z.Add(Y).Mul(Z.Sub(Y))\n    const u2 = X.Mul(Y)\n\n    // Ignore return value since this is always square\n    const inv = FieldElement.SqrtRatioI(FieldElement.One(), u1.Mul(u2.Square()))\n    // let inv = invsqrt(u1.Mul(u2.Square()));\n    const i1 = inv.i1.Mul(u1)\n    const i2 = inv.i1.Mul(u2)\n    const zInv = i1.Mul(i2.Mul(T))\n    const denInv = i2\n\n    const iX = X.Mul(SQRT_M1)\n    const iY = Y.Mul(SQRT_M1)\n    const ristretto_magic = INVSQRT_A_MINUS_D\n    const enchanted_denominator = i1.Mul(ristretto_magic)\n    const rotate = T.Mul(zInv).IsNegative()\n\n    X.ConditionalAssign(iY, rotate)\n    Y.ConditionalAssign(iX, rotate)\n    denInv.ConditionalAssign(enchanted_denominator, rotate)\n\n    Y.ConditionalNegate(X.Mul(zInv).IsNegative())\n\n    const s = denInv.Mul(Z.Sub(Y))\n    const s_is_negative = s.IsNegative()\n    s.ConditionalNegate(s_is_negative)\n\n    const res = CompressedRistretto.FromBytes(s.ToBytes())\n\n    return res\n  }\n}\n","export const toTwos = (value: bigint, width: number | bigint): bigint => {\n  return value >= 0 ? value : (1n << BigInt(width)) + value\n}\n\nconst DEFAULT_OPTS = {bitLength: -1, isLe: true, isNegative: false}\n\nexport const bigIntToUint8Array = (value: bigint | null, options: {bitLength?: number, isLe?: boolean, isNegative?: boolean} = DEFAULT_OPTS): Uint8Array => {\n  options = {...DEFAULT_OPTS, ...options}\n  const {bitLength, isLe, isNegative} = options\n\n  const byteLength = Math.ceil(bitLength === -1\n    ? (value || 0n).toString(2).length / 8 // if bitLength is -1, take the real value's bit length\n    : (bitLength || 0) / 8, // if bitLength is not -1, take the bitLength\n  )\n\n  if (!value) {\n    return new Uint8Array(bitLength === -1 ? 1 : byteLength)\n  }\n\n  const bn = isNegative\n    ? toTwos(value, byteLength * 8)\n    : value\n\n  const arr = (bn\n    .toString(16)\n    .padStart(byteLength * 2, '0')\n    .match(/.{2}/g) || []\n  ).map(x => parseInt(x, 16))\n\n  return new Uint8Array(isLe ? arr.reverse() : arr)\n}\n\nconst REGEX_HEX_PREFIXED = /^0x[\\da-fA-F]+$/\n\nexport function isHex(value: unknown, bitLength = -1, ignoreLength?: boolean): boolean {\n  return typeof value === 'string' && (value === '0x' || REGEX_HEX_PREFIXED.test(value)) && (\n    bitLength === -1\n      ? (ignoreLength || (value.length % 2 === 0))\n      : (value.length === (2 + Math.ceil(bitLength / 4)))\n  )\n}\n\nexport const uInt8ArrayToHex = (bytes: Uint8Array | null): string => {\n  return !bytes ? '0x' : bytes.reduce((str, byte) => str + byte.toString(16).padStart(2, '0'), '0x')\n}\n\nexport const hexStringToUint8Array = (str: string | null, bitLength: number = -1): Uint8Array => {\n  if (!str) {\n    return new Uint8Array()\n  }\n  if (!isHex(str)) {\n    throw new Error(`Invalid hex string: ${str}`)\n  }\n  if (str.startsWith('0x')) {\n    str = str.slice(2)\n  }\n\n  if (bitLength !== -1) {\n    str = (bitLength / 4 < str.length) // if the bit length is less than the string length\n      ? str.slice(0, bitLength / 4) // slice the string to the bit length\n      : str.padStart(bitLength / 4, '0') // otherwise, pad the string to the bit length\n  }\n  if (str.length % 2 !== 0) {\n    str = str + '0'\n  }\n\n  const pairs = str\n    .replace(/^0x/, '')\n    .match(/.{1,2}/g)\n  if (!pairs) {\n    return new Uint8Array()\n  }\n  const bytes = pairs.map(b => parseInt(b, 16))\n  return new Uint8Array(bytes)\n}\n\nexport function u8aConcatStrict(u8as: readonly Uint8Array[], length = 0): Uint8Array {\n  let offset = 0\n\n  if (!length) {\n    for (let i = 0; i < u8as.length; i++) {\n      length += u8as[i].length\n    }\n  }\n\n  const result = new Uint8Array(length)\n\n  for (let i = 0; i < u8as.length; i++) {\n    result.set(u8as[i], offset)\n    offset += u8as[i].length\n  }\n\n  return result\n}\n\nconst maxU8 = 0b111111n\nconst maxU16 = 0b11111111111111n\nconst maxU32 = 0b1111111111\nconst bl16 = {bitLength: 16}\nconst bl32 = {bitLength: 32}\n\nconst compactToU8a = (value: bigint | number): Uint8Array => {\n  const bn = BigInt(value)\n\n  if (bn <= maxU8) {\n    return new Uint8Array([Number(bn << 2n)])\n  } else if (bn <= maxU16) {\n    return bigIntToUint8Array((bn << 2n) + 1n, bl16)\n  } else if (bn <= maxU32) {\n    return bigIntToUint8Array((bn << 2n) + 2n, bl32)\n  }\n\n  const u8a = bigIntToUint8Array(bn)\n  let length = u8a.length\n\n  while (u8a[length - 1] === 0) {\n    length--\n  }\n\n  if (length < 4) {\n    throw new Error('Invalid length, previous checks match anything less than 2^30')\n  }\n\n  return u8aConcatStrict([\n    new Uint8Array([((length - 4) << 2) + 0b11]),\n    u8a.subarray(0, length),\n  ])\n}\n\nexport function compactAddLength(input: Uint8Array): Uint8Array {\n  return u8aConcatStrict([\n    compactToU8a(input.length),\n    input,\n  ])\n}\n","import {bigIntToUint8Array, compactAddLength, hexStringToUint8Array, isHex} from './bytes'\nimport {blake2b} from '@noble/hashes/blake2b'\nimport {mnemonicToMiniSecretAsync, mnemonicToMiniSecret} from './mnemonic'\nimport {Keypair} from '../../src/keypair'\nimport {Transcript} from '../merlin/transcript'\nimport {SecretKey} from '../../src/signingContext'\nimport {b} from '../templateLiteralFunctions'\nimport {Scalar, ScalarAdd, ScalarBigintToBytesForm, ScalarBytesToBigintForm} from '../../src/scalar'\n\nexport const DEFAULT_MNEMONIC = 'bottom drive obey lake curtain smoke basket hold race lonely fit walk'\n\nconst REGEX_DIGITS_ONLY = /^\\d+$/\nexport interface Derivation { value: string, hard?: boolean, cc: Uint8Array }\n\nexport const parseUri = (uri: string): {mnemonic: string, password: string, derivations: Derivation[]} => {\n  const derivations: Derivation[] = []\n\n  const [beforePassword, password = ''] = uri.split('///')\n  const hardSeparatedParts = beforePassword.split('//')\n\n  let mnemonic = hardSeparatedParts.shift() || DEFAULT_MNEMONIC\n  const mnemonicParts = mnemonic.split('/')\n  mnemonic = mnemonicParts.shift() || ''\n  if (!mnemonic) {\n    throw new Error(`Invalid mnemonic: ${uri}`)\n  }\n  if (mnemonicParts.length) {\n    derivations.push(...mnemonicParts.map(value => ({value, cc: getChainCode(value)})))\n  }\n\n  for (const part of hardSeparatedParts) {\n    const softSeparatedParts = part.split('/')\n    const hard = softSeparatedParts.shift()\n    if (!hard) throw new Error('Invalid hard derivation')\n    derivations.push({value: hard, hard: true, cc: getChainCode(hard)})\n    derivations.push(...softSeparatedParts.map(value => ({value, cc: getChainCode(value)})))\n  }\n\n  return {\n    mnemonic,\n    password,\n    derivations,\n  }\n}\n\nconst textEncoder = new TextEncoder()\n\nexport const getChainCode = (str: string): Uint8Array => {\n  const value = REGEX_DIGITS_ONLY.test(str) ? BigInt(str) : str\n\n  let u8a: Uint8Array\n\n  if (typeof value === 'bigint') {\n    u8a = bigIntToUint8Array(value, {bitLength: 256, isLe: true})\n  } else { // value is string\n    u8a = isHex(value)\n      ? hexStringToUint8Array(value)\n      : compactAddLength(textEncoder.encode(value))\n  }\n\n  const chainCode = new Uint8Array(32)\n  chainCode.set(u8a.length > 32 ? blake2b(u8a, {dkLen: 32}) : u8a, 0)\n\n  return chainCode\n}\n\nexport const deriveHard = (keypair: Keypair, chainCode: Uint8Array): Keypair => {\n  const transcript = new Transcript(b`SchnorrRistrettoHDKD`)\n\n  transcript.append_message(b`sign-bytes`, new Uint8Array())\n  transcript.append_message(b`chain-code`, chainCode)\n  transcript.append_message(b`secret-key`, keypair.secretKey.key.bytes.slice())\n\n  const msk = new Uint8Array(32)\n  transcript.challenge_bytes(b`HDKD-hard`, msk)\n\n  const chaincode_2 = new Uint8Array(32)\n  transcript.challenge_bytes(b`HDKD-chaincode`, chaincode_2)\n\n  return Keypair.FromMiniSecret(msk)\n}\n\nexport const deriveSoft = (keypair: Keypair, chainCode: Uint8Array): Keypair => {\n  const transcript = new Transcript(b`SchnorrRistrettoHDKD`)\n  transcript.append_message(b`sign-bytes`, new Uint8Array())\n\n  transcript.append_message(b`chain-code`, chainCode)\n  transcript.append_message(b`public-key`, keypair.publicKey.key.slice())\n\n  const buf = new Uint8Array(64)\n  transcript.challenge_bytes(b`HDKD-scalar`, buf)\n  const scalar = Scalar.FromBytesModOrderWide(buf)\n\n  const chaincode_2 = new Uint8Array(32)\n  transcript.challenge_bytes(b`HDKD-chaincode`, chaincode_2)\n\n  const nonce = new Uint8Array(32)\n  transcript.witness_bytes(b`HDKD-nonce`, nonce, [keypair.secretKey.nonce.slice(), keypair.secretKey.ToBytes().slice()])\n\n  const derivedSecretKeyKey = Scalar.FromBytes(ScalarBigintToBytesForm(\n    ScalarAdd(\n      ScalarBytesToBigintForm(keypair.secretKey.key.bytes.slice()),\n      ScalarBytesToBigintForm(scalar),\n    ),\n  ))\n  const derivedSecretKey = SecretKey.FromScalarAndNonce(derivedSecretKeyKey, nonce)\n  const publicKey = derivedSecretKey.ToPublicKey()\n\n  return new Keypair(publicKey, derivedSecretKey)\n}\n\nconst processDerivations = (keypair: Keypair, derivations: Derivation[]): Keypair => {\n  for (const {hard, cc} of derivations) {\n    keypair = hard ? deriveHard(keypair, cc) : deriveSoft(keypair, cc)\n  }\n\n  return keypair\n}\n\nexport const parseUriAndDerive = (uri: string): Keypair => {\n  const {mnemonic, password, derivations} = parseUri(uri)\n\n  return processDerivations(\n    Keypair.FromMiniSecret(mnemonicToMiniSecret(mnemonic, password)),\n    derivations,\n  )\n}\n\nexport const parseUriAndDeriveAsync = async(uri: string): Promise<Keypair> => {\n  const {mnemonic, password, derivations} = parseUri(uri)\n\n  return processDerivations(\n    Keypair.FromMiniSecret(await mnemonicToMiniSecretAsync(mnemonic, password)),\n    derivations,\n  )\n}\n","import {sha256} from '@noble/hashes/sha256'\nimport {sha512} from '@noble/hashes/sha512'\nimport {pbkdf2, pbkdf2Async} from '@noble/hashes/pbkdf2'\nimport {randomBytes} from '@noble/hashes/utils'\n\nconst INVALID_MNEMONIC = 'Invalid mnemonicToMiniSecretAsync'\nconst INVALID_ENTROPY = 'Invalid entropy'\nconst INVALID_CHECKSUM = 'Invalid mnemonicToMiniSecretAsync checksum'\n\nexport const DEFAULT_WORDLIST: string = 'abandon|ability|able|about|above|absent|absorb|abstract|absurd|abuse|access|accident|account|accuse|achieve|acid|acoustic|acquire|across|act|action|actor|actress|actual|adapt|add|addict|address|adjust|admit|adult|advance|advice|aerobic|affair|afford|afraid|again|age|agent|agree|ahead|aim|air|airport|aisle|alarm|album|alcohol|alert|alien|all|alley|allow|almost|alone|alpha|already|also|alter|always|amateur|amazing|among|amount|amused|analyst|anchor|ancient|anger|angle|angry|animal|ankle|announce|annual|another|answer|antenna|antique|anxiety|any|apart|apology|appear|apple|approve|april|arch|arctic|area|arena|argue|arm|armed|armor|army|around|arrange|arrest|arrive|arrow|art|artefact|artist|artwork|ask|aspect|assault|asset|assist|assume|asthma|athlete|atom|attack|attend|attitude|attract|auction|audit|august|aunt|author|auto|autumn|average|avocado|avoid|awake|aware|away|awesome|awful|awkward|axis|baby|bachelor|bacon|badge|bag|balance|balcony|ball|bamboo|banana|banner|bar|barely|bargain|barrel|base|basic|basket|battle|beach|bean|beauty|because|become|beef|before|begin|behave|behind|believe|below|belt|bench|benefit|best|betray|better|between|beyond|bicycle|bid|bike|bind|biology|bird|birth|bitter|black|blade|blame|blanket|blast|bleak|bless|blind|blood|blossom|blouse|blue|blur|blush|board|boat|body|boil|bomb|bone|bonus|book|boost|border|boring|borrow|boss|bottom|bounce|box|boy|bracket|brain|brand|brass|brave|bread|breeze|brick|bridge|brief|bright|bring|brisk|broccoli|broken|bronze|broom|brother|brown|brush|bubble|buddy|budget|buffalo|build|bulb|bulk|bullet|bundle|bunker|burden|burger|burst|bus|business|busy|butter|buyer|buzz|cabbage|cabin|cable|cactus|cage|cake|call|calm|camera|camp|can|canal|cancel|candy|cannon|canoe|canvas|canyon|capable|capital|captain|car|carbon|card|cargo|carpet|carry|cart|case|cash|casino|castle|casual|cat|catalog|catch|category|cattle|caught|cause|caution|cave|ceiling|celery|cement|census|century|cereal|certain|chair|chalk|champion|change|chaos|chapter|charge|chase|chat|cheap|check|cheese|chef|cherry|chest|chicken|chief|child|chimney|choice|choose|chronic|chuckle|chunk|churn|cigar|cinnamon|circle|citizen|city|civil|claim|clap|clarify|claw|clay|clean|clerk|clever|click|client|cliff|climb|clinic|clip|clock|clog|close|cloth|cloud|clown|club|clump|cluster|clutch|coach|coast|coconut|code|coffee|coil|coin|collect|color|column|combine|come|comfort|comic|common|company|concert|conduct|confirm|congress|connect|consider|control|convince|cook|cool|copper|copy|coral|core|corn|correct|cost|cotton|couch|country|couple|course|cousin|cover|coyote|crack|cradle|craft|cram|crane|crash|crater|crawl|crazy|cream|credit|creek|crew|cricket|crime|crisp|critic|crop|cross|crouch|crowd|crucial|cruel|cruise|crumble|crunch|crush|cry|crystal|cube|culture|cup|cupboard|curious|current|curtain|curve|cushion|custom|cute|cycle|dad|damage|damp|dance|danger|daring|dash|daughter|dawn|day|deal|debate|debris|decade|december|decide|decline|decorate|decrease|deer|defense|define|defy|degree|delay|deliver|demand|demise|denial|dentist|deny|depart|depend|deposit|depth|deputy|derive|describe|desert|design|desk|despair|destroy|detail|detect|develop|device|devote|diagram|dial|diamond|diary|dice|diesel|diet|differ|digital|dignity|dilemma|dinner|dinosaur|direct|dirt|disagree|discover|disease|dish|dismiss|disorder|display|distance|divert|divide|divorce|dizzy|doctor|document|dog|doll|dolphin|domain|donate|donkey|donor|door|dose|double|dove|draft|dragon|drama|drastic|draw|dream|dress|drift|drill|drink|drip|drive|drop|drum|dry|duck|dumb|dune|during|dust|dutch|duty|dwarf|dynamic|eager|eagle|early|earn|earth|easily|east|easy|echo|ecology|economy|edge|edit|educate|effort|egg|eight|either|elbow|elder|electric|elegant|element|elephant|elevator|elite|else|embark|embody|embrace|emerge|emotion|employ|empower|empty|enable|enact|end|endless|endorse|enemy|energy|enforce|engage|engine|enhance|enjoy|enlist|enough|enrich|enroll|ensure|enter|entire|entry|envelope|episode|equal|equip|era|erase|erode|erosion|error|erupt|escape|essay|essence|estate|eternal|ethics|evidence|evil|evoke|evolve|exact|example|excess|exchange|excite|exclude|excuse|execute|exercise|exhaust|exhibit|exile|exist|exit|exotic|expand|expect|expire|explain|expose|express|extend|extra|eye|eyebrow|fabric|face|faculty|fade|faint|faith|fall|false|fame|family|famous|fan|fancy|fantasy|farm|fashion|fat|fatal|father|fatigue|fault|favorite|feature|february|federal|fee|feed|feel|female|fence|festival|fetch|fever|few|fiber|fiction|field|figure|file|film|filter|final|find|fine|finger|finish|fire|firm|first|fiscal|fish|fit|fitness|fix|flag|flame|flash|flat|flavor|flee|flight|flip|float|flock|floor|flower|fluid|flush|fly|foam|focus|fog|foil|fold|follow|food|foot|force|forest|forget|fork|fortune|forum|forward|fossil|foster|found|fox|fragile|frame|frequent|fresh|friend|fringe|frog|front|frost|frown|frozen|fruit|fuel|fun|funny|furnace|fury|future|gadget|gain|galaxy|gallery|game|gap|garage|garbage|garden|garlic|garment|gas|gasp|gate|gather|gauge|gaze|general|genius|genre|gentle|genuine|gesture|ghost|giant|gift|giggle|ginger|giraffe|girl|give|glad|glance|glare|glass|glide|glimpse|globe|gloom|glory|glove|glow|glue|goat|goddess|gold|good|goose|gorilla|gospel|gossip|govern|gown|grab|grace|grain|grant|grape|grass|gravity|great|green|grid|grief|grit|grocery|group|grow|grunt|guard|guess|guide|guilt|guitar|gun|gym|habit|hair|half|hammer|hamster|hand|happy|harbor|hard|harsh|harvest|hat|have|hawk|hazard|head|health|heart|heavy|hedgehog|height|hello|helmet|help|hen|hero|hidden|high|hill|hint|hip|hire|history|hobby|hockey|hold|hole|holiday|hollow|home|honey|hood|hope|horn|horror|horse|hospital|host|hotel|hour|hover|hub|huge|human|humble|humor|hundred|hungry|hunt|hurdle|hurry|hurt|husband|hybrid|ice|icon|idea|identify|idle|ignore|ill|illegal|illness|image|imitate|immense|immune|impact|impose|improve|impulse|inch|include|income|increase|index|indicate|indoor|industry|infant|inflict|inform|inhale|inherit|initial|inject|injury|inmate|inner|innocent|input|inquiry|insane|insect|inside|inspire|install|intact|interest|into|invest|invite|involve|iron|island|isolate|issue|item|ivory|jacket|jaguar|jar|jazz|jealous|jeans|jelly|jewel|job|join|joke|journey|joy|judge|juice|jump|jungle|junior|junk|just|kangaroo|keen|keep|ketchup|key|kick|kid|kidney|kind|kingdom|kiss|kit|kitchen|kite|kitten|kiwi|knee|knife|knock|know|lab|label|labor|ladder|lady|lake|lamp|language|laptop|large|later|latin|laugh|laundry|lava|law|lawn|lawsuit|layer|lazy|leader|leaf|learn|leave|lecture|left|leg|legal|legend|leisure|lemon|lend|length|lens|leopard|lesson|letter|level|liar|liberty|library|license|life|lift|light|like|limb|limit|link|lion|liquid|list|little|live|lizard|load|loan|lobster|local|lock|logic|lonely|long|loop|lottery|loud|lounge|love|loyal|lucky|luggage|lumber|lunar|lunch|luxury|lyrics|machine|mad|magic|magnet|maid|mail|main|major|make|mammal|man|manage|mandate|mango|mansion|manual|maple|marble|march|margin|marine|market|marriage|mask|mass|master|match|material|math|matrix|matter|maximum|maze|meadow|mean|measure|meat|mechanic|medal|media|melody|melt|member|memory|mention|menu|mercy|merge|merit|merry|mesh|message|metal|method|middle|midnight|milk|million|mimic|mind|minimum|minor|minute|miracle|mirror|misery|miss|mistake|mix|mixed|mixture|mobile|model|modify|mom|moment|monitor|monkey|monster|month|moon|moral|more|morning|mosquito|mother|motion|motor|mountain|mouse|move|movie|much|muffin|mule|multiply|muscle|museum|mushroom|music|must|mutual|myself|mystery|myth|naive|name|napkin|narrow|nasty|nation|nature|near|neck|need|negative|neglect|neither|nephew|nerve|nest|net|network|neutral|never|news|next|nice|night|noble|noise|nominee|noodle|normal|north|nose|notable|note|nothing|notice|novel|now|nuclear|number|nurse|nut|oak|obey|object|oblige|obscure|observe|obtain|obvious|occur|ocean|october|odor|off|offer|office|often|oil|okay|old|olive|olympic|omit|once|one|onion|online|only|open|opera|opinion|oppose|option|orange|orbit|orchard|order|ordinary|organ|orient|original|orphan|ostrich|other|outdoor|outer|output|outside|oval|oven|over|own|owner|oxygen|oyster|ozone|pact|paddle|page|pair|palace|palm|panda|panel|panic|panther|paper|parade|parent|park|parrot|party|pass|patch|path|patient|patrol|pattern|pause|pave|payment|peace|peanut|pear|peasant|pelican|pen|penalty|pencil|people|pepper|perfect|permit|person|pet|phone|photo|phrase|physical|piano|picnic|picture|piece|pig|pigeon|pill|pilot|pink|pioneer|pipe|pistol|pitch|pizza|place|planet|plastic|plate|play|please|pledge|pluck|plug|plunge|poem|poet|point|polar|pole|police|pond|pony|pool|popular|portion|position|possible|post|potato|pottery|poverty|powder|power|practice|praise|predict|prefer|prepare|present|pretty|prevent|price|pride|primary|print|priority|prison|private|prize|problem|process|produce|profit|program|project|promote|proof|property|prosper|protect|proud|provide|public|pudding|pull|pulp|pulse|pumpkin|punch|pupil|puppy|purchase|purity|purpose|purse|push|put|puzzle|pyramid|quality|quantum|quarter|question|quick|quit|quiz|quote|rabbit|raccoon|race|rack|radar|radio|rail|rain|raise|rally|ramp|ranch|random|range|rapid|rare|rate|rather|raven|raw|razor|ready|real|reason|rebel|rebuild|recall|receive|recipe|record|recycle|reduce|reflect|reform|refuse|region|regret|regular|reject|relax|release|relief|rely|remain|remember|remind|remove|render|renew|rent|reopen|repair|repeat|replace|report|require|rescue|resemble|resist|resource|response|result|retire|retreat|return|reunion|reveal|review|reward|rhythm|rib|ribbon|rice|rich|ride|ridge|rifle|right|rigid|ring|riot|ripple|risk|ritual|rival|river|road|roast|robot|robust|rocket|romance|roof|rookie|room|rose|rotate|rough|round|route|royal|rubber|rude|rug|rule|run|runway|rural|sad|saddle|sadness|safe|sail|salad|salmon|salon|salt|salute|same|sample|sand|satisfy|satoshi|sauce|sausage|save|say|scale|scan|scare|scatter|scene|scheme|school|science|scissors|scorpion|scout|scrap|screen|script|scrub|sea|search|season|seat|second|secret|section|security|seed|seek|segment|select|sell|seminar|senior|sense|sentence|series|service|session|settle|setup|seven|shadow|shaft|shallow|share|shed|shell|sheriff|shield|shift|shine|ship|shiver|shock|shoe|shoot|shop|short|shoulder|shove|shrimp|shrug|shuffle|shy|sibling|sick|side|siege|sight|sign|silent|silk|silly|silver|similar|simple|since|sing|siren|sister|situate|six|size|skate|sketch|ski|skill|skin|skirt|skull|slab|slam|sleep|slender|slice|slide|slight|slim|slogan|slot|slow|slush|small|smart|smile|smoke|smooth|snack|snake|snap|sniff|snow|soap|soccer|social|sock|soda|soft|solar|soldier|solid|solution|solve|someone|song|soon|sorry|sort|soul|sound|soup|source|south|space|spare|spatial|spawn|speak|special|speed|spell|spend|sphere|spice|spider|spike|spin|spirit|split|spoil|sponsor|spoon|sport|spot|spray|spread|spring|spy|square|squeeze|squirrel|stable|stadium|staff|stage|stairs|stamp|stand|start|state|stay|steak|steel|stem|step|stereo|stick|still|sting|stock|stomach|stone|stool|story|stove|strategy|street|strike|strong|struggle|student|stuff|stumble|style|subject|submit|subway|success|such|sudden|suffer|sugar|suggest|suit|summer|sun|sunny|sunset|super|supply|supreme|sure|surface|surge|surprise|surround|survey|suspect|sustain|swallow|swamp|swap|swarm|swear|sweet|swift|swim|swing|switch|sword|symbol|symptom|syrup|system|table|tackle|tag|tail|talent|talk|tank|tape|target|task|taste|tattoo|taxi|teach|team|tell|ten|tenant|tennis|tent|term|test|text|thank|that|theme|then|theory|there|they|thing|this|thought|three|thrive|throw|thumb|thunder|ticket|tide|tiger|tilt|timber|time|tiny|tip|tired|tissue|title|toast|tobacco|today|toddler|toe|together|toilet|token|tomato|tomorrow|tone|tongue|tonight|tool|tooth|top|topic|topple|torch|tornado|tortoise|toss|total|tourist|toward|tower|town|toy|track|trade|traffic|tragic|train|transfer|trap|trash|travel|tray|treat|tree|trend|trial|tribe|trick|trigger|trim|trip|trophy|trouble|truck|true|truly|trumpet|trust|truth|try|tube|tuition|tumble|tuna|tunnel|turkey|turn|turtle|twelve|twenty|twice|twin|twist|two|type|typical|ugly|umbrella|unable|unaware|uncle|uncover|under|undo|unfair|unfold|unhappy|uniform|unique|unit|universe|unknown|unlock|until|unusual|unveil|update|upgrade|uphold|upon|upper|upset|urban|urge|usage|use|used|useful|useless|usual|utility|vacant|vacuum|vague|valid|valley|valve|van|vanish|vapor|various|vast|vault|vehicle|velvet|vendor|venture|venue|verb|verify|version|very|vessel|veteran|viable|vibrant|vicious|victory|video|view|village|vintage|violin|virtual|virus|visa|visit|visual|vital|vivid|vocal|voice|void|volcano|volume|vote|voyage|wage|wagon|wait|walk|wall|walnut|want|warfare|warm|warrior|wash|wasp|waste|water|wave|way|wealth|weapon|wear|weasel|weather|web|wedding|weekend|weird|welcome|west|wet|whale|what|wheat|wheel|when|where|whip|whisper|wide|width|wife|wild|will|win|window|wine|wing|wink|winner|winter|wire|wisdom|wise|wish|witness|wolf|woman|wonder|wood|wool|word|work|world|worry|worth|wrap|wreck|wrestle|wrist|write|wrong|yard|year|yellow|you|young|youth|zebra|zero|zone|zoo'\n\nconst WORDS_MAP = DEFAULT_WORDLIST.split('|').reduce<Record<string, number>>((acc, elem, index) => {\n  acc[elem] = index\n  return acc\n}, {})\n\n// returns the first n bits of the sha256 hash of the input\n// n is the length of the entropy in bytes divided by 4\n// for 12 word mnemonics, n = 16 / 4 = 4\n// for 15 word mnemonics, n = 20 / 4 = 5\n// and so on\nconst sha256FirstNBits = (entropy: Uint8Array): string =>\n  sha256(entropy)[0]\n    .toString(2)\n    .padStart(8, '0')\n    .slice(0, entropy.length / 4)\n\nexport const mnemonicToEntropy = (mnemonic: string): Uint8Array => {\n  const words = (mnemonic.normalize('NFKD')).split(' ').filter(word => !!word)\n\n  if (words.length % 3 !== 0 || words.length < 12 || words.length > 24) {\n    throw new Error(INVALID_MNEMONIC)\n  }\n\n  // convert word indices to 11 bit binary strings\n  const bits = words\n    .map((word): string => {\n      if (!(word in WORDS_MAP)) {\n        throw new Error(INVALID_MNEMONIC)\n      }\n\n      const index = WORDS_MAP[word]\n\n      return index.toString(2).padStart(11, '0')\n    })\n    .join('')\n\n  const dividerIndex = bits.length - (words.length / 3)\n  const entropyBits = bits.slice(0, dividerIndex)\n  const checksumBits = bits.slice(dividerIndex)\n\n  // calculate the checksum and compare\n  const matched = entropyBits.match(/(.{1,8})/g)\n  const entropyBytes = matched?.map(bin => parseInt(bin, 2))\n\n  if (!entropyBytes || (entropyBytes.length % 4 !== 0) || (entropyBytes.length < 16) || (entropyBytes.length > 32)) {\n    throw new Error(INVALID_ENTROPY)\n  }\n\n  const entropy = Uint8Array.from(entropyBytes)\n\n  if (sha256FirstNBits(entropy) !== checksumBits) {\n    throw new Error(INVALID_CHECKSUM)\n  }\n\n  return entropy\n}\n\nexport function entropyToMnemonic(entropy: Uint8Array): string {\n  // entropy length should be one of [16, 20, 24, 28, 32]\n  if ((entropy.length % 4 !== 0) || (entropy.length < 16) || (entropy.length > 32)) {\n    throw new Error(INVALID_ENTROPY)\n  }\n\n  const entropyInBinaryForm = Array.from(entropy)\n    .map(byte => byte.toString(2).padStart(8, '0')).join('')\n\n  const entropyWithChecksum = entropyInBinaryForm + sha256FirstNBits(entropy)\n\n  const splittedBy11BinaryDigits = entropyWithChecksum.match(/(.{1,11})/g)\n  const wordNumbers = splittedBy11BinaryDigits?.map(binary => parseInt(binary, 2))\n\n  if (!wordNumbers || (wordNumbers.length < 12)) {\n    throw new Error('Unable to map entropy to mnemonic')\n  }\n\n  const WORDLIST = DEFAULT_WORDLIST.split('|')\n  const words = wordNumbers.map((wordNumber) => WORDLIST[wordNumber])\n\n  return words.join(' ')\n}\n\nexport const generateMnemonic = (strengthInBits = 128): string => {\n  return entropyToMnemonic(randomBytes(strengthInBits / 8)).toString().trim()\n}\n\nexport const validateMnemonic = (mnemonic: string): {result: true, error: null} | {result: false, error: Error} => {\n  try {\n    mnemonicToEntropy(mnemonic)\n  } catch (e: any) {\n    return {\n      result: false,\n      error: e as Error,\n    }\n  }\n\n  return {\n    result: true,\n    error: null,\n  }\n}\nconst mnemonicToEntropyAndSalt = (mnemonic: string, password = ''): {entropy: Uint8Array, salt: Uint8Array} => {\n  const validationResult = validateMnemonic(mnemonic)\n  if (!validationResult.result) {\n    throw new Error(`Invalid bip39 mnemonic specified: ${validationResult.error.toString()}`)\n  }\n  const entropy: Uint8Array = mnemonicToEntropy(mnemonic)\n  const salt: Uint8Array = new TextEncoder().encode(`mnemonic${password}`)\n\n  return {entropy, salt}\n}\n\nexport const mnemonicToMiniSecretAsync = async(mnemonic: string, password = ''): Promise<Uint8Array> => {\n  const {entropy, salt} = mnemonicToEntropyAndSalt(mnemonic, password)\n  // return the first 32 bytes as the seed\n  const result = await pbkdf2Async(sha512, entropy, salt, {c: 2048, dkLen: 64})\n  return result.slice(0, 32)\n}\n\nexport const mnemonicToMiniSecret = (mnemonic: string, password = ''): Uint8Array => {\n  const {entropy, salt} = mnemonicToEntropyAndSalt(mnemonic, password)\n\n  // return the first 32 bytes as the seed\n  const result = pbkdf2(sha512, entropy, salt, {c: 2048, dkLen: 64})\n  return result.slice(0, 32)\n}\n","/**\n Converts a string to a Uint8Array\n @example b`hello world` // Uint8Array(11) [104, 101, 108, 108, 111, 32, 119, 111, 114, 108, 100]\n */\nexport const b = (tmpl: TemplateStringsArray, ...values: any[]): Uint8Array => {\n  return new TextEncoder().encode(String.raw(tmpl, ...values))\n}\n\n/**\n * Converts a hex string to a Uint8Array\n * @example hex`0x01020304` // Uint8Array(4) [1, 2, 3, 4]\n * @example hex`01020304`   // Uint8Array(4) [1, 2, 3, 4]\n */\nexport const hex = (tmpl: TemplateStringsArray, ...values: any[]): Uint8Array => {\n  let str = String.raw(tmpl, ...values)\n  if (str.startsWith('0x')) {\n    str = str.slice(2)\n  }\n  if (!str.match(/^[0-9a-fA-F]+$/)) {\n    throw new Error(`Invalid hex string: ${str}`)\n  }\n  return new Uint8Array((str.match(/.{1,2}/g) || []).map(b => parseInt(b, 16)))\n}\n","// translated from the original Rust version of Strobe128\n// https://github.com/dalek-cryptography/merlin/blob/53535f32e6d6de421372d67f56176af0c0f55fd7/src/strobe.rs\nimport {b} from '../templateLiteralFunctions'\n\nimport {keccakP} from '@noble/hashes/sha3'\nconst keccakF1600 = (state: Uint8Array) => {\n  keccakP(new Uint32Array(state.buffer, state.byteOffset, Math.floor(state.byteLength / 4)), 24)\n}\n\nconst STROBE_R = 166\n\nconst FLAG_I = 1\nconst FLAG_A = 1 << 1\nconst FLAG_C = 1 << 2\nconst FLAG_T = 1 << 3\nconst FLAG_M = 1 << 4\nconst FLAG_K = 1 << 5\n\nexport class Strobe128 {\n  private readonly state: Uint8Array\n  private pos: number\n  private pos_begin: number\n  private cur_flags: number\n\n  constructor(protocol_label: Uint8Array) {\n    const initial_state = new Uint8Array(200)\n    initial_state[0] = 1\n    initial_state[1] = STROBE_R + 2\n    initial_state[2] = 1\n    initial_state[3] = 0\n    initial_state[4] = 1\n    initial_state[5] = 96\n    initial_state.set(b`STROBEv1.0.2`, 6)\n    keccakF1600(initial_state)\n\n    this.state = initial_state\n    this.pos = 0\n    this.pos_begin = 0\n    this.cur_flags = 0\n\n    this.meta_ad(protocol_label, false)\n  }\n\n  /// /////////////////////////////////////\n  // public methods\n  /// /////////////////////////////////////\n\n  public meta_ad(data: Uint8Array, more: boolean): void {\n    this.begin_op(FLAG_M | FLAG_A, more)\n    this.absorb(data)\n  }\n\n  public ad(data: Uint8Array, more: boolean): void {\n    this.begin_op(FLAG_A, more)\n    this.absorb(data)\n  }\n\n  public prf(data: Uint8Array, more: boolean): void {\n    this.begin_op(FLAG_I | FLAG_A | FLAG_C, more)\n    this.squeeze(data)\n  }\n\n  public key(data: Uint8Array, more: boolean): void {\n    this.begin_op(FLAG_A | FLAG_C, more)\n    this.overwrite(data)\n  }\n\n  public clone(): Strobe128 {\n    const clone: Strobe128 = new Strobe128(new Uint8Array(0))\n    clone.state.set(this.state)\n    clone.pos = this.pos\n    clone.pos_begin = this.pos_begin\n    clone.cur_flags = this.cur_flags\n    return clone\n  }\n\n  public cloneState() {\n    return {\n      state: this.state.slice(),\n      pos: this.pos,\n      pos_begin: this.pos_begin,\n      cur_flags: this.cur_flags,\n    }\n  }\n\n  /// /////////////////////////////////////\n  // private methods\n  /// /////////////////////////////////////\n  private run_f(): void {\n    this.state[this.pos] ^= this.pos_begin\n    this.state[this.pos + 1] ^= 0x04\n    this.state[STROBE_R + 1] ^= 0x80\n    keccakF1600(this.state)\n    this.pos = 0\n    this.pos_begin = 0\n  }\n\n  private absorb(data: Uint8Array): void {\n    for (let i = 0; i < data.length; i++) {\n      this.state[this.pos] ^= data[i]\n      this.pos++\n      if (this.pos === STROBE_R) {\n        this.run_f()\n      }\n    }\n  }\n\n  private overwrite(data: Uint8Array): void {\n    for (let i = 0; i < data.length; i++) {\n      this.state[this.pos] = data[i]\n      this.pos++\n      if (this.pos === STROBE_R) {\n        this.run_f()\n      }\n    }\n  }\n\n  private squeeze(data: Uint8Array): void {\n    for (let i = 0; i < data.length; i++) {\n      data[i] = this.state[this.pos]\n      this.state[this.pos] = 0\n      this.pos++\n      if (this.pos === STROBE_R) {\n        this.run_f()\n      }\n    }\n  }\n\n  private begin_op(flags: number, more: boolean): void {\n    // Check if we're continuing an operation\n    if (more) {\n      if (this.cur_flags !== flags) {\n        throw new Error(`You tried to continue op ${this.cur_flags.toString(2)} but changed flags to ${flags.toString(2)}`)\n      }\n      return\n    }\n\n    // Skip adjusting direction information (we just use AD, PRF)\n    if ((flags & FLAG_T) !== 0) {\n      throw new Error('You used the T flag, which this implementation doesn\\'t support')\n    }\n\n    const old_begin = this.pos_begin\n    this.pos_begin = this.pos + 1\n    this.cur_flags = flags\n\n    this.absorb(new Uint8Array([old_begin, flags]))\n\n    // Force running F if C or K is set\n    const force_f = (flags & (FLAG_C | FLAG_K)) !== 0\n    if (force_f && this.pos !== 0) {\n      this.run_f()\n    }\n  }\n}\n","import {b} from '../templateLiteralFunctions'\n\nexport const MERLIN_PROTOCOL_LABEL = b`Merlin v1.0`\n","import {Strobe128} from './strobe128'\nimport {MERLIN_PROTOCOL_LABEL} from './constants'\nimport {b} from '../templateLiteralFunctions'\nimport {randomBytes} from '@noble/hashes/utils'\n\nconst encode_u64 = (x: bigint): Uint8Array => {\n  const buf = new Uint8Array(8)\n  buf[0] = Number(x & 255n)\n  buf[1] = Number((x >> 8n) & 255n)\n  buf[2] = Number((x >> 16n) & 255n)\n  buf[3] = Number((x >> 24n) & 255n)\n  buf[4] = Number((x >> 32n) & 255n)\n  buf[5] = Number((x >> 40n) & 255n)\n  buf[6] = Number((x >> 48n) & 255n)\n  buf[7] = Number((x >> 56n) & 255n)\n  return buf\n}\n\nconst encode_usize_as_u32 = (x: number): Uint8Array => {\n  if (x > 4294967295n) {\n    throw new Error('encode_usize_as_u32: x > 4294967295n')\n  }\n\n  const buf = new Uint8Array(4)\n\n  buf[0] = x & 255\n  buf[1] = (x >> 8) & 255\n  buf[2] = (x >> 16) & 255\n  buf[3] = (x >> 24) & 255\n\n  return buf\n}\n\nexport class Transcript {\n  private readonly strobe: Strobe128\n\n  constructor(label: Uint8Array) {\n    this.strobe = new Strobe128(MERLIN_PROTOCOL_LABEL)\n    this.append_message(b`dom-sep`, label)\n  }\n\n  cloneStrobe() {\n    return this.strobe.clone()\n  }\n\n  append_message(label: Uint8Array, message: Uint8Array) {\n    const data_len = encode_usize_as_u32(message.length)\n    this.strobe.meta_ad(label, false)\n    this.strobe.meta_ad(data_len, true)\n    this.strobe.ad(message, false)\n  }\n\n  append_u64(label: Uint8Array, x: bigint) {\n    this.append_message(label, encode_u64(x))\n  }\n\n  challenge_bytes(label: Uint8Array, dest: Uint8Array) {\n    const data_len = encode_usize_as_u32(dest.length)\n    this.strobe.meta_ad(label, false)\n    this.strobe.meta_ad(data_len, true)\n    this.strobe.prf(dest, false)\n  }\n\n  build_rng() {\n    return new TranscriptRngBuilder(this.strobe.clone())\n  }\n\n  fill_bytes(dest: Uint8Array) {\n    const data_len = encode_usize_as_u32(dest.length)\n    this.strobe.meta_ad(data_len, true)\n    this.strobe.prf(dest, false)\n  }\n\n  witness_bytes_rng(label: Uint8Array, dest: Uint8Array, nonce_seeds: Uint8Array[]) {\n    let br = this.build_rng()\n    for (const ns of nonce_seeds) {\n      br = br.rekey_with_witness_bytes(label, ns)\n    }\n    const r = br.finalize()\n    r.fill_bytes(dest)\n  }\n\n  witness_bytes(label: Uint8Array, dest: Uint8Array, nonce_seeds: Uint8Array[]) {\n    this.witness_bytes_rng(label, dest, nonce_seeds)\n  }\n\n  witness_scalar(label: Uint8Array, nonce_seeds: Uint8Array[]) {\n    const scalar_bytes = new Uint8Array(64)\n    this.witness_bytes(label, scalar_bytes, nonce_seeds)\n    // todo:\n  }\n}\n\nexport class TranscriptRngBuilder {\n  private readonly strobe: Strobe128\n\n  constructor(label: Uint8Array | Strobe128) {\n    if (label instanceof Uint8Array) {\n      this.strobe = new Strobe128(label)\n    } else if (label instanceof Strobe128) {\n      this.strobe = label\n    } else {\n      throw new Error('TranscriptRngBuilder constructor: label is not Uint8Array or Strobe128')\n    }\n  }\n\n  cloneStrobe() {\n    return this.strobe.clone()\n  }\n\n  rekey_with_witness_bytes(label: Uint8Array, witness: Uint8Array) {\n    const witness_len = encode_usize_as_u32(witness.length)\n    this.strobe.meta_ad(label, false)\n    this.strobe.meta_ad(witness_len, true)\n    this.strobe.key(witness, false)\n\n    return this\n  }\n\n  finalize(generateRandomBytes32?: () => Uint8Array) {\n    // let bytes = new Uint8Array(32)\n    const bytes = generateRandomBytes32 ? generateRandomBytes32() : randomBytes(32)\n\n    this.strobe.meta_ad(b`rng`, false)\n    this.strobe.key(bytes, false)\n    return new TranscriptRng(this.strobe)\n  }\n}\n\nexport class TranscriptRng {\n  private readonly strobe: Strobe128\n\n  constructor(strobe: Strobe128) {\n    this.strobe = strobe\n  }\n\n  cloneStrobe() {\n    return this.strobe.clone()\n  }\n\n  rekey_with_witness_bytes(label: Uint8Array, witness: Uint8Array) {\n    const witness_len = encode_usize_as_u32(witness.length)\n    this.strobe.meta_ad(label, false)\n    this.strobe.meta_ad(witness_len, true)\n    this.strobe.key(witness, false)\n  }\n\n  rekey_with_witness_u64(label: Uint8Array, witness: bigint) {\n    this.rekey_with_witness_bytes(label, encode_u64(witness))\n  }\n\n  fill_bytes(dest: Uint8Array) {\n    const data_len = encode_usize_as_u32(dest.length)\n    this.strobe.meta_ad(data_len, false)\n    this.strobe.prf(dest, false)\n  }\n}\n","import {PublicKey, SecretKey} from './signingContext'\nimport {Scalar} from './scalar'\nimport {parseUriAndDerive, parseUriAndDeriveAsync} from '../translated/mnemonic/uri'\n\nexport class Keypair {\n  publicKey: PublicKey\n  secretKey: SecretKey\n\n  constructor(publicKey: PublicKey, secretKey: SecretKey) {\n    this.publicKey = publicKey\n    this.secretKey = secretKey\n  }\n\n  static FromBytes(bytes: Uint8Array): Keypair {\n    const secretKey = SecretKey.FromBytes(bytes.slice(0, 64))\n    const publicKey = PublicKey.FromBytes(bytes.slice(64))\n    return new Keypair(publicKey, secretKey)\n  }\n\n  static FromSecretKeyBytes(secretKeyBytes: Uint8Array): Keypair {\n    if (secretKeyBytes.length !== 64) {\n      throw new Error(`Expected secret key with ${64} bytes, found ${secretKeyBytes.length}`)\n    }\n    const secretKey = SecretKey.FromBytes(secretKeyBytes)\n    const publicKey = secretKey.ToPublicKey()\n    return new Keypair(publicKey, secretKey)\n  }\n\n  static FromUri(uri: string): Keypair {\n    return parseUriAndDerive(uri)\n  }\n\n  static async FromUriAsync(uri: string): Promise<Keypair> {\n    return await parseUriAndDeriveAsync(uri)\n  }\n\n  static FromMiniSecret(miniSecret: Uint8Array): Keypair {\n    const secretKey = SecretKey.FromMiniSecret(miniSecret)\n    const publicKey = secretKey.ToPublicKey()\n    return new Keypair(publicKey, secretKey)\n  }\n\n  ToBytes(): Uint8Array {\n    const bytes = new Uint8Array(96)\n    bytes.set(this.secretKey.ToBytes())\n    bytes.set(this.publicKey.key, 64)\n    return bytes\n  }\n}\n","import {hexStringToUint8Array, isHex, u8aConcatStrict} from '../translated/mnemonic/bytes'\nimport {blake2b} from '@noble/hashes/blake2b'\n\nimport basex from 'base-x'\n\nconst BASE58_ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nconst BASE64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\nexport const base58 = basex(BASE58_ALPHABET)\nexport const base64 = basex(BASE64_ALPHABET)\n\n// strToU8a('SS58PRE')\nconst SS58_PREFIX = new Uint8Array([83, 83, 53, 56, 80, 82, 69])\n\nconst sshash = (data: Uint8Array): Uint8Array => {\n  return blake2b(u8aConcatStrict([SS58_PREFIX, data]), {dkLen: 64})\n}\n\nexport const encodeSubstrateAddress = (key: Uint8Array, ss58Format: number = 42): string => {\n  if (ss58Format < 0 || ss58Format > 16383 || [46, 47].includes(ss58Format)) {\n    throw new Error(`ss58Format is not valid, received ${typeof ss58Format} \"${ss58Format}\"`)\n  }\n\n  const allowedDecodedLengths = [1, 2, 4, 8, 32, 33]\n  if (!allowedDecodedLengths.includes(key.length)) {\n    throw new Error(`key length is not valid, received ${key.length}, valid values are ${allowedDecodedLengths.join(', ')}`)\n  }\n\n  const u8aPrefix = ss58Format < 64\n    ? new Uint8Array([ss58Format])\n    : new Uint8Array([\n      ((ss58Format & 0xfc) >> 2) | 0x40,\n      (ss58Format >> 8) | ((ss58Format & 0x03) << 6),\n    ])\n\n  const input = u8aConcatStrict([u8aPrefix, key])\n\n  return base58.encode(\n    u8aConcatStrict([\n      input,\n      sshash(input).subarray(0, [32, 33].includes(key.length) ? 2 : 1),\n    ]),\n  )\n}\n\nconst checkAddressChecksum = (decoded: Uint8Array, ignoreChecksum: boolean = false): [boolean, number, number, number] => {\n  const ss58Length = ((decoded[0] & 0b0100_0000) !== 0) ? 2 : 1\n  const ss58Decoded = ss58Length === 1\n    ? decoded[0]\n    : ((decoded[0] & 0x3f) << 2) | (decoded[1] >> 6) | ((decoded[1] & 0x3f) << 8)\n\n  // 32/33 bytes public + 2 bytes checksum + prefix\n  const isPublicKey = [34 + ss58Length, 35 + ss58Length].includes(decoded.length)\n  const length = decoded.length - (isPublicKey ? 2 : 1)\n\n  let isValid = false\n\n  if (!ignoreChecksum) {\n    // calculate the hash and do the checksum byte checks\n    const hash = sshash(decoded.subarray(0, length))\n    isValid = (decoded[0] & 0x80) === 0 && ![46, 47].includes(decoded[0]) && (\n      isPublicKey\n        ? decoded[decoded.length - 2] === hash[0] && decoded[decoded.length - 1] === hash[1]\n        : decoded[decoded.length - 1] === hash[0]\n    )\n  }\n\n  return [isValid, length, ss58Length, ss58Decoded]\n}\n\nexport function decodeSubstrateAddress(address: string, ignoreChecksum?: boolean, ss58Format: number = -1): Uint8Array {\n  let realError: Error | null = null\n\n  try {\n    if (isHex(address)) {\n      return hexStringToUint8Array(address)\n    }\n\n    const decoded = base58.decode(address)\n\n    const allowedEncodedLengths = [3, 4, 6, 10, 35, 36, 37, 38]\n\n    if (!allowedEncodedLengths.includes(decoded.length)) {\n      realError = new Error(`key length is not valid, decoded key length is ${decoded.length}, valid values are ${allowedEncodedLengths.join(', ')}`)\n      throw realError\n    }\n\n    const [isValid, endPos, ss58Length, ss58Decoded] = checkAddressChecksum(decoded, ignoreChecksum)\n\n    if (!ignoreChecksum && !isValid) {\n      realError = new Error('Invalid decoded address checksum')\n      throw realError\n    }\n    if (![-1, ss58Decoded].includes(ss58Format)) {\n      realError = new Error(`Expected ss58Format ${ss58Format}, received ${ss58Decoded}`)\n      throw realError\n    }\n\n    return decoded.slice(ss58Length, endPos)\n  } catch (error) {\n    throw (realError != null)\n      ? realError\n      : new Error(`Decoding ${address}: ${(error as Error).message}`)\n  }\n}\n","import {Keypair as SecretKeypair} from './keypair'\nimport {isHex, hexStringToUint8Array, uInt8ArrayToHex} from '../translated/mnemonic/bytes'\nimport {decodeSubstrateAddress, encodeSubstrateAddress} from './address'\nimport {parseUriAndDerive} from '../translated/mnemonic/uri'\n\nimport type {IUniqueSdkSigner, UNIQUE_SDK_SignTxResultResponse, UNIQUE_SDK_UnsignedTxPayloadBody} from './types'\nimport {PublicKey} from './signingContext'\nimport {generateMnemonic, mnemonicToMiniSecret} from '../translated/mnemonic/mnemonic'\n\nexport type {IUniqueSdkSigner}\n\nconst textEncoder = new TextEncoder()\nconst anyToU8a = (message: Uint8Array | string): Uint8Array => {\n  return typeof message === 'string'\n    ? isHex(message)\n      ? hexStringToUint8Array(message)\n      : textEncoder.encode(message)\n    : message\n}\nconst u8aOrHexToU8a = (message: Uint8Array | string): Uint8Array => {\n  if (message instanceof Uint8Array) {\n    return message\n  } else {\n    if (isHex(message)) {\n      return hexStringToUint8Array(message)\n    } else {\n      throw new Error('Invalid message: should be Uint8Array or hex string')\n    }\n  }\n}\n\n/**\n * private method, don't export\n * @param keypair\n */\nconst getAccountFromKeypair = (keypair: SecretKeypair) => {\n  return {\n    get publicKey() {\n      return keypair.publicKey.key.slice()\n    },\n    address: encodeSubstrateAddress(keypair.publicKey.key),\n    prefixedAddress(prefix: number = 42) {\n      return encodeSubstrateAddress(keypair.publicKey.key, prefix)\n    },\n\n    /**\n     * @name sign\n     * @param message [Uint8Array | string]; Hex string or UTF-8 string will be automatically converted to a byte array\n     * @returns [Uint8Array] - signature\n     */\n    sign(message: Uint8Array | string): Uint8Array {\n      return keypair.secretKey.sign(anyToU8a(message), keypair.publicKey).ToBytes()\n    },\n\n    /**\n     * @name verify\n     * @param message [Uint8Array | string]; Hex string or UTF-8 string will be automatically converted to a byte array\n     * @param signature [Uint8Array]\n     * @returns [boolean] - true if the signature is valid, false otherwise\n     */\n    verify(message: Uint8Array | string, signature: Uint8Array | string): boolean {\n      return keypair.publicKey.verify(anyToU8a(message), u8aOrHexToU8a(signature))\n    },\n\n    /**\n     * @name signer\n     * @description signer for @unique-nft/sdk\n     */\n    signer: {\n      async sign(payload: UNIQUE_SDK_UnsignedTxPayloadBody): Promise<UNIQUE_SDK_SignTxResultResponse> {\n        const message = hexStringToUint8Array(payload.signerPayloadHex)\n        const signatureBytes = keypair.secretKey.sign(message, keypair.publicKey).ToBytes()\n        const signature = uInt8ArrayToHex(signatureBytes)\n\n        // '01' is the prefix for sr25519 signature type\n        return {\n          signature: `0x01${signature.substring(2)}`,\n          signatureType: 'sr25519',\n        }\n      },\n    } satisfies IUniqueSdkSigner,\n  }\n}\n\nexport const verifySignature = (message: Uint8Array | string, signature: Uint8Array | string, signerAddressOrPublicKey: Uint8Array | string) => {\n  let publicKeyBytes: Uint8Array\n  if (signerAddressOrPublicKey instanceof Uint8Array) {\n    publicKeyBytes = signerAddressOrPublicKey\n  } else if (typeof signerAddressOrPublicKey === 'string') {\n    publicKeyBytes = isHex(signerAddressOrPublicKey)\n      ? hexStringToUint8Array(signerAddressOrPublicKey)\n      : decodeSubstrateAddress(signerAddressOrPublicKey)\n  } else {\n    throw new Error('Invalid signerAddressOrPublicKey: should be Uint8Array or hex string')\n  }\n\n  const publicKey = PublicKey.FromBytes(publicKeyBytes)\n\n  return publicKey.verify(anyToU8a(message), u8aOrHexToU8a(signature))\n}\n\nexport const dangerouslyParseUriAndGetFullKeypair = parseUriAndDerive\n\nexport const Sr25519Account = {\n  fromUri: (uri: string) => {\n    const keypair = SecretKeypair.FromUri(uri)\n    return getAccountFromKeypair(keypair)\n  },\n  verifySignature,\n  other: {\n    fromMiniSecret: (miniSecret: Uint8Array | string) => {\n      const keypair = SecretKeypair.FromMiniSecret(u8aOrHexToU8a(miniSecret))\n      return getAccountFromKeypair(keypair)\n    },\n    fromSecretKeyBytes: (secretKeyBytes: Uint8Array | string) => {\n      const keypair = SecretKeypair.FromSecretKeyBytes(u8aOrHexToU8a(secretKeyBytes))\n      return getAccountFromKeypair(keypair)\n    },\n    fromKeypair: getAccountFromKeypair,\n    mnemonicToMiniSecret,\n    dangerouslyParseUriAndGetFullKeypair,\n  },\n  utils: {\n    encodeSubstrateAddress,\n    decodeSubstrateAddress,\n  },\n  generateMnemonic,\n}\n\n/** @deprecated use Sr25519Account instead */\nexport const Account = Sr25519Account\n\nexport default Sr25519Account\n\nexport type ISr25519Account = ReturnType<typeof getAccountFromKeypair>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
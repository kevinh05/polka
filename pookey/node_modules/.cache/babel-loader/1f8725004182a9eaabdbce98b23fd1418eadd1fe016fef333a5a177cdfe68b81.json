{"ast":null,"code":"import { Keyring } from '@polkadot/keyring';\nimport { mnemonicToMiniSecret, ed25519PairFromSeed, mnemonicGenerate } from '@polkadot/util-crypto';\nimport { u8aToHex } from '@polkadot/util';\nimport 'reflect-metadata';\nimport { Address } from '@unique-nft/utils';\nimport { EventEmitter } from 'events';\nvar __defProp$1 = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)) {\n    if (__propIsEnum.call(b, prop)) __defNormalProp$1(a, prop, b[prop]);\n  }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nasync function getAccountFromMnemonic(args) {\n  const {\n    mnemonic,\n    pairType,\n    meta\n  } = args;\n  const seed = mnemonicToMiniSecret(mnemonic);\n  const {\n    publicKey\n  } = ed25519PairFromSeed(seed);\n  const account = new Keyring({\n    type: pairType\n  }).addFromSeed(seed, __spreadValues({}, meta), pairType);\n  const keyfile = account.toJson();\n  return {\n    mnemonic,\n    seed: u8aToHex(seed),\n    publicKey: u8aToHex(publicKey),\n    keyfile\n  };\n}\nasync function generateAccount(args) {\n  const mnemonic = mnemonicGenerate();\n  return getAccountFromMnemonic(__spreadProps(__spreadValues({}, args), {\n    mnemonic\n  }));\n}\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass Accounts {\n  constructor() {\n    __publicField(this, \"providers\", /* @__PURE__ */new Map());\n  }\n  async addProvider(ProviderClassLink, options) {\n    const provider = new ProviderClassLink(options);\n    await provider.init();\n    this.providers.set(ProviderClassLink, provider);\n    return provider;\n  }\n  getProvider(ProviderClassLink) {\n    return this.providers.get(ProviderClassLink);\n  }\n  async getAccounts() {\n    const accounts = [];\n    const providers = this.providers.values();\n    for (const provider of providers) {\n      accounts.push(provider.getAccounts());\n    }\n    const result = await Promise.all(accounts);\n    return Promise.resolve(result.flat(1));\n  }\n  async first() {\n    const accounts = await this.getAccounts();\n    return accounts.find(a => !!a);\n  }\n}\nvar SignatureType = /* @__PURE__ */(SignatureType2 => {\n  SignatureType2[\"Sr25519\"] = \"sr25519\";\n  SignatureType2[\"Ed25519\"] = \"ed25519\";\n  SignatureType2[\"Ecdsa\"] = \"ecdsa\";\n  SignatureType2[\"Ethereum\"] = \"ethereum\";\n  return SignatureType2;\n})(SignatureType || {});\nconst getAddressFromSubstrate = function (address, prefix) {\n  if (prefix === \"ethereum\") {\n    return Address.mirror.substrateToEthereum(address);\n  }\n  if (typeof prefix === \"number\") {\n    return Address.normalize.substrateAddress(address, prefix);\n  }\n  return address;\n};\nclass Account {\n  constructor(legacyInstance, address) {\n    this.legacyInstance = legacyInstance;\n    this.address = address;\n  }\n  /**\n   * @deprecated use KeyringAccount.keyringPair or MetamaskAccount.address or PolkadotAccount.injectedAccount\n   */\n  get instance() {\n    return this.legacyInstance;\n  }\n  /**\n   * @deprecated use .address or .formatAddress\n   */\n  getAddress(prefix) {\n    return prefix ? this.formatAddress(prefix) : this.address;\n  }\n}\nclass KeyringAccountBase extends Account {\n  constructor(keyringPair) {\n    super(keyringPair, keyringPair.address);\n    this.keyringPair = keyringPair;\n  }\n  formatAddress(prefix) {\n    return getAddressFromSubstrate(this.keyringPair.address, prefix);\n  }\n  async sign(unsignedTxPayload) {\n    const signature = await this.keyringPair.sign(unsignedTxPayload.signerPayloadHex, {\n      withType: true\n    });\n    return {\n      signature: u8aToHex(signature),\n      signatureType: this.keyringPair.type\n    };\n  }\n}\nclass Provider extends EventEmitter {\n  async first() {\n    const accounts = await this.getAccounts();\n    return accounts.length ? accounts[0] : void 0;\n  }\n}\nexport { Account, Accounts, KeyringAccountBase, Provider, SignatureType, generateAccount, getAccountFromMnemonic, getAddressFromSubstrate };","map":{"version":3,"names":["Keyring","mnemonicToMiniSecret","ed25519PairFromSeed","mnemonicGenerate","u8aToHex","Address","EventEmitter","__defProp$1","Object","defineProperty","__defProps","defineProperties","__getOwnPropDescs","getOwnPropertyDescriptors","__getOwnPropSymbols","getOwnPropertySymbols","__hasOwnProp","prototype","hasOwnProperty","__propIsEnum","propertyIsEnumerable","__defNormalProp$1","obj","key","value","enumerable","configurable","writable","__spreadValues","a","b","prop","call","__spreadProps","getAccountFromMnemonic","args","mnemonic","pairType","meta","seed","publicKey","account","type","addFromSeed","keyfile","toJson","generateAccount","__defProp","__defNormalProp","__publicField","Accounts","constructor","Map","addProvider","ProviderClassLink","options","provider","init","providers","set","getProvider","get","getAccounts","accounts","values","push","result","Promise","all","resolve","flat","first","find","SignatureType","SignatureType2","getAddressFromSubstrate","address","prefix","mirror","substrateToEthereum","normalize","substrateAddress","Account","legacyInstance","instance","getAddress","formatAddress","KeyringAccountBase","keyringPair","sign","unsignedTxPayload","signature","signerPayloadHex","withType","signatureType","Provider","length"],"sources":["C:/Users/khyy4/Documents/Code-Projects/polkahack/pookey/node_modules/@unique-nft/accounts/index.js"],"sourcesContent":["import { Keyring } from '@polkadot/keyring';\nimport { mnemonicToMiniSecret, ed25519PairFromSeed, mnemonicGenerate } from '@polkadot/util-crypto';\nimport { u8aToHex } from '@polkadot/util';\nimport 'reflect-metadata';\nimport { Address } from '@unique-nft/utils';\nimport { EventEmitter } from 'events';\n\nvar __defProp$1 = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp$1 = (obj, key, value) => key in obj ? __defProp$1(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp$1(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp$1(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nasync function getAccountFromMnemonic(args) {\n  const { mnemonic, pairType, meta } = args;\n  const seed = mnemonicToMiniSecret(mnemonic);\n  const { publicKey } = ed25519PairFromSeed(seed);\n  const account = new Keyring({ type: pairType }).addFromSeed(\n    seed,\n    __spreadValues({}, meta),\n    pairType\n  );\n  const keyfile = account.toJson();\n  return {\n    mnemonic,\n    seed: u8aToHex(seed),\n    publicKey: u8aToHex(publicKey),\n    keyfile\n  };\n}\nasync function generateAccount(args) {\n  const mnemonic = mnemonicGenerate();\n  return getAccountFromMnemonic(__spreadProps(__spreadValues({}, args), {\n    mnemonic\n  }));\n}\n\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nclass Accounts {\n  constructor() {\n    __publicField(this, \"providers\", /* @__PURE__ */ new Map());\n  }\n  async addProvider(ProviderClassLink, options) {\n    const provider = new ProviderClassLink(options);\n    await provider.init();\n    this.providers.set(ProviderClassLink, provider);\n    return provider;\n  }\n  getProvider(ProviderClassLink) {\n    return this.providers.get(ProviderClassLink);\n  }\n  async getAccounts() {\n    const accounts = [];\n    const providers = this.providers.values();\n    for (const provider of providers) {\n      accounts.push(provider.getAccounts());\n    }\n    const result = await Promise.all(accounts);\n    return Promise.resolve(result.flat(1));\n  }\n  async first() {\n    const accounts = await this.getAccounts();\n    return accounts.find((a) => !!a);\n  }\n}\n\nvar SignatureType = /* @__PURE__ */ ((SignatureType2) => {\n  SignatureType2[\"Sr25519\"] = \"sr25519\";\n  SignatureType2[\"Ed25519\"] = \"ed25519\";\n  SignatureType2[\"Ecdsa\"] = \"ecdsa\";\n  SignatureType2[\"Ethereum\"] = \"ethereum\";\n  return SignatureType2;\n})(SignatureType || {});\nconst getAddressFromSubstrate = function(address, prefix) {\n  if (prefix === \"ethereum\") {\n    return Address.mirror.substrateToEthereum(address);\n  }\n  if (typeof prefix === \"number\") {\n    return Address.normalize.substrateAddress(address, prefix);\n  }\n  return address;\n};\nclass Account {\n  constructor(legacyInstance, address) {\n    this.legacyInstance = legacyInstance;\n    this.address = address;\n  }\n  /**\n   * @deprecated use KeyringAccount.keyringPair or MetamaskAccount.address or PolkadotAccount.injectedAccount\n   */\n  get instance() {\n    return this.legacyInstance;\n  }\n  /**\n   * @deprecated use .address or .formatAddress\n   */\n  getAddress(prefix) {\n    return prefix ? this.formatAddress(prefix) : this.address;\n  }\n}\nclass KeyringAccountBase extends Account {\n  constructor(keyringPair) {\n    super(keyringPair, keyringPair.address);\n    this.keyringPair = keyringPair;\n  }\n  formatAddress(prefix) {\n    return getAddressFromSubstrate(this.keyringPair.address, prefix);\n  }\n  async sign(unsignedTxPayload) {\n    const signature = await this.keyringPair.sign(\n      unsignedTxPayload.signerPayloadHex,\n      {\n        withType: true\n      }\n    );\n    return {\n      signature: u8aToHex(signature),\n      signatureType: this.keyringPair.type\n    };\n  }\n}\nclass Provider extends EventEmitter {\n  async first() {\n    const accounts = await this.getAccounts();\n    return accounts.length ? accounts[0] : void 0;\n  }\n}\n\nexport { Account, Accounts, KeyringAccountBase, Provider, SignatureType, generateAccount, getAccountFromMnemonic, getAddressFromSubstrate };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
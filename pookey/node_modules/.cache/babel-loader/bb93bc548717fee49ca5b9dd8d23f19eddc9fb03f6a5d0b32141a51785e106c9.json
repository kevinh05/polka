{"ast":null,"code":"import 'reflect-metadata';\nimport { u8aToHex } from '@polkadot/util';\nimport { Address } from '@unique-nft/utils';\nimport { EventEmitter } from 'events';\nvar SignatureType = /* @__PURE__ */(SignatureType2 => {\n  SignatureType2[\"Sr25519\"] = \"sr25519\";\n  SignatureType2[\"Ed25519\"] = \"ed25519\";\n  SignatureType2[\"Ecdsa\"] = \"ecdsa\";\n  SignatureType2[\"Ethereum\"] = \"ethereum\";\n  return SignatureType2;\n})(SignatureType || {});\nconst getAddressFromSubstrate = function (address, prefix) {\n  if (prefix === \"ethereum\") {\n    return Address.mirror.substrateToEthereum(address);\n  }\n  if (typeof prefix === \"number\") {\n    return Address.normalize.substrateAddress(address, prefix);\n  }\n  return address;\n};\nclass Account {\n  constructor(legacyInstance, address) {\n    this.legacyInstance = legacyInstance;\n    this.address = address;\n  }\n  /**\n   * @deprecated use KeyringAccount.keyringPair or MetamaskAccount.address or PolkadotAccount.injectedAccount\n   */\n  get instance() {\n    return this.legacyInstance;\n  }\n  /**\n   * @deprecated use .address or .formatAddress\n   */\n  getAddress(prefix) {\n    return prefix ? this.formatAddress(prefix) : this.address;\n  }\n}\nclass KeyringAccountBase extends Account {\n  constructor(keyringPair) {\n    super(keyringPair, keyringPair.address);\n    this.keyringPair = keyringPair;\n  }\n  formatAddress(prefix) {\n    return getAddressFromSubstrate(this.keyringPair.address, prefix);\n  }\n  async sign(unsignedTxPayload) {\n    const signature = await this.keyringPair.sign(unsignedTxPayload.signerPayloadHex, {\n      withType: true\n    });\n    return {\n      signature: u8aToHex(signature),\n      signatureType: this.keyringPair.type\n    };\n  }\n}\nclass Provider extends EventEmitter {\n  async first() {\n    const accounts = await this.getAccounts();\n    return accounts.length ? accounts[0] : void 0;\n  }\n}\nexport { Account, KeyringAccountBase, Provider, SignatureType, getAddressFromSubstrate };","map":{"version":3,"names":["u8aToHex","Address","EventEmitter","SignatureType","SignatureType2","getAddressFromSubstrate","address","prefix","mirror","substrateToEthereum","normalize","substrateAddress","Account","constructor","legacyInstance","instance","getAddress","formatAddress","KeyringAccountBase","keyringPair","sign","unsignedTxPayload","signature","signerPayloadHex","withType","signatureType","type","Provider","first","accounts","getAccounts","length"],"sources":["C:/Users/khyy4/Documents/Code-Projects/polkahack/pookey/node_modules/@unique-nft/accounts/types/index.js"],"sourcesContent":["import 'reflect-metadata';\nimport { u8aToHex } from '@polkadot/util';\nimport { Address } from '@unique-nft/utils';\nimport { EventEmitter } from 'events';\n\nvar SignatureType = /* @__PURE__ */ ((SignatureType2) => {\n  SignatureType2[\"Sr25519\"] = \"sr25519\";\n  SignatureType2[\"Ed25519\"] = \"ed25519\";\n  SignatureType2[\"Ecdsa\"] = \"ecdsa\";\n  SignatureType2[\"Ethereum\"] = \"ethereum\";\n  return SignatureType2;\n})(SignatureType || {});\nconst getAddressFromSubstrate = function(address, prefix) {\n  if (prefix === \"ethereum\") {\n    return Address.mirror.substrateToEthereum(address);\n  }\n  if (typeof prefix === \"number\") {\n    return Address.normalize.substrateAddress(address, prefix);\n  }\n  return address;\n};\nclass Account {\n  constructor(legacyInstance, address) {\n    this.legacyInstance = legacyInstance;\n    this.address = address;\n  }\n  /**\n   * @deprecated use KeyringAccount.keyringPair or MetamaskAccount.address or PolkadotAccount.injectedAccount\n   */\n  get instance() {\n    return this.legacyInstance;\n  }\n  /**\n   * @deprecated use .address or .formatAddress\n   */\n  getAddress(prefix) {\n    return prefix ? this.formatAddress(prefix) : this.address;\n  }\n}\nclass KeyringAccountBase extends Account {\n  constructor(keyringPair) {\n    super(keyringPair, keyringPair.address);\n    this.keyringPair = keyringPair;\n  }\n  formatAddress(prefix) {\n    return getAddressFromSubstrate(this.keyringPair.address, prefix);\n  }\n  async sign(unsignedTxPayload) {\n    const signature = await this.keyringPair.sign(\n      unsignedTxPayload.signerPayloadHex,\n      {\n        withType: true\n      }\n    );\n    return {\n      signature: u8aToHex(signature),\n      signatureType: this.keyringPair.type\n    };\n  }\n}\nclass Provider extends EventEmitter {\n  async first() {\n    const accounts = await this.getAccounts();\n    return accounts.length ? accounts[0] : void 0;\n  }\n}\n\nexport { Account, KeyringAccountBase, Provider, SignatureType, getAddressFromSubstrate };\n"],"mappings":"AAAA,OAAO,kBAAkB;AACzB,SAASA,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,YAAY,QAAQ,QAAQ;AAErC,IAAIC,aAAa,GAAG,eAAgB,CAAEC,cAAc,IAAK;EACvDA,cAAc,CAAC,SAAS,CAAC,GAAG,SAAS;EACrCA,cAAc,CAAC,SAAS,CAAC,GAAG,SAAS;EACrCA,cAAc,CAAC,OAAO,CAAC,GAAG,OAAO;EACjCA,cAAc,CAAC,UAAU,CAAC,GAAG,UAAU;EACvC,OAAOA,cAAc;AACvB,CAAC,EAAED,aAAa,IAAI,CAAC,CAAC,CAAC;AACvB,MAAME,uBAAuB,GAAG,SAAAA,CAASC,OAAO,EAAEC,MAAM,EAAE;EACxD,IAAIA,MAAM,KAAK,UAAU,EAAE;IACzB,OAAON,OAAO,CAACO,MAAM,CAACC,mBAAmB,CAACH,OAAO,CAAC;EACpD;EACA,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAON,OAAO,CAACS,SAAS,CAACC,gBAAgB,CAACL,OAAO,EAAEC,MAAM,CAAC;EAC5D;EACA,OAAOD,OAAO;AAChB,CAAC;AACD,MAAMM,OAAO,CAAC;EACZC,WAAWA,CAACC,cAAc,EAAER,OAAO,EAAE;IACnC,IAAI,CAACQ,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACR,OAAO,GAAGA,OAAO;EACxB;EACA;AACF;AACA;EACE,IAAIS,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI,CAACD,cAAc;EAC5B;EACA;AACF;AACA;EACEE,UAAUA,CAACT,MAAM,EAAE;IACjB,OAAOA,MAAM,GAAG,IAAI,CAACU,aAAa,CAACV,MAAM,CAAC,GAAG,IAAI,CAACD,OAAO;EAC3D;AACF;AACA,MAAMY,kBAAkB,SAASN,OAAO,CAAC;EACvCC,WAAWA,CAACM,WAAW,EAAE;IACvB,KAAK,CAACA,WAAW,EAAEA,WAAW,CAACb,OAAO,CAAC;IACvC,IAAI,CAACa,WAAW,GAAGA,WAAW;EAChC;EACAF,aAAaA,CAACV,MAAM,EAAE;IACpB,OAAOF,uBAAuB,CAAC,IAAI,CAACc,WAAW,CAACb,OAAO,EAAEC,MAAM,CAAC;EAClE;EACA,MAAMa,IAAIA,CAACC,iBAAiB,EAAE;IAC5B,MAAMC,SAAS,GAAG,MAAM,IAAI,CAACH,WAAW,CAACC,IAAI,CAC3CC,iBAAiB,CAACE,gBAAgB,EAClC;MACEC,QAAQ,EAAE;IACZ,CACF,CAAC;IACD,OAAO;MACLF,SAAS,EAAEtB,QAAQ,CAACsB,SAAS,CAAC;MAC9BG,aAAa,EAAE,IAAI,CAACN,WAAW,CAACO;IAClC,CAAC;EACH;AACF;AACA,MAAMC,QAAQ,SAASzB,YAAY,CAAC;EAClC,MAAM0B,KAAKA,CAAA,EAAG;IACZ,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC,CAAC;IACzC,OAAOD,QAAQ,CAACE,MAAM,GAAGF,QAAQ,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;EAC/C;AACF;AAEA,SAASjB,OAAO,EAAEM,kBAAkB,EAAES,QAAQ,EAAExB,aAAa,EAAEE,uBAAuB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
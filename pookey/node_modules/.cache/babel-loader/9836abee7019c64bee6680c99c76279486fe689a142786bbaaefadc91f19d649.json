{"ast":null,"code":"import { combineLatest, map, of } from 'rxjs';\nimport { firstMemo, memo } from '../util/index.js';\nimport { erasHistoricApplyAccount } from './util.js';\nexport function _ownExposures(instanceId, api) {\n  return memo(instanceId, (accountId, eras, _withActive, page) => {\n    const emptyStakingExposure = api.registry.createType('Exposure');\n    // The reason we don't explicitly make the actual types is for compatibility. If the chain doesn't have the noted type it will fail\n    // on construction. Therefore we just make an empty option.\n    const emptyOptionPage = api.registry.createType('Option<Null>');\n    const emptyOptionMeta = api.registry.createType('Option<Null>');\n    return eras.length ? combineLatest([\n    // Backwards and forward compat for historical integrity when using `erasHistoricApplyAccount`\n    api.query.staking.erasStakersClipped ? combineLatest(eras.map(e => api.query.staking.erasStakersClipped(e, accountId))) : of(eras.map(_ => emptyStakingExposure)), api.query.staking.erasStakers ? combineLatest(eras.map(e => api.query.staking.erasStakers(e, accountId))) : of(eras.map(_ => emptyStakingExposure)), api.query.staking.erasStakersPaged ? combineLatest(eras.map(e => api.query.staking.erasStakersPaged(e, accountId, page))) : of(eras.map(_ => emptyOptionPage)), api.query.staking.erasStakersOverview ? combineLatest(eras.map(e => api.query.staking.erasStakersOverview(e, accountId))) : of(eras.map(_ => emptyOptionMeta))]).pipe(map(([clp, exp, paged, expMeta]) => eras.map((era, index) => ({\n      clipped: clp[index],\n      era,\n      exposure: exp[index],\n      exposureMeta: expMeta[index],\n      exposurePaged: paged[index]\n    })))) : of([]);\n  });\n}\nexport const ownExposure = /*#__PURE__*/firstMemo((api, accountId, era, page) => api.derive.staking._ownExposures(accountId, [era], true, page || 0));\nexport const ownExposures = /*#__PURE__*/erasHistoricApplyAccount('_ownExposures');","map":{"version":3,"names":["combineLatest","map","of","firstMemo","memo","erasHistoricApplyAccount","_ownExposures","instanceId","api","accountId","eras","_withActive","page","emptyStakingExposure","registry","createType","emptyOptionPage","emptyOptionMeta","length","query","staking","erasStakersClipped","e","_","erasStakers","erasStakersPaged","erasStakersOverview","pipe","clp","exp","paged","expMeta","era","index","clipped","exposure","exposureMeta","exposurePaged","ownExposure","derive","ownExposures"],"sources":["C:/Users/khyy4/Documents/Code-Projects/polkahack/pookey/node_modules/@polkadot/api-derive/staking/ownExposure.js"],"sourcesContent":["import { combineLatest, map, of } from 'rxjs';\nimport { firstMemo, memo } from '../util/index.js';\nimport { erasHistoricApplyAccount } from './util.js';\nexport function _ownExposures(instanceId, api) {\n    return memo(instanceId, (accountId, eras, _withActive, page) => {\n        const emptyStakingExposure = api.registry.createType('Exposure');\n        // The reason we don't explicitly make the actual types is for compatibility. If the chain doesn't have the noted type it will fail\n        // on construction. Therefore we just make an empty option.\n        const emptyOptionPage = api.registry.createType('Option<Null>');\n        const emptyOptionMeta = api.registry.createType('Option<Null>');\n        return eras.length\n            ? combineLatest([\n                // Backwards and forward compat for historical integrity when using `erasHistoricApplyAccount`\n                api.query.staking.erasStakersClipped\n                    ? combineLatest(eras.map((e) => api.query.staking.erasStakersClipped(e, accountId)))\n                    : of(eras.map((_) => emptyStakingExposure)),\n                api.query.staking.erasStakers\n                    ? combineLatest(eras.map((e) => api.query.staking.erasStakers(e, accountId)))\n                    : of(eras.map((_) => emptyStakingExposure)),\n                api.query.staking.erasStakersPaged\n                    ? combineLatest(eras.map((e) => api.query.staking.erasStakersPaged(e, accountId, page)))\n                    : of(eras.map((_) => emptyOptionPage)),\n                api.query.staking.erasStakersOverview\n                    ? combineLatest(eras.map((e) => api.query.staking.erasStakersOverview(e, accountId)))\n                    : of(eras.map((_) => emptyOptionMeta))\n            ]).pipe(map(([clp, exp, paged, expMeta]) => eras.map((era, index) => ({ clipped: clp[index], era, exposure: exp[index], exposureMeta: expMeta[index], exposurePaged: paged[index] }))))\n            : of([]);\n    });\n}\nexport const ownExposure = /*#__PURE__*/ firstMemo((api, accountId, era, page) => api.derive.staking._ownExposures(accountId, [era], true, page || 0));\nexport const ownExposures = /*#__PURE__*/ erasHistoricApplyAccount('_ownExposures');\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
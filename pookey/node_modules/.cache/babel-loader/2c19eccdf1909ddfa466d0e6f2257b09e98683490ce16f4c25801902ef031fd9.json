{"ast":null,"code":"var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\nvar __name = (target, value) => __defProp(target, \"name\", {\n  value,\n  configurable: true\n});\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// packages/sdk/src/common/base-client.ts\nimport Axios from \"axios\";\n\n// packages/sdk/src/errors/api-error.ts\nvar ApiError = class extends Error {\n  constructor(responseError) {\n    super(responseError.message);\n    __publicField(this, \"code\");\n    __publicField(this, \"details\");\n    this.code = responseError.code;\n    this.name = responseError.name;\n    this.details = responseError.details;\n  }\n};\n__name(ApiError, \"ApiError\");\n\n// packages/sdk/src/errors/max-status-requests-error.ts\nvar MaxStatusRequestsError = class extends Error {\n  constructor(txHash, limit) {\n    const message = `Extrinsic status was not changed within the specified count of status requests (${limit}).`;\n    super(message);\n    __publicField(this, \"details\");\n    __publicField(this, \"txHash\");\n    __publicField(this, \"limit\");\n    this.details = `${message} This does not mean that the Extrinsic has failed nor that it will be included in the future. You can check the status of the Extrinsic by calling the getStatus() method.`;\n    this.txHash = txHash;\n    this.limit = limit;\n  }\n};\n__name(MaxStatusRequestsError, \"MaxStatusRequestsError\");\n\n// packages/sdk/src/errors/timeout-error.ts\nvar TimeoutError = class extends Error {\n  constructor(txHash, timeoutMs) {\n    const message = `Extrinsic status was not changed within the specified time (${timeoutMs} ms).`;\n    super(message);\n    __publicField(this, \"details\");\n    __publicField(this, \"txHash\");\n    __publicField(this, \"timeoutMs\");\n    this.details = `${message} This does not mean that the Extrinsic has failed nor that it will be included in the future. You can check the status of the Extrinsic by calling the getStatus() method.`;\n    this.txHash = txHash;\n    this.timeoutMs = timeoutMs;\n  }\n};\n__name(TimeoutError, \"TimeoutError\");\n\n// packages/sdk/src/types/enums.ts\nvar Method;\n(function (Method2) {\n  Method2[\"GET\"] = \"GET\";\n  Method2[\"POST\"] = \"POST\";\n  Method2[\"DELETE\"] = \"DELETE\";\n  Method2[\"PATCH\"] = \"PATCH\";\n  Method2[\"PUT\"] = \"PUT\";\n})(Method || (Method = {}));\n\n// packages/common/types/subscriptions.ts\nvar Rooms;\n(function (Rooms2) {\n  Rooms2[\"SYSTEM\"] = \"system\";\n  Rooms2[\"BLOCKS\"] = \"blocks\";\n  Rooms2[\"EXTRINSICS\"] = \"extrinsics\";\n  Rooms2[\"COLLECTION\"] = \"collection\";\n  Rooms2[\"CONTRACT\"] = \"contract\";\n  Rooms2[\"EVENTS\"] = \"events\";\n  Rooms2[\"BALANCE\"] = \"balance\";\n  Rooms2[\"ACCOUNT_CURRENT_BALANCE\"] = \"account-current-balance\";\n})(Rooms || (Rooms = {}));\nvar SubscriptionEvents;\n(function (SubscriptionEvents2) {\n  SubscriptionEvents2[\"SYSTEM\"] = \"system\";\n  SubscriptionEvents2[\"BLOCKS\"] = \"blocks\";\n  SubscriptionEvents2[\"EXTRINSICS\"] = \"extrinsics\";\n  SubscriptionEvents2[\"EVENTS\"] = \"events\";\n  SubscriptionEvents2[\"CONTRACT_LOGS\"] = \"contract-logs\";\n  SubscriptionEvents2[\"COLLECTIONS\"] = \"collections\";\n  SubscriptionEvents2[\"HAS_NEXT\"] = \"has-next\";\n  SubscriptionEvents2[\"BALANCES\"] = \"balances\";\n  SubscriptionEvents2[\"ACCOUNT_CURRENT_BALANCE\"] = \"account-current-balance\";\n  SubscriptionEvents2[\"SUBSCRIBE_STATE\"] = \"subscribe-state\";\n})(SubscriptionEvents || (SubscriptionEvents = {}));\nvar BalanceMethods;\n(function (BalanceMethods2) {\n  BalanceMethods2[\"WITHDRAW\"] = \"Withdraw\";\n  BalanceMethods2[\"TRANSFER\"] = \"Transfer\";\n  BalanceMethods2[\"DEPOSIT\"] = \"Deposit\";\n  BalanceMethods2[\"DUST_LOST\"] = \"DustLost\";\n  BalanceMethods2[\"ENDOWED\"] = \"Endowed\";\n  BalanceMethods2[\"LOCKED\"] = \"Locked\";\n  BalanceMethods2[\"UNLOCKED\"] = \"Unlocked\";\n  BalanceMethods2[\"RESERVED\"] = \"Reserved\";\n})(BalanceMethods || (BalanceMethods = {}));\n\n// packages/sdk/src/common/section.ts\nvar Section = class {\n  constructor(client, path) {\n    __publicField(this, \"client\");\n    __publicField(this, \"path\");\n    __publicField(this, \"baseUrl\");\n    this.client = client;\n    this.path = path;\n    this.baseUrl = `${this.client.options.baseUrl}/${path}`;\n  }\n  async query(url, params) {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url,\n      params\n    });\n    return response.data;\n  }\n  async postRequest(url, data, params) {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url,\n      data,\n      params\n    });\n    return response.data;\n  }\n};\n__name(Section, \"Section\");\n\n// packages/sdk/src/common/utils.ts\nvar isUnsignedTxPayloadResponse = /* @__PURE__ */__name(args => typeof args === \"object\" && !!args && \"signerPayloadJSON\" in args, \"isUnsignedTxPayloadResponse\");\nvar isSubmitTxBody = /* @__PURE__ */__name(args => isUnsignedTxPayloadResponse(args) && !!args && \"signature\" in args, \"isSubmitTxBody\");\nfunction sleep(ms) {\n  return new Promise(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n__name(sleep, \"sleep\");\nvar getAddress = /* @__PURE__ */__name((options, args) => {\n  if (args.address) return args.address;\n  if (options.signer?.address) return options.signer.address;\n  if (options.account?.address) return options.account.address;\n  if (options.account?.signer?.address) return options.account.signer.address;\n  return void 0;\n}, \"getAddress\");\nvar addAddress = /* @__PURE__ */__name((options, args) => {\n  const address = getAddress(options, args);\n  if (!address) throw new Error(\"No address provided\");\n  return {\n    ...args,\n    address\n  };\n}, \"addAddress\");\n\n// packages/sdk/src/sections/extrinsic.ts\nvar getSigner = /* @__PURE__ */__name((options, accountOrSigner) => {\n  if (accountOrSigner) {\n    return \"sign\" in accountOrSigner ? accountOrSigner : accountOrSigner.signer;\n  }\n  if (options.signer) return options.signer;\n  if (options.account?.signer) return options.account.signer;\n  return void 0;\n}, \"getSigner\");\nvar getAddress2 = /* @__PURE__ */__name((options, args) => {\n  if (args.address) return args.address;\n  if (options.signer?.address) return options.signer.address;\n  if (options.account?.address) return options.account.address;\n  if (options.account?.signer?.address) return options.account.signer.address;\n  return void 0;\n}, \"getAddress\");\nvar Extrinsic = class extends Section {\n  async build(args) {\n    const address = getAddress2(this.client.options, args);\n    if (!address) throw new Error(\"Invalid address\");\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: \"build\",\n      data: {\n        ...args,\n        address\n      }\n    });\n    return response.data;\n  }\n  async getFee(args) {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: \"calculate-fee\",\n      data: args\n    });\n    return response.data;\n  }\n  async sign(args, signer) {\n    const signerToUse = getSigner(this.client.options, signer);\n    if (!signerToUse) throw new Error(`No signer provided`);\n    return signerToUse.sign(args);\n  }\n  async submit(args) {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: \"submit\",\n      data: args\n    });\n    return response.data;\n  }\n  async submitWatch(args, signer = this.client.options.signer) {\n    const txBuild = await this.client.extrinsic.build(args);\n    const signedTxPayload = await this.client.extrinsic.sign(txBuild, signer);\n    const submitTxResult = await this.client.extrinsic.submit({\n      signerPayloadJSON: txBuild.signerPayloadJSON,\n      signature: signedTxPayload.signature\n    });\n    return submitTxResult;\n  }\n  async submitWaitResult(args, signer = this.client.options.signer) {\n    const {\n      hash\n    } = await this.client.extrinsic.submitWatch(args, signer);\n    return this.client.extrinsic.waitResult({\n      hash\n    });\n  }\n  async waitResult({\n    hash\n  }) {\n    const timeout = this.client.options.statusTotalTimeoutInMs;\n    const maxRequests = this.client.options.maximumNumberOfStatusRequests;\n    const waitTime = this.client.options.waitBetweenStatusRequestsInMs;\n    let isTimeExceeded = false;\n    setTimeout(() => {\n      isTimeExceeded = true;\n    }, timeout);\n    let requestCount = 0;\n    do {\n      const checkStatusResult = await this.client.extrinsic.status({\n        hash\n      });\n      if (checkStatusResult.isCompleted || checkStatusResult.error) {\n        return checkStatusResult;\n      }\n      await sleep(waitTime);\n      requestCount += 1;\n    } while (!isTimeExceeded && requestCount < maxRequests);\n    if (isTimeExceeded) throw new TimeoutError(hash, timeout);\n    throw new MaxStatusRequestsError(hash, maxRequests);\n  }\n  async status(args) {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url: \"status\",\n      params: args\n    });\n    return response.data;\n  }\n  async get(args) {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url: \"\",\n      params: args\n    });\n    return response.data;\n  }\n};\n__name(Extrinsic, \"Extrinsic\");\n\n// packages/sdk/package.json\nvar version = \"0.7.5\";\n\n// packages/sdk/src/common/base-client.ts\nvar BaseClient = class {\n  constructor(options) {\n    __publicField(this, \"instance\");\n    __publicField(this, \"options\");\n    __publicField(this, \"extrinsic\");\n    this.options = options;\n    this.checkOptions();\n    this.instance = Axios.create({\n      baseURL: `${this.options.baseUrl}`,\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity\n    });\n    this.instance.interceptors.response.use(response => response, exception => {\n      const err = exception.response?.data?.error;\n      throw err && typeof err === \"object\" ? new ApiError(err) : exception;\n    });\n    if (version) {\n      this.instance.defaults.headers.common[\"X-SDK-Version\"] = version;\n    }\n    this.extrinsic = new Extrinsic(this, \"extrinsic\");\n  }\n  checkOptions() {\n    const {\n      baseUrl\n    } = this.options;\n    if (!this.options.baseUrl) {\n      throw new Error(`'baseUrl' option is required`);\n    }\n    this.options.baseUrl = baseUrl.replace(/\\/$/, \"\");\n    if (!this.options.statusTotalTimeoutInMs) {\n      this.options.statusTotalTimeoutInMs = 3 * 60 * 1e3;\n    }\n    if (!this.options.maximumNumberOfStatusRequests) {\n      this.options.maximumNumberOfStatusRequests = Number.MAX_SAFE_INTEGER;\n    }\n    if (!this.options.waitBetweenStatusRequestsInMs) {\n      this.options.waitBetweenStatusRequestsInMs = 5e3;\n    }\n  }\n};\n__name(BaseClient, \"BaseClient\");\n\n// packages/sdk/src/common/mutation.ts\nvar MutationAbstract = class {\n  constructor(client, method, path, methodName) {\n    __publicField(this, \"client\");\n    __publicField(this, \"method\");\n    __publicField(this, \"path\");\n    __publicField(this, \"methodName\");\n    __publicField(this, \"url\");\n    this.client = client;\n    this.method = method;\n    this.path = path;\n    this.methodName = methodName;\n    this.url = `${this.client.options.baseUrl}/${this.path}`;\n  }\n  async buildBatch(args, options) {\n    const data = args.map(a => addAddress(this.client.options, a));\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: {\n        ...options,\n        use: \"BuildBatch\"\n      },\n      data\n    });\n    return response.data;\n  }\n  async build(args, options) {\n    const data = addAddress(this.client.options, args);\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: {\n        ...options,\n        use: \"Build\"\n      },\n      data\n    });\n    return response.data;\n  }\n  async getFee(args) {\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: {\n        use: \"GetFee\"\n      },\n      data: args\n    });\n    return response?.data;\n  }\n  async sign(args, options) {\n    const unsigned = isUnsignedTxPayloadResponse(args) ? args : await this.build(args, options);\n    const {\n      signerPayloadJSON\n    } = unsigned;\n    const {\n      signature\n    } = await this.client.extrinsic.sign(unsigned, options?.signer);\n    return {\n      signature,\n      signerPayloadJSON\n    };\n  }\n  async submit(args, options) {\n    const submitTxArguments = isSubmitTxBody(args) ? args : await this.sign(args, options);\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: {\n        ...options,\n        use: \"Submit\"\n      },\n      data: submitTxArguments\n    });\n    return response.data;\n  }\n  async submitWatch(args, options) {\n    const submitTxArguments = isSubmitTxBody(args) ? args : await this.sign(args, options);\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: {\n        ...options,\n        use: \"SubmitWatch\"\n      },\n      data: submitTxArguments\n    });\n    return response.data;\n  }\n  async submitWaitResult(args, options) {\n    const {\n      hash\n    } = await this.submitWatch(args, options);\n    return this.client.extrinsic.waitResult({\n      hash\n    });\n  }\n  batchCall(args) {\n    if (!this.methodName) {\n      throw new Error(`Batching not defined in method: ${this.path}`);\n    }\n    return {\n      method: this.methodName,\n      rawPayload: args\n    };\n  }\n};\n__name(MutationAbstract, \"MutationAbstract\");\nvar Mutation = /* @__PURE__ */__name(class Mutation2 extends MutationAbstract {}, \"Mutation\");\nfunction createMutationByInstance(mutation) {\n  const submitWaitResult = /* @__PURE__ */__name((args, options) => mutation.submitWaitResult(args, options), \"submitWaitResult\");\n  submitWaitResult.build = mutation.build.bind(mutation);\n  submitWaitResult.buildBatch = mutation.buildBatch.bind(mutation);\n  submitWaitResult.getFee = mutation.getFee.bind(mutation);\n  submitWaitResult.sign = mutation.sign.bind(mutation);\n  submitWaitResult.submit = mutation.submit.bind(mutation);\n  submitWaitResult.submitWatch = mutation.submitWatch.bind(mutation);\n  submitWaitResult.submitWaitResult = mutation.submitWaitResult.bind(mutation);\n  submitWaitResult.batchCall = mutation.batchCall.bind(mutation);\n  return submitWaitResult;\n}\n__name(createMutationByInstance, \"createMutationByInstance\");\nvar MethodNameNull = null;\nfunction createMutationEx(client, method, path, methodName) {\n  const mutation = new Mutation(client, method, path, methodName);\n  return createMutationByInstance(mutation);\n}\n__name(createMutationEx, \"createMutationEx\");\n\n// packages/sdk/src/sections/balance.ts\nvar Balance = class extends Section {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"transfer\", createMutationEx(this.client, Method.POST, `${this.path}/transfer`, {\n      section: \"balances\",\n      method: \"transferKeepAlive\"\n    }));\n    __publicField(this, \"get\", /* @__PURE__ */__name(args => this.query(\"\", args), \"get\"));\n  }\n};\n__name(Balance, \"Balance\");\n\n// packages/sdk/src/sections/collection.ts\nvar Collection = class extends Section {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"setProperties\", createMutationEx(this.client, Method.POST, `${this.path}/properties`, {\n      section: \"unique\",\n      method: \"setCollectionProperties\"\n    }));\n    __publicField(this, \"deleteProperties\", createMutationEx(this.client, Method.DELETE, `${this.path}/properties`, {\n      section: \"unique\",\n      method: \"deleteCollectionProperties\"\n    }));\n    __publicField(this, \"setPropertyPermissions\", createMutationEx(this.client, Method.POST, `${this.path}/property-permissions`, {\n      section: \"unique\",\n      method: \"setTokenPropertyPermissions\"\n    }));\n    __publicField(this, \"properties\", /* @__PURE__ */__name(args => this.query(\"properties\", args), \"properties\"));\n    __publicField(this, \"tokens\", /* @__PURE__ */__name(args => this.query(\"tokens\", args), \"tokens\"));\n    __publicField(this, \"propertyPermissions\", /* @__PURE__ */__name(args => this.query(\"property-permissions\", args), \"propertyPermissions\"));\n    /**\n    * @deprecated Use create method\n    */\n    __publicField(this, \"creation\", createMutationEx(this.client, Method.POST, this.path, {\n      section: \"unique\",\n      method: \"createCollectionEx\"\n    }));\n    __publicField(this, \"create\", createMutationEx(this.client, Method.POST, this.path, {\n      section: \"unique\",\n      method: \"createCollectionEx\"\n    }));\n    __publicField(this, \"createV2\", createMutationEx(this.client, Method.POST, `${this.path}/v2`, {\n      section: \"unique\",\n      method: \"createCollectionEx\"\n    }));\n    __publicField(this, \"getLimits\", /* @__PURE__ */__name(args => this.query(\"limits\", args), \"getLimits\"));\n    __publicField(this, \"setLimits\", createMutationEx(this.client, Method.POST, `${this.path}/set-limits`, {\n      section: \"unique\",\n      method: \"setCollectionLimits\"\n    }));\n    __publicField(this, \"get\", /* @__PURE__ */__name(args => this.query(\"\", args), \"get\"));\n    __publicField(this, \"getV2\", /* @__PURE__ */__name(args => this.query(\"v2\", args), \"getV2\"));\n    __publicField(this, \"transfer\", createMutationEx(this.client, Method.PATCH, `${this.path}/transfer`, {\n      section: \"unique\",\n      method: \"changeCollectionOwner\"\n    }));\n    __publicField(this, \"destroy\", createMutationEx(this.client, Method.DELETE, this.path, {\n      section: \"unique\",\n      method: \"destroyCollection\"\n    }));\n    __publicField(this, \"stats\", /* @__PURE__ */__name(() => this.query(\"stats\"), \"stats\"));\n    __publicField(this, \"setTransfersEnabled\", createMutationEx(this.client, Method.POST, `${this.path}/transfers-enabled`, {\n      section: \"unique\",\n      method: \"setTransfersEnabledFlag\"\n    }));\n    __publicField(this, \"setPermissions\", createMutationEx(this.client, Method.POST, `${this.path}/permissions`, {\n      section: \"unique\",\n      method: \"setCollectionPermissions\"\n    }));\n    __publicField(this, \"nextSponsored\", /* @__PURE__ */__name(args => this.query(\"next-sponsored\", args), \"nextSponsored\"));\n    __publicField(this, \"lastTokenId\", /* @__PURE__ */__name(args => this.query(\"last-token-id\", args), \"lastTokenId\"));\n    __publicField(this, \"allowList\", /* @__PURE__ */__name(args => this.query(\"allow-list\", args), \"allowList\"));\n    __publicField(this, \"allowed\", /* @__PURE__ */__name(args => this.query(\"allowed\", args), \"allowed\"));\n    __publicField(this, \"addToAllowList\", createMutationEx(this.client, Method.POST, `${this.path}/add-to-allow-list`, {\n      section: \"unique\",\n      method: \"addToAllowList\"\n    }));\n    __publicField(this, \"removeFromAllowList\", createMutationEx(this.client, Method.POST, `${this.path}/remove-from-allow-list`, {\n      section: \"unique\",\n      method: \"removeFromAllowList\"\n    }));\n    __publicField(this, \"admins\", /* @__PURE__ */__name(args => this.query(\"admins\", args), \"admins\"));\n    __publicField(this, \"addAdmin\", createMutationEx(this.client, Method.POST, `${this.path}/admins`, {\n      section: \"unique\",\n      method: \"addCollectionAdmin\"\n    }));\n    __publicField(this, \"removeAdmin\", createMutationEx(this.client, Method.DELETE, `${this.path}/admins`, {\n      section: \"unique\",\n      method: \"removeCollectionAdmin\"\n    }));\n    __publicField(this, \"setSponsorship\", createMutationEx(this.client, Method.POST, `${this.path}/sponsorship`, {\n      section: \"unique\",\n      method: \"setCollectionSponsor\"\n    }));\n    __publicField(this, \"confirmSponsorship\", createMutationEx(this.client, Method.POST, `${this.path}/sponsorship/confirm`, {\n      section: \"unique\",\n      method: \"confirmSponsorship\"\n    }));\n    __publicField(this, \"removeSponsorship\", createMutationEx(this.client, Method.DELETE, `${this.path}/sponsorship`, {\n      section: \"unique\",\n      method: \"removeCollectionSponsor\"\n    }));\n    __publicField(this, \"totalSupply\", /* @__PURE__ */__name(args => this.query(\"total-supply\", args), \"totalSupply\"));\n  }\n};\n__name(Collection, \"Collection\");\n\n// packages/sdk/src/sections/erc721.ts\nvar ERC721 = class extends Section {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"createCollection\", createMutationEx(this.client, Method.POST, `${this.path}/collection`, MethodNameNull));\n    __publicField(this, \"createToken\", createMutationEx(this.client, Method.POST, `${this.path}/token`, MethodNameNull));\n  }\n};\n__name(ERC721, \"ERC721\");\n\n// packages/sdk/src/sections/fungible.ts\nvar Fungible = class extends Section {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"transfer\", createMutationEx(this.client, Method.POST, `${this.path}/transfer`, MethodNameNull));\n    __publicField(this, \"getCollection\", /* @__PURE__ */__name(args => this.query(\"collection\", args), \"getCollection\"));\n    __publicField(this, \"burn\", createMutationEx(this.client, Method.DELETE, this.path, MethodNameNull));\n    __publicField(this, \"createCollection\", createMutationEx(this.client, Method.POST, `${this.path}/collection`, MethodNameNull));\n    __publicField(this, \"getBalance\", /* @__PURE__ */__name(args => this.query(\"balance\", args), \"getBalance\"));\n    __publicField(this, \"addTokens\", createMutationEx(this.client, Method.POST, `${this.path}/tokens`, MethodNameNull));\n    __publicField(this, \"transferTokens\", createMutationEx(this.client, Method.POST, `${this.path}/tokens/transfer`, MethodNameNull));\n    __publicField(this, \"approveTokens\", createMutationEx(this.client, Method.POST, `${this.path}/tokens/approve`, MethodNameNull));\n    __publicField(this, \"allowanceTokens\", /* @__PURE__ */__name(args => this.query(\"tokens/allowance\", args), \"allowanceTokens\"));\n    __publicField(this, \"totalPieces\", /* @__PURE__ */__name(args => this.query(\"total-pieces\", args), \"totalPieces\"));\n  }\n};\n__name(Fungible, \"Fungible\");\n\n// packages/sdk/src/sections/refungible.ts\nvar Refungible = class extends Section {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"getCollection\", /* @__PURE__ */__name(args => this.query(\"collection\", args), \"getCollection\"));\n    __publicField(this, \"burn\", createMutationEx(this.client, Method.DELETE, this.path, MethodNameNull));\n    __publicField(this, \"getBalance\", /* @__PURE__ */__name(args => this.query(\"tokens/balance\", args), \"getBalance\"));\n    __publicField(this, \"createCollection\", createMutationEx(this.client, Method.POST, `${this.path}/collection`, MethodNameNull));\n    __publicField(this, \"createToken\", createMutationEx(this.client, Method.POST, `${this.path}/tokens`, MethodNameNull));\n    __publicField(this, \"transferToken\", createMutationEx(this.client, Method.POST, `${this.path}/tokens/transfer`, MethodNameNull));\n    __publicField(this, \"approveToken\", createMutationEx(this.client, Method.POST, `${this.path}/tokens/approve`, MethodNameNull));\n    __publicField(this, \"allowanceToken\", /* @__PURE__ */__name(args => this.query(\"tokens/allowance\", args), \"allowanceToken\"));\n    __publicField(this, \"repartitionToken\", createMutationEx(this.client, Method.POST, `${this.path}/tokens/repartition`, MethodNameNull));\n    __publicField(this, \"totalPieces\", /* @__PURE__ */__name(args => this.query(\"tokens/total-pieces\", args), \"totalPieces\"));\n    __publicField(this, \"accountTokens\", /* @__PURE__ */__name(args => this.query(\"tokens/account-tokens\", args), \"accountTokens\"));\n  }\n};\n__name(Refungible, \"Refungible\");\n\n// packages/sdk/src/sections/ipfs.ts\nimport FormData from \"form-data\";\nvar isFileLike = /* @__PURE__ */__name(input => Object.hasOwnProperty.call(input, \"content\"), \"isFileLike\");\nvar Ipfs = class extends Section {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"headers\", {\n      \"Content-Type\": `multipart/form-data`\n    });\n  }\n  async uploadFile({\n    file\n  }) {\n    const data = new FormData();\n    data.append(\"file\", file, \"file\");\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-file`,\n      data,\n      headers: this.headers\n    });\n    return response.data;\n  }\n  async uploadFiles({\n    files\n  }) {\n    const data = Ipfs.filesToFormData(files);\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-files`,\n      data,\n      headers: this.headers\n    });\n    return response.data;\n  }\n  async addFiles({\n    cid,\n    files\n  }) {\n    const data = Ipfs.filesToFormData(files);\n    data.append(\"cid\", cid);\n    const response = await this.client.instance({\n      method: Method.PATCH,\n      url: `${this.baseUrl}/add-files`,\n      data,\n      headers: this.headers\n    });\n    return response.data;\n  }\n  async uploadZip({\n    file\n  }) {\n    const form = new FormData();\n    form.append(\"file\", file, \"file\");\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-zip`,\n      data: form,\n      headers: {\n        \"Content-Type\": `multipart/form-data`\n      }\n    });\n    return response.data;\n  }\n  static filesToFormData(files) {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append(\"files\", isFileLike(file) ? file.content : file, file.name);\n    });\n    return formData;\n  }\n};\n__name(Ipfs, \"Ipfs\");\n\n// packages/sdk/src/sections/token.ts\nvar Token = class extends Section {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"setProperties\", createMutationEx(this.client, Method.POST, `${this.path}/properties`, {\n      section: \"unique\",\n      method: \"setTokenProperties\"\n    }));\n    __publicField(this, \"deleteProperties\", createMutationEx(this.client, Method.DELETE, `${this.path}/properties`, {\n      section: \"unique\",\n      method: \"deleteTokenProperties\"\n    }));\n    __publicField(this, \"properties\", /* @__PURE__ */__name(args => this.query(\"properties\", args), \"properties\"));\n    __publicField(this, \"create\", createMutationEx(this.client, Method.POST, this.path, {\n      section: \"unique\",\n      method: \"createItem\"\n    }));\n    __publicField(this, \"createV2\", createMutationEx(this.client, Method.POST, `${this.path}/v2`, {\n      section: \"unique\",\n      method: \"createItem\"\n    }));\n    __publicField(this, \"createMultiple\", createMutationEx(this.client, Method.POST, `${this.path}/create-multiple`, {\n      section: \"unique\",\n      method: \"createMultipleItemsEx\"\n    }));\n    __publicField(this, \"createMultipleV2\", createMutationEx(this.client, Method.POST, `${this.path}/create-multiple-v2`, {\n      section: \"unique\",\n      method: \"createMultipleItemsEx\"\n    }));\n    __publicField(this, \"accountTokens\", /* @__PURE__ */__name(args => this.query(\"account-tokens\", args), \"accountTokens\"));\n    __publicField(this, \"get\", /* @__PURE__ */__name(args => this.query(\"\", args), \"get\"));\n    __publicField(this, \"getV2\", /* @__PURE__ */__name(args => this.query(\"v2\", args), \"getV2\"));\n    __publicField(this, \"exists\", /* @__PURE__ */__name(args => this.query(\"exists\", args), \"exists\"));\n    __publicField(this, \"children\", /* @__PURE__ */__name(args => this.query(\"children\", args), \"children\"));\n    __publicField(this, \"parent\", /* @__PURE__ */__name(args => this.query(\"parent\", args), \"parent\"));\n    __publicField(this, \"owner\", /* @__PURE__ */__name(args => this.query(\"owner\", args), \"owner\"));\n    __publicField(this, \"topmostOwner\", /* @__PURE__ */__name(args => this.query(\"topmost-owner\", args), \"topmostOwner\"));\n    __publicField(this, \"nest\", createMutationEx(this.client, Method.POST, `${this.path}/nest`, MethodNameNull));\n    __publicField(this, \"unnest\", createMutationEx(this.client, Method.POST, `${this.path}/unnest`, MethodNameNull));\n    __publicField(this, \"burn\", createMutationEx(this.client, Method.DELETE, this.path, {\n      section: \"unique\",\n      method: \"burnFrom\"\n    }));\n    __publicField(this, \"transfer\", createMutationEx(this.client, Method.PATCH, `${this.path}/transfer`, {\n      section: \"unique\",\n      method: \"transferFrom\"\n    }));\n    __publicField(this, \"approve\", createMutationEx(this.client, Method.POST, `${this.path}/approve`, {\n      section: \"unique\",\n      method: \"approve\"\n    }));\n    __publicField(this, \"allowance\", /* @__PURE__ */__name(args => this.query(\"allowance\", args), \"allowance\"));\n    __publicField(this, \"isBundle\", /* @__PURE__ */__name(args => this.query(\"is-bundle\", args), \"isBundle\"));\n    __publicField(this, \"getBundle\", /* @__PURE__ */__name(args => this.query(\"get-bundle\", args), \"getBundle\"));\n    __publicField(this, \"balance\", /* @__PURE__ */__name(args => this.query(\"balance\", args), \"balance\"));\n  }\n};\n__name(Token, \"Token\");\n\n// packages/sdk/src/sections/common.ts\nvar Common = class extends Section {\n  constructor() {\n    super(...arguments);\n    __publicField(this, \"chainProperties\", /* @__PURE__ */__name(() => this.query(\"chain-properties\"), \"chainProperties\"));\n    __publicField(this, \"getNonce\", /* @__PURE__ */__name(args => this.query(\"nonce\", args), \"getNonce\"));\n    __publicField(this, \"batch\", createMutationEx(this.client, Method.POST, `${this.path}/batching`, MethodNameNull));\n  }\n};\n__name(Common, \"Common\");\n\n// packages/sdk/src/sections/state-queries.ts\nvar StateQueries = class extends Section {\n  async get(args) {\n    const {\n      endpoint,\n      module,\n      method\n    } = args;\n    const url = `${endpoint}/${module}/${method}`;\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url\n    });\n    return response.data;\n  }\n  async execute(params, body) {\n    const {\n      endpoint,\n      module,\n      method\n    } = params;\n    const url = `${endpoint}/${module}/${method}`;\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url,\n      data: body || {}\n    });\n    return response.data;\n  }\n};\n__name(StateQueries, \"StateQueries\");\n\n// packages/sdk/src/common/constants.ts\nvar Chains;\n(function (Chains2) {\n  Chains2[\"opal\"] = \"opal\";\n  Chains2[\"sapphire\"] = \"sapphire\";\n  Chains2[\"quartz\"] = \"quartz\";\n  Chains2[\"unique\"] = \"unique\";\n})(Chains || (Chains = {}));\nvar CHAIN_CONFIG = {\n  opal: {\n    websocketUrl: \"wss://ws-opal.unique.network\",\n    rpcUrl: \"https://rpc-opal.unique.network\",\n    restUrl: \"https://rest.unique.network/opal/v1\",\n    ss58Prefix: 42,\n    currency: {\n      symbol: \"OPL\",\n      decimals: 18\n    },\n    logo: {\n      color: \"#0CB6B8\",\n      ipfsCid: \"QmYJDpmWyjDa3H6BxweFmQXk4fU8b1GU7M9EqYcaUNvXzc\"\n    }\n  },\n  sapphire: {\n    websocketUrl: \"wss://ws-sapphire.unique.network\",\n    ss58Prefix: 8883,\n    rpcUrl: \"https://rpc-sapphire.unique.network\",\n    restUrl: \"https://rest.unique.network/sapphire/v1\",\n    currency: {\n      symbol: \"QTZ\",\n      decimals: 18\n    },\n    logo: {\n      color: \"#5D59FF\",\n      ipfsCid: \"Qmd1PGt4cDRjFbh4ihP5QKEd4XQVwN1MkebYKdF56V74pf\"\n    }\n  },\n  quartz: {\n    websocketUrl: \"wss://ws-quartz.unique.network\",\n    ss58Prefix: 255,\n    rpcUrl: \"https://rpc-quartz.unique.network\",\n    restUrl: \"https://rest.unique.network/quartz/v1\",\n    currency: {\n      symbol: \"QTZ\",\n      decimals: 18\n    },\n    logo: {\n      color: \"#FF4D6A\",\n      ipfsCid: \"QmaGPdccULQEFcCGxzstnmE8THfac2kSiGwvWRAiaRq4dp\"\n    }\n  },\n  unique: {\n    websocketUrl: \"wss://ws.unique.network\",\n    ss58Prefix: 7391,\n    rpcUrl: \"https://rpc.unique.network\",\n    restUrl: \"https://rest.unique.network/unique/v1\",\n    currency: {\n      symbol: \"UNQ\",\n      decimals: 18\n    },\n    logo: {\n      color: \"#00BFFF\",\n      ipfsCid: \"QmbJ7CGZ2GxWMp7s6jy71UGzRsMe4w3KANKXDAExYWdaFR\"\n    }\n  }\n};\n\n// packages/sdk/src/thin-client.ts\nvar ThinClient = class extends BaseClient {\n  constructor(options) {\n    super(options);\n    __publicField(this, \"options\");\n    __publicField(this, \"common\");\n    __publicField(this, \"balance\");\n    __publicField(this, \"fungible\");\n    __publicField(this, \"refungible\");\n    __publicField(this, \"collection\");\n    __publicField(this, \"token\");\n    __publicField(this, \"erc721\");\n    __publicField(this, \"ipfs\");\n    __publicField(this, \"stateQuery\");\n    __publicField(this, \"defaults\");\n    this.options = options;\n    this.defaults = {\n      baseUrl: \"\"\n    };\n    this.common = new Common(this, \"common\");\n    this.balance = new Balance(this, \"balance\");\n    this.fungible = new Fungible(this, \"fungible\");\n    this.refungible = new Refungible(this, \"refungible\");\n    this.collection = new Collection(this, \"collections\");\n    this.token = new Token(this, \"tokens\");\n    this.erc721 = new ERC721(this, \"erc721\");\n    this.ipfs = new Ipfs(this, \"ipfs\");\n    this.stateQuery = new StateQueries(this, \"query\");\n  }\n};\n__name(ThinClient, \"ThinClient\");\n\n// packages/sdk/src/index.ts\nvar src_default = ThinClient;\nexport { BalanceMethods, CHAIN_CONFIG, Chains, Method, Rooms, SubscriptionEvents, ThinClient, src_default as default };","map":{"version":3,"names":["Axios","ApiError","Error","constructor","responseError","message","__publicField","code","name","details","__name","MaxStatusRequestsError","txHash","limit","TimeoutError","timeoutMs","Method2","Method","Rooms2","Rooms","SubscriptionEvents2","SubscriptionEvents","BalanceMethods2","BalanceMethods","Section","client","path","baseUrl","options","query","url","params","response","instance","method","GET","baseURL","data","postRequest","POST","isUnsignedTxPayloadResponse","args","isSubmitTxBody","sleep","ms","Promise","resolve","setTimeout","getAddress","address","signer","account","addAddress","getSigner","accountOrSigner","getAddress2","Extrinsic","build","getFee","sign","signerToUse","submit","submitWatch","txBuild","extrinsic","signedTxPayload","submitTxResult","signerPayloadJSON","signature","submitWaitResult","hash","waitResult","timeout","statusTotalTimeoutInMs","maxRequests","maximumNumberOfStatusRequests","waitTime","waitBetweenStatusRequestsInMs","isTimeExceeded","requestCount","checkStatusResult","status","isCompleted","error","get","version","BaseClient","checkOptions","create","maxContentLength","Infinity","maxBodyLength","interceptors","use","exception","err","defaults","headers","common","replace","Number","MAX_SAFE_INTEGER","MutationAbstract","methodName","buildBatch","map","a","unsigned","submitTxArguments","batchCall","rawPayload","Mutation","Mutation2","createMutationByInstance","mutation","bind","MethodNameNull","createMutationEx","Balance","section","Collection","DELETE","PATCH","ERC721","Fungible","Refungible","FormData","isFileLike","input","Object","hasOwnProperty","call","Ipfs","uploadFile","file","append","uploadFiles","files","filesToFormData","addFiles","cid","uploadZip","form","formData","forEach","content","Token","Common","StateQueries","endpoint","module","execute","body","Chains2","Chains","CHAIN_CONFIG","opal","websocketUrl","rpcUrl","restUrl","ss58Prefix","currency","symbol","decimals","logo","color","ipfsCid","sapphire","quartz","unique","ThinClient","balance","fungible","refungible","collection","token","erc721","ipfs","stateQuery","src_default"],"sources":["C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\common\\base-client.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\errors\\api-error.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\errors\\max-status-requests-error.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\errors\\timeout-error.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\types\\enums.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\common\\types\\subscriptions.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\common\\section.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\common\\utils.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\extrinsic.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\package.json","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\common\\mutation.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\balance.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\collection.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\erc721.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\fungible.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\refungible.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\ipfs.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\token.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\common.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\sections\\state-queries.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\common\\constants.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\thin-client.ts","C:\\Users\\khyy4\\Documents\\Code-Projects\\polkahack\\pookey\\packages\\sdk\\src\\index.ts"],"sourcesContent":["import Axios, { AxiosInstance } from 'axios';\n\nimport { IBaseClient, IExtrinsics, Options } from '../types';\nimport { ApiError } from '../errors';\n\nimport { Extrinsic } from '../sections/extrinsic';\n\nimport { version } from '../../package.json';\n\nexport class BaseClient implements IBaseClient {\n  public instance: AxiosInstance;\n\n  public readonly options: Options;\n\n  public readonly extrinsic: IExtrinsics;\n\n  constructor(options: Options) {\n    this.options = options;\n    this.checkOptions();\n\n    this.instance = Axios.create({\n      baseURL: `${this.options.baseUrl}`,\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity,\n    });\n\n    this.instance.interceptors.response.use(\n      (response) => response,\n      (exception) => {\n        const err = exception.response?.data?.error;\n        throw err && typeof err === 'object' ? new ApiError(err) : exception;\n      },\n    );\n\n    if (version) {\n      this.instance.defaults.headers.common['X-SDK-Version'] = version;\n    }\n\n    this.extrinsic = new Extrinsic(this, 'extrinsic');\n  }\n\n  private checkOptions() {\n    const { baseUrl } = this.options;\n\n    if (!this.options.baseUrl) {\n      throw new Error(`'baseUrl' option is required`);\n    }\n\n    this.options.baseUrl = baseUrl.replace(/\\/$/, '');\n\n    if (!this.options.statusTotalTimeoutInMs) {\n      this.options.statusTotalTimeoutInMs = 3 * 60 * 1000;\n    }\n\n    if (!this.options.maximumNumberOfStatusRequests) {\n      this.options.maximumNumberOfStatusRequests = Number.MAX_SAFE_INTEGER;\n    }\n\n    if (!this.options.waitBetweenStatusRequestsInMs) {\n      this.options.waitBetweenStatusRequestsInMs = 5_000;\n    }\n  }\n}\n","interface RestError {\n  code: string;\n  name: string;\n  message: string;\n  details?: unknown;\n}\n\nexport class ApiError extends Error implements RestError {\n  public readonly code: string;\n\n  public readonly details: unknown;\n\n  constructor(responseError: RestError) {\n    super(responseError.message);\n    this.code = responseError.code;\n    this.name = responseError.name;\n    this.details = responseError.details;\n  }\n}\n","/**\n * Error thrown when the maximum number of status requests has been reached.\n */\nexport class MaxStatusRequestsError extends Error {\n  details: string;\n\n  txHash: string;\n\n  limit: number;\n\n  constructor(txHash: string, limit: number) {\n    const message = `Extrinsic status was not changed within the specified count of status requests (${limit}).`;\n\n    super(message);\n\n    this.details =\n      `${message} This does not mean that the Extrinsic has failed nor that it will be included in the future.` +\n      ' You can check the status of the Extrinsic by calling the getStatus() method.';\n\n    this.txHash = txHash;\n    this.limit = limit;\n  }\n}\n","export class TimeoutError extends Error {\n  details: string;\n\n  txHash: string;\n\n  timeoutMs: number;\n\n  constructor(txHash: string, timeoutMs: number) {\n    const message = `Extrinsic status was not changed within the specified time (${timeoutMs} ms).`;\n\n    super(message);\n    this.details =\n      `${message} This does not mean that the Extrinsic has failed nor that it will be included in the future.` +\n      ' You can check the status of the Extrinsic by calling the getStatus() method.';\n\n    this.txHash = txHash;\n    this.timeoutMs = timeoutMs;\n  }\n}\n","export enum Method {\n  GET = 'GET',\n  POST = 'POST',\n  DELETE = 'DELETE',\n  PATCH = 'PATCH',\n  PUT = 'PUT',\n}\n","export enum Rooms {\n  SYSTEM = 'system',\n  BLOCKS = 'blocks',\n  EXTRINSICS = 'extrinsics',\n  COLLECTION = 'collection',\n  CONTRACT = 'contract',\n  EVENTS = 'events',\n  BALANCE = 'balance',\n  ACCOUNT_CURRENT_BALANCE = 'account-current-balance',\n}\n\nexport enum SubscriptionEvents {\n  SYSTEM = 'system',\n  BLOCKS = 'blocks',\n  EXTRINSICS = 'extrinsics',\n  EVENTS = 'events',\n  CONTRACT_LOGS = 'contract-logs',\n  COLLECTIONS = 'collections',\n  HAS_NEXT = 'has-next',\n  BALANCES = 'balances',\n  ACCOUNT_CURRENT_BALANCE = 'account-current-balance',\n  SUBSCRIBE_STATE = 'subscribe-state',\n}\n\nexport interface Room {\n  name: Rooms;\n  data: {\n    [key: string]: string;\n  };\n}\n\nexport interface BlockFilter {\n  fromBlock?: number;\n}\n\nexport interface ExtrinsicFilter extends BlockFilter {\n  signer?: string | '*';\n}\n\nexport interface CollectionFilter extends ExtrinsicFilter {\n  collectionId?: number | '*';\n}\n\nexport interface BalancesFilter extends ExtrinsicFilter {\n  address?: string | '*';\n}\n\nexport interface AccountCurrentBalanceFilter {\n  address?: string | '*';\n}\n\nexport interface ContractFilter extends ExtrinsicFilter {\n  address?: string | '*';\n}\n\nexport interface EventsFilter extends ExtrinsicFilter {\n  section?: string | '*';\n  method?: string | '*';\n}\n\nexport interface ContractLog {\n  address: string;\n  topics: Array<any>;\n  data: string;\n}\n\nexport enum BalanceMethods {\n  WITHDRAW = 'Withdraw',\n  TRANSFER = 'Transfer',\n  DEPOSIT = 'Deposit',\n\n  DUST_LOST = 'DustLost',\n  ENDOWED = 'Endowed',\n  LOCKED = 'Locked',\n  UNLOCKED = 'Unlocked',\n  RESERVED = 'Reserved',\n}\n\nexport interface BalancesParsedData {\n  method: BalanceMethods;\n  from?: string;\n  to?: string;\n  amount: string;\n}\n","import { IBaseClient, ISection, Method } from '../types';\n\nexport abstract class Section implements ISection {\n  public readonly baseUrl: string;\n\n  constructor(\n    public readonly client: IBaseClient,\n    public readonly path: string,\n  ) {\n    this.baseUrl = `${this.client.options.baseUrl}/${path}`;\n  }\n\n  async query<P, R>(url: string, params?: P): Promise<R> {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url,\n      params,\n    });\n    return response.data;\n  }\n\n  async postRequest<P, R, Q>(url: string, data?: P, params?: Q): Promise<R> {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url,\n      data,\n      params,\n    });\n    return response.data;\n  }\n}\n","import {\n  SubmitTxBody,\n  UnsignedTxPayloadResponse,\n  Account,\n  Options,\n  Signer,\n  WithAddress,\n  WithOptionalAddress,\n} from '../types';\n\nexport const isUnsignedTxPayloadResponse = (\n  args: unknown,\n): args is UnsignedTxPayloadResponse =>\n  typeof args === 'object' && !!args && 'signerPayloadJSON' in args;\n\nexport const isSubmitTxBody = (args: unknown): args is SubmitTxBody =>\n  isUnsignedTxPayloadResponse(args) && !!args && 'signature' in args;\n\nexport function sleep(ms: number) {\n  return new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n}\n\nconst hasOwnProperty = (obj: unknown, prop: string): boolean =>\n  Object.prototype.hasOwnProperty.call(obj, prop);\n\nexport const getSigner = (\n  options: Options,\n  accountOrSigner?: Account | Signer,\n): Signer | undefined => {\n  if (accountOrSigner) {\n    return hasOwnProperty(accountOrSigner, 'sign')\n      ? (accountOrSigner as Signer)\n      : (accountOrSigner as Account).signer;\n  }\n\n  if (options.signer) return options.signer;\n  if (options.account?.signer) return options.account.signer;\n\n  return undefined;\n};\n\nconst getAddress = (\n  options: Options,\n  args: { address?: string },\n): string | undefined => {\n  if (args.address) return args.address;\n  if (options.signer?.address) return options.signer.address;\n  if (options.account?.address) return options.account.address;\n  if (options.account?.signer?.address) return options.account.signer.address;\n\n  return undefined;\n};\n\nexport const addAddress = <A extends WithOptionalAddress>(\n  options: Options,\n  args: A,\n): A & WithAddress => {\n  const address = getAddress(options, args);\n  if (!address) throw new Error('No address provided');\n\n  return { ...args, address };\n};\n","/* eslint-disable no-await-in-loop */\n\nimport { Section } from '../common';\nimport {\n  SignTxResultResponse,\n  UnsignedTxPayloadBody,\n  SubmitTxBody,\n  SubmitResultResponse,\n  ExtrinsicResultResponse,\n  FeeResponse,\n  ExtrinsicResultRequest,\n  GetExtrinsicQuery,\n  GetExtrinsicResponse,\n  Method,\n  SdkTxBuildBody,\n  Account,\n  Signer,\n  IExtrinsics,\n  Options,\n} from '../types';\nimport { sleep } from '../common/utils';\nimport { TimeoutError, MaxStatusRequestsError } from '../errors';\n\nconst getSigner = (\n  options: Options,\n  accountOrSigner?: Account | Signer,\n): Signer | undefined => {\n  if (accountOrSigner) {\n    return 'sign' in accountOrSigner\n      ? (accountOrSigner as Signer)\n      : (accountOrSigner as Account).signer;\n  }\n\n  if (options.signer) return options.signer;\n  if (options.account?.signer) return options.account.signer;\n\n  return undefined;\n};\n\nconst getAddress = (\n  options: Options,\n  args: { address?: string },\n): string | undefined => {\n  if (args.address) return args.address;\n  if (options.signer?.address) return options.signer.address;\n  if (options.account?.address) return options.account.address;\n  if (options.account?.signer?.address) return options.account.signer.address;\n\n  return undefined;\n};\n\nexport class Extrinsic extends Section implements IExtrinsics {\n  async build(args: SdkTxBuildBody): Promise<UnsignedTxPayloadBody> {\n    const address = getAddress(this.client.options, args);\n\n    if (!address) throw new Error('Invalid address');\n\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: 'build',\n      data: {\n        ...args,\n        address,\n      },\n    });\n\n    return response.data;\n  }\n\n  async getFee(\n    args: SdkTxBuildBody | UnsignedTxPayloadBody | SubmitTxBody,\n  ): Promise<FeeResponse> {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: 'calculate-fee',\n      data: args,\n    });\n    return response.data;\n  }\n\n  async sign(\n    args: UnsignedTxPayloadBody,\n    signer?: Account | Signer,\n  ): Promise<SignTxResultResponse> {\n    const signerToUse = getSigner(this.client.options, signer);\n\n    if (!signerToUse) throw new Error(`No signer provided`);\n\n    return signerToUse.sign(args);\n  }\n\n  async submit(args: SubmitTxBody): Promise<SubmitResultResponse> {\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url: 'submit',\n      data: args,\n    });\n    return response.data;\n  }\n\n  async submitWatch(\n    args: SdkTxBuildBody,\n    signer = this.client.options.signer,\n  ): Promise<SubmitResultResponse> {\n    const txBuild = await this.client.extrinsic.build(args);\n\n    const signedTxPayload = await this.client.extrinsic.sign(txBuild, signer);\n\n    const submitTxResult = await this.client.extrinsic.submit({\n      signerPayloadJSON: txBuild.signerPayloadJSON,\n      signature: signedTxPayload.signature,\n    });\n\n    return submitTxResult;\n  }\n\n  async submitWaitResult(\n    args: SdkTxBuildBody,\n    signer = this.client.options.signer,\n  ): Promise<ExtrinsicResultResponse<any>> {\n    const { hash } = await this.client.extrinsic.submitWatch(args, signer);\n\n    return this.client.extrinsic.waitResult({ hash });\n  }\n\n  async waitResult({\n    hash,\n  }: {\n    hash: string;\n  }): Promise<ExtrinsicResultResponse<any>> {\n    const timeout = this.client.options.statusTotalTimeoutInMs;\n    const maxRequests = this.client.options.maximumNumberOfStatusRequests;\n    const waitTime = this.client.options.waitBetweenStatusRequestsInMs;\n\n    let isTimeExceeded = false;\n    setTimeout(() => {\n      isTimeExceeded = true;\n    }, timeout);\n\n    let requestCount = 0;\n\n    do {\n      const checkStatusResult = await this.client.extrinsic.status({ hash });\n\n      if (checkStatusResult.isCompleted || checkStatusResult.error) {\n        return checkStatusResult;\n      }\n\n      await sleep(waitTime);\n      requestCount += 1;\n    } while (!isTimeExceeded && requestCount < maxRequests);\n\n    if (isTimeExceeded) throw new TimeoutError(hash, timeout);\n\n    throw new MaxStatusRequestsError(hash, maxRequests);\n  }\n\n  async status(\n    args: ExtrinsicResultRequest,\n  ): Promise<ExtrinsicResultResponse<any>> {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url: 'status',\n      params: args,\n    });\n    return response.data;\n  }\n\n  async get(args: GetExtrinsicQuery): Promise<GetExtrinsicResponse> {\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url: '',\n      params: args,\n    });\n    return response.data;\n  }\n}\n","{\n  \"name\": \"@unique-nft/sdk\",\n  \"version\": \"0.7.5\",\n  \"type\": \"module\",\n  \"homepage\": \"https://unique.network/\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/UniqueNetwork/unique-sdk.git\"\n  },\n  \"dependencies\": {\n    \"abi-coder\": \"^4.1.1\",\n    \"axios\": \"^0.27.2\",\n    \"form-data\": \"^4.0.0\",\n    \"socket.io-client\": \"^4.5.4\",\n    \"@unique-nft/utils\": \"^0.3.19\",\n    \"@unique-nft/sr25519\": \"^0.0.2\"\n  },\n  \"description\": \"The @unique-nft/sdk package implements the SDK methods via the REST API. The package implements all the basic methods for working with the Unique Network SDK.\",\n  \"keywords\": [\n    \"blockchain\",\n    \"parachain\",\n    \"polkadot\",\n    \"unique network\",\n    \"nft\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/UniqueNetwork/unique-sdk/issues\"\n  },\n  \"license\": \"MIT\",\n  \"author\": {\n    \"name\": \"Unique Network SDK team\"\n  },\n  \"types\": \"index.d.ts\",\n  \"main\": \"index.js\",\n  \"module\": \"index.mjs\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"require\": \"./index.cjs\",\n      \"default\": \"./index.js\"\n    },\n    \"./evm\": {\n      \"types\": \"./evm.d.ts\",\n      \"require\": \"./evm.cjs\",\n      \"default\": \"./evm.js\"\n    },\n    \"./subscriptions\": {\n      \"types\": \"./subscriptions.d.ts\",\n      \"require\": \"./subscriptions.cjs\",\n      \"default\": \"./subscriptions.js\"\n    },\n    \"./full\": {\n      \"types\": \"./full.d.ts\",\n      \"require\": \"./full.cjs\",\n      \"default\": \"./full.js\"\n    },\n    \"./sr25519\": {\n      \"types\": \"./sr25519.d.ts\",\n      \"require\": \"./sr25519.cjs\",\n      \"default\": \"./sr25519.js\"\n    },\n    \"./extension\": {\n      \"types\": \"./extension.d.ts\",\n      \"require\": \"./extension.cjs\",\n      \"default\": \"./extension.js\"\n    },\n    \"./utils\": {\n      \"types\": \"./utils.d.ts\",\n      \"require\": \"./utils.cjs\",\n      \"default\": \"./utils.js\"\n    }\n  }\n}\n","/* eslint-disable max-classes-per-file */\nimport {\n  ExtrinsicResultResponse,\n  SubmitResultResponse,\n  SubmitTxBody,\n  UnsignedTxPayloadResponse,\n  BuildSequencePayloadsResponse,\n  IMutation,\n  Method,\n  FeeBodyResponse,\n  IBaseClient,\n  MutationOptions,\n  IMutationEx,\n  WithOptionalAddress,\n  BatchCallArgumentsBody,\n  MethodNameBody,\n} from '../types';\nimport {\n  isUnsignedTxPayloadResponse,\n  isSubmitTxBody,\n  addAddress,\n} from './utils';\n\nexport abstract class MutationAbstract<A extends WithOptionalAddress, R>\n  implements IMutation<A, R>\n{\n  public readonly url: string;\n\n  constructor(\n    private readonly client: IBaseClient,\n    private readonly method: Method,\n    private readonly path: string,\n    private readonly methodName: MethodNameBody,\n  ) {\n    this.url = `${this.client.options.baseUrl}/${this.path}`;\n  }\n\n  async buildBatch(\n    args: A[],\n    options?: MutationOptions,\n  ): Promise<BuildSequencePayloadsResponse> {\n    const data = args.map((a) => addAddress(this.client.options, a));\n\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { ...options, use: 'BuildBatch' },\n      data,\n    });\n\n    return response.data;\n  }\n\n  async build(\n    args: A,\n    options?: MutationOptions,\n  ): Promise<UnsignedTxPayloadResponse> {\n    const data = addAddress(this.client.options, args);\n\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { ...options, use: 'Build' },\n      data,\n    });\n\n    return response.data;\n  }\n\n  async getFee(\n    args:\n      | A\n      | UnsignedTxPayloadResponse\n      | SubmitTxBody\n      | Array<A | UnsignedTxPayloadResponse | SubmitTxBody>,\n  ): Promise<FeeBodyResponse> {\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { use: 'GetFee' },\n      data: args,\n    });\n\n    return response?.data as FeeBodyResponse;\n  }\n\n  async sign(\n    args: A | UnsignedTxPayloadResponse,\n    options?: MutationOptions,\n  ): Promise<SubmitTxBody> {\n    const unsigned = isUnsignedTxPayloadResponse(args)\n      ? args\n      : await this.build(args, options);\n\n    const { signerPayloadJSON } = unsigned;\n    const { signature } = await this.client.extrinsic.sign(\n      unsigned,\n      options?.signer,\n    );\n    return { signature, signerPayloadJSON };\n  }\n\n  async submit(\n    args: A | UnsignedTxPayloadResponse | SubmitTxBody,\n    options?: MutationOptions,\n  ): Promise<SubmitResultResponse> {\n    const submitTxArguments = isSubmitTxBody(args)\n      ? args\n      : await this.sign(args, options);\n\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { ...options, use: 'Submit' },\n      data: submitTxArguments,\n    });\n\n    return response.data;\n  }\n\n  async submitWatch(\n    args: A | UnsignedTxPayloadResponse | SubmitTxBody,\n    options?: MutationOptions,\n  ): Promise<SubmitResultResponse> {\n    const submitTxArguments = isSubmitTxBody(args)\n      ? args\n      : await this.sign(args, options);\n\n    const response = await this.client.instance({\n      method: this.method,\n      url: this.url,\n      params: { ...options, use: 'SubmitWatch' },\n      data: submitTxArguments,\n    });\n\n    return response.data;\n  }\n\n  async submitWaitResult(\n    args: A | UnsignedTxPayloadResponse | SubmitTxBody,\n    options?: MutationOptions,\n  ): Promise<ExtrinsicResultResponse<R>> {\n    const { hash } = await this.submitWatch(args, options);\n\n    return this.client.extrinsic.waitResult({ hash });\n  }\n\n  public batchCall(args: A): BatchCallArgumentsBody {\n    if (!this.methodName) {\n      throw new Error(`Batching not defined in method: ${this.path}`);\n    }\n\n    return {\n      method: this.methodName,\n      rawPayload: args,\n    };\n  }\n}\n\nclass Mutation<A, R> extends MutationAbstract<A, R> {}\n\nexport function createMutationByInstance<A, R>(\n  mutation: Mutation<A, R>,\n): IMutationEx<A, R> {\n  const submitWaitResult = (\n    args: A | UnsignedTxPayloadResponse | SubmitTxBody,\n    options?: MutationOptions,\n  ) => mutation.submitWaitResult(args, options);\n\n  submitWaitResult.build = mutation.build.bind(mutation);\n  submitWaitResult.buildBatch = mutation.buildBatch.bind(mutation);\n  submitWaitResult.getFee = mutation.getFee.bind(mutation);\n  submitWaitResult.sign = mutation.sign.bind(mutation);\n  submitWaitResult.submit = mutation.submit.bind(mutation);\n  submitWaitResult.submitWatch = mutation.submitWatch.bind(mutation);\n  submitWaitResult.submitWaitResult = mutation.submitWaitResult.bind(mutation);\n  submitWaitResult.batchCall = mutation.batchCall.bind(mutation);\n\n  return submitWaitResult as IMutationEx<A, R>;\n}\n\nexport const MethodNameNull = null;\n\nexport function createMutationEx<A, R>(\n  client: IBaseClient,\n  method: Method,\n  path: string,\n  methodName: MethodNameBody | null,\n): IMutationEx<A, R> {\n  const mutation = new Mutation<A, R>(client, method, path, methodName);\n\n  return createMutationByInstance(mutation);\n}\n","import { Section } from '../common';\nimport {\n  BalanceTransferBody,\n  BalanceTransferParsed,\n  AllBalancesResponse,\n  GetBalanceQuery,\n  Method,\n  IBalance,\n} from '../types';\nimport { createMutationEx } from '../common/mutation';\n\nexport class Balance extends Section implements IBalance {\n  readonly transfer = createMutationEx<\n    BalanceTransferBody,\n    BalanceTransferParsed\n  >(this.client, Method.POST, `${this.path}/transfer`, {\n    section: 'balances',\n    method: 'transferKeepAlive',\n  });\n\n  readonly get = (args: GetBalanceQuery): Promise<AllBalancesResponse> =>\n    this.query('', args);\n}\n","import { Section } from '../common';\nimport {\n  PropertyPermissionsResponse,\n  SetPropertyPermissionsParsed,\n  SetCollectionPropertiesParsed,\n  DeleteCollectionPropertiesParsed,\n  CollectionPropertiesResponse,\n  SetCollectionPropertiesBody,\n  DeleteCollectionPropertiesBody,\n  SetPropertyPermissionsBody,\n  CollectionInfoWithSchemaResponse,\n  CreateCollectionBody,\n  CreateCollectionParsed,\n  SetCollectionLimitsBody,\n  SetCollectionLimitsParsed,\n  ICollection,\n  SetCollectionPermissionsBody,\n  SetCollectionPermissionsParsed,\n  TransferCollectionBody,\n  TransferCollectionParsed,\n  EffectiveCollectionLimitsResponse,\n  DestroyCollectionBody,\n  DestroyCollectionParsed,\n  SetTransfersEnabledBody,\n  SetTransfersEnabledParsed,\n  NextSponsoredResponse,\n  LastTokenIdResultDto,\n  GetStatsResponse,\n  GetCollectionTokensResponse,\n  AddToAllowListBody,\n  AddToAllowListResponse,\n  RemoveFromAllowListBody,\n  RemoveFromAllowListResponse,\n  AdminlistResponse,\n  AddCollectionAdminBody,\n  AddCollectionAdminParsed,\n  RemoveCollectionAdminBody,\n  RemoveCollectionAdminParsed,\n  SetSponsorshipBody,\n  SetSponsorshipParsed,\n  ConfirmSponsorshipBody,\n  ConfirmSponsorshipParsed,\n  AllowedResponse,\n  RemoveSponsorshipBody,\n  RemoveSponsorshipParsed,\n  AllowListQuery,\n  CollectionIdQuery,\n  NextSponsoredQuery,\n  LastTokenIdQuery,\n  AllowedQuery,\n  TotalSupplyResponse,\n  PropertyPermissionsQuery,\n  AllowListBodyResult,\n  Method,\n  CollectionWithInfoV2Dto,\n  CreateCollectionV2ArgsDto,\n} from '../types';\nimport { createMutationEx } from '../common/mutation';\n\nexport class Collection extends Section implements ICollection {\n  readonly setProperties = createMutationEx<\n    SetCollectionPropertiesBody,\n    SetCollectionPropertiesParsed\n  >(this.client, Method.POST, `${this.path}/properties`, {\n    section: 'unique',\n    method: 'setCollectionProperties',\n  });\n\n  readonly deleteProperties = createMutationEx<\n    DeleteCollectionPropertiesBody,\n    DeleteCollectionPropertiesParsed\n  >(this.client, Method.DELETE, `${this.path}/properties`, {\n    section: 'unique',\n    method: 'deleteCollectionProperties',\n  });\n\n  readonly setPropertyPermissions = createMutationEx<\n    SetPropertyPermissionsBody,\n    SetPropertyPermissionsParsed\n  >(this.client, Method.POST, `${this.path}/property-permissions`, {\n    section: 'unique',\n    method: 'setTokenPropertyPermissions',\n  });\n\n  readonly properties = (\n    args: CollectionIdQuery,\n  ): Promise<CollectionPropertiesResponse> => this.query('properties', args);\n\n  readonly tokens = (\n    args: CollectionIdQuery,\n  ): Promise<GetCollectionTokensResponse> => this.query('tokens', args);\n\n  readonly propertyPermissions = (\n    args: PropertyPermissionsQuery,\n  ): Promise<PropertyPermissionsResponse> =>\n    this.query('property-permissions', args);\n\n  /**\n   * @deprecated Use create method\n   */\n  readonly creation = createMutationEx<\n    CreateCollectionBody,\n    CreateCollectionParsed\n  >(this.client, Method.POST, this.path, {\n    section: 'unique',\n    method: 'createCollectionEx',\n  });\n\n  readonly create = createMutationEx<\n    CreateCollectionBody,\n    CreateCollectionParsed\n  >(this.client, Method.POST, this.path, {\n    section: 'unique',\n    method: 'createCollectionEx',\n  });\n\n  readonly createV2 = createMutationEx<\n    CreateCollectionV2ArgsDto,\n    CreateCollectionParsed\n  >(this.client, Method.POST, `${this.path}/v2`, {\n    section: 'unique',\n    method: 'createCollectionEx',\n  });\n\n  readonly getLimits = (\n    args: CollectionIdQuery,\n  ): Promise<EffectiveCollectionLimitsResponse> => this.query('limits', args);\n\n  readonly setLimits = createMutationEx<\n    SetCollectionLimitsBody,\n    SetCollectionLimitsParsed\n  >(this.client, Method.POST, `${this.path}/set-limits`, {\n    section: 'unique',\n    method: 'setCollectionLimits',\n  });\n\n  readonly get = (\n    args: CollectionIdQuery,\n  ): Promise<CollectionInfoWithSchemaResponse> => this.query('', args);\n\n  readonly getV2 = (\n    args: CollectionIdQuery,\n  ): Promise<CollectionWithInfoV2Dto> => this.query('v2', args);\n\n  readonly transfer = createMutationEx<\n    TransferCollectionBody,\n    TransferCollectionParsed\n  >(this.client, Method.PATCH, `${this.path}/transfer`, {\n    section: 'unique',\n    method: 'changeCollectionOwner',\n  });\n\n  readonly destroy = createMutationEx<\n    DestroyCollectionBody,\n    DestroyCollectionParsed\n  >(this.client, Method.DELETE, this.path, {\n    section: 'unique',\n    method: 'destroyCollection',\n  });\n\n  readonly stats = (): Promise<GetStatsResponse> => this.query('stats');\n\n  readonly setTransfersEnabled = createMutationEx<\n    SetTransfersEnabledBody,\n    SetTransfersEnabledParsed\n  >(this.client, Method.POST, `${this.path}/transfers-enabled`, {\n    section: 'unique',\n    method: 'setTransfersEnabledFlag',\n  });\n\n  readonly setPermissions = createMutationEx<\n    SetCollectionPermissionsBody,\n    SetCollectionPermissionsParsed\n  >(this.client, Method.POST, `${this.path}/permissions`, {\n    section: 'unique',\n    method: 'setCollectionPermissions',\n  });\n\n  readonly nextSponsored = (\n    args: NextSponsoredQuery,\n  ): Promise<NextSponsoredResponse> => this.query('next-sponsored', args);\n\n  readonly lastTokenId = (\n    args: LastTokenIdQuery,\n  ): Promise<LastTokenIdResultDto> => this.query('last-token-id', args);\n\n  readonly allowList = (args: AllowListQuery): Promise<AllowListBodyResult> =>\n    this.query('allow-list', args);\n\n  readonly allowed = (args: AllowedQuery): Promise<AllowedResponse> =>\n    this.query('allowed', args);\n\n  readonly addToAllowList = createMutationEx<\n    AddToAllowListBody,\n    AddToAllowListResponse\n  >(this.client, Method.POST, `${this.path}/add-to-allow-list`, {\n    section: 'unique',\n    method: 'addToAllowList',\n  });\n\n  readonly removeFromAllowList = createMutationEx<\n    RemoveFromAllowListBody,\n    RemoveFromAllowListResponse\n  >(this.client, Method.POST, `${this.path}/remove-from-allow-list`, {\n    section: 'unique',\n    method: 'removeFromAllowList',\n  });\n\n  readonly admins = (args: CollectionIdQuery): Promise<AdminlistResponse> =>\n    this.query('admins', args);\n\n  readonly addAdmin = createMutationEx<\n    AddCollectionAdminBody,\n    AddCollectionAdminParsed\n  >(this.client, Method.POST, `${this.path}/admins`, {\n    section: 'unique',\n    method: 'addCollectionAdmin',\n  });\n\n  readonly removeAdmin = createMutationEx<\n    RemoveCollectionAdminBody,\n    RemoveCollectionAdminParsed\n  >(this.client, Method.DELETE, `${this.path}/admins`, {\n    section: 'unique',\n    method: 'removeCollectionAdmin',\n  });\n\n  readonly setSponsorship = createMutationEx<\n    SetSponsorshipBody,\n    SetSponsorshipParsed\n  >(this.client, Method.POST, `${this.path}/sponsorship`, {\n    section: 'unique',\n    method: 'setCollectionSponsor',\n  });\n\n  readonly confirmSponsorship = createMutationEx<\n    ConfirmSponsorshipBody,\n    ConfirmSponsorshipParsed\n  >(this.client, Method.POST, `${this.path}/sponsorship/confirm`, {\n    section: 'unique',\n    method: 'confirmSponsorship',\n  });\n\n  readonly removeSponsorship = createMutationEx<\n    RemoveSponsorshipBody,\n    RemoveSponsorshipParsed\n  >(this.client, Method.DELETE, `${this.path}/sponsorship`, {\n    section: 'unique',\n    method: 'removeCollectionSponsor',\n  });\n\n  readonly totalSupply = (\n    args: CollectionIdQuery,\n  ): Promise<TotalSupplyResponse> => this.query('total-supply', args);\n}\n","import { Section } from '../common';\nimport {\n  CreateCollectionParsed,\n  CreateERC721CollectionBody,\n  CreateERC721TokenBody,\n  IERC721,\n  Method,\n  TokenId,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class ERC721 extends Section implements IERC721 {\n  readonly createCollection = createMutationEx<\n    CreateERC721CollectionBody,\n    CreateCollectionParsed\n  >(this.client, Method.POST, `${this.path}/collection`, MethodNameNull);\n\n  readonly createToken = createMutationEx<CreateERC721TokenBody, TokenId>(\n    this.client,\n    Method.POST,\n    `${this.path}/token`,\n    MethodNameNull,\n  );\n}\n","import { Section } from '../common';\nimport {\n  BalanceTransferBody,\n  BalanceTransferParsed,\n  IFungible,\n  FungibleCollectionInfoDto,\n  CreateFungibleCollectionRequest,\n  CreateCollectionParsed,\n  BalanceResponse,\n  AddTokensResultDto,\n  TransferTokensArgsDto,\n  TransferTokensResultDto,\n  AddTokensArgsDto,\n  CollectionIdQuery,\n  GetFungibleBalanceArgsRequest,\n  Method,\n  ApproveFungibleTokensArgs,\n  AllowanceFungibleTokensArgumentsDto,\n  ApproveFungibleTokensParsed,\n  BurnFungibleBody,\n  BurnFungibleParsed,\n  GetTotalPiecesArgumentsDto,\n  GetTotalPiecesResultDto,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class Fungible extends Section implements IFungible {\n  readonly transfer = createMutationEx<\n    BalanceTransferBody,\n    BalanceTransferParsed\n  >(this.client, Method.POST, `${this.path}/transfer`, MethodNameNull);\n\n  readonly getCollection = (\n    args: CollectionIdQuery,\n  ): Promise<FungibleCollectionInfoDto> => this.query('collection', args);\n\n  readonly burn = createMutationEx<BurnFungibleBody, BurnFungibleParsed>(\n    this.client,\n    Method.DELETE,\n    this.path,\n    MethodNameNull,\n  );\n\n  readonly createCollection = createMutationEx<\n    CreateFungibleCollectionRequest,\n    CreateCollectionParsed\n  >(this.client, Method.POST, `${this.path}/collection`, MethodNameNull);\n\n  readonly getBalance = (\n    args: GetFungibleBalanceArgsRequest,\n  ): Promise<BalanceResponse> => this.query('balance', args);\n\n  readonly addTokens = createMutationEx<AddTokensArgsDto, AddTokensResultDto>(\n    this.client,\n    Method.POST,\n    `${this.path}/tokens`,\n    MethodNameNull,\n  );\n\n  readonly transferTokens = createMutationEx<\n    TransferTokensArgsDto,\n    TransferTokensResultDto\n  >(this.client, Method.POST, `${this.path}/tokens/transfer`, MethodNameNull);\n\n  readonly approveTokens = createMutationEx<\n    ApproveFungibleTokensArgs,\n    ApproveFungibleTokensParsed\n  >(this.client, Method.POST, `${this.path}/tokens/approve`, MethodNameNull);\n\n  readonly allowanceTokens = (\n    args: AllowanceFungibleTokensArgumentsDto,\n  ): Promise<BalanceResponse> => this.query('tokens/allowance', args);\n\n  readonly totalPieces = (\n    args: GetTotalPiecesArgumentsDto,\n  ): Promise<GetTotalPiecesResultDto> => this.query('total-pieces', args);\n}\n","import { Section } from '../common';\nimport {\n  CollectionIdQuery,\n  CollectionInfoWithSchemaResponse,\n  IRefungible,\n  Method,\n  TokenBalanceQuery,\n  TokenBalanceResponse,\n  CreateRefungibleCollectionRequest,\n  CreateRefungibleTokenRequest,\n  TransferRefungibleTokenRequest,\n  ApproveRefungibleTokenRequest,\n  AllowanceArgumentsQuery,\n  AllowanceRefungibleTokenResponse,\n  RepartitionTokenRequest,\n  TotalPiecesResponse,\n  TokenId,\n  CreateCollectionParsed,\n  CreatRefungibleTokenParsed,\n  TransferRefungibleTokenParsed,\n  ApproveRefungibleTokenParsed,\n  RepartitionTokenParsed,\n  AccountRefungibleTokenQuery,\n  AccountRefungibleTokensResponse,\n  BurnRefungibleBody,\n  BurnRefungibleParsed,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class Refungible extends Section implements IRefungible {\n  readonly getCollection = (\n    args: CollectionIdQuery,\n  ): Promise<CollectionInfoWithSchemaResponse> =>\n    this.query('collection', args);\n\n  readonly burn = createMutationEx<BurnRefungibleBody, BurnRefungibleParsed>(\n    this.client,\n    Method.DELETE,\n    this.path,\n    MethodNameNull,\n  );\n\n  readonly getBalance = (\n    args: TokenBalanceQuery,\n  ): Promise<TokenBalanceResponse> => this.query('tokens/balance', args);\n\n  readonly createCollection = createMutationEx<\n    CreateRefungibleCollectionRequest,\n    CreateCollectionParsed\n  >(this.client, Method.POST, `${this.path}/collection`, MethodNameNull);\n\n  readonly createToken = createMutationEx<\n    CreateRefungibleTokenRequest,\n    CreatRefungibleTokenParsed\n  >(this.client, Method.POST, `${this.path}/tokens`, MethodNameNull);\n\n  readonly transferToken = createMutationEx<\n    TransferRefungibleTokenRequest,\n    TransferRefungibleTokenParsed\n  >(this.client, Method.POST, `${this.path}/tokens/transfer`, MethodNameNull);\n\n  readonly approveToken = createMutationEx<\n    ApproveRefungibleTokenRequest,\n    ApproveRefungibleTokenParsed\n  >(this.client, Method.POST, `${this.path}/tokens/approve`, MethodNameNull);\n\n  readonly allowanceToken = (\n    args: AllowanceArgumentsQuery,\n  ): Promise<AllowanceRefungibleTokenResponse> =>\n    this.query('tokens/allowance', args);\n\n  readonly repartitionToken = createMutationEx<\n    RepartitionTokenRequest,\n    RepartitionTokenParsed\n  >(\n    this.client,\n    Method.POST,\n    `${this.path}/tokens/repartition`,\n    MethodNameNull,\n  );\n\n  readonly totalPieces = (args: TokenId): Promise<TotalPiecesResponse> =>\n    this.query('tokens/total-pieces', args);\n\n  readonly accountTokens = (\n    args: AccountRefungibleTokenQuery,\n  ): Promise<AccountRefungibleTokensResponse> =>\n    this.query('tokens/account-tokens', args);\n}\n","import FormData from 'form-data';\nimport { Section } from '../common';\nimport {\n  IIpfs,\n  IpfsAddMultipleRequest,\n  IpfsUploadMultipleRequest,\n  IpfsUploadRequest,\n  IpfsUploadResponse,\n  Method,\n  FileLike,\n} from '../types';\n\nconst isFileLike = (input: FileLike | File): input is FileLike =>\n  Object.hasOwnProperty.call(input, 'content');\n\nexport class Ipfs extends Section implements IIpfs {\n  private headers = { 'Content-Type': `multipart/form-data` };\n\n  async uploadFile({ file }: IpfsUploadRequest): Promise<IpfsUploadResponse> {\n    const data = new FormData();\n    data.append('file', file, 'file');\n\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-file`,\n      data,\n      headers: this.headers,\n    });\n\n    return response.data;\n  }\n\n  async uploadFiles({\n    files,\n  }: IpfsUploadMultipleRequest): Promise<IpfsUploadResponse> {\n    const data = Ipfs.filesToFormData(files);\n\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-files`,\n      data,\n      headers: this.headers,\n    });\n\n    return response.data;\n  }\n\n  async addFiles({\n    cid,\n    files,\n  }: IpfsAddMultipleRequest): Promise<IpfsUploadResponse> {\n    const data = Ipfs.filesToFormData(files);\n    data.append('cid', cid);\n\n    const response = await this.client.instance({\n      method: Method.PATCH,\n      url: `${this.baseUrl}/add-files`,\n      data,\n      headers: this.headers,\n    });\n\n    return response.data;\n  }\n\n  async uploadZip({ file }: IpfsUploadRequest): Promise<IpfsUploadResponse> {\n    const form = new FormData();\n    form.append('file', file, 'file');\n\n    const response = await this.client.instance({\n      method: Method.POST,\n      url: `${this.baseUrl}/upload-zip`,\n      data: form,\n      headers: {\n        'Content-Type': `multipart/form-data`,\n      },\n    });\n\n    return response.data;\n  }\n\n  private static filesToFormData(files: Array<FileLike | File>): FormData {\n    const formData = new FormData();\n\n    files.forEach((file) => {\n      formData.append(\n        'files',\n        isFileLike(file) ? file.content : file,\n        file.name,\n      );\n    });\n\n    return formData;\n  }\n}\n","import { Section } from '../common';\nimport {\n  TokenChildrenResponse,\n  AccountTokensResponse,\n  TokenPropertiesResponse,\n  SetTokenPropertiesParsed,\n  DeleteTokenPropertiesParsed,\n  TransferTokenBody,\n  TransferTokenParsed,\n  TokenOwnerResponse,\n  IToken,\n  CreateTokenBody,\n  CreateMultipleTokensBody,\n  TokenId,\n  TokenIdQuery,\n  TokenByIdResponse,\n  TokenParentResponse,\n  TopmostTokenOwnerResponse,\n  NestTokenBody,\n  UnnestTokenBody,\n  SetTokenPropertiesBody,\n  DeleteTokenPropertiesBody,\n  BurnTokenBody,\n  BurnTokenParsed,\n  TokenExistsResponse,\n  ApproveTokenBody,\n  ApproveTokenParsed,\n  AllowanceResultResponse,\n  AccountTokensQuery,\n  AllowanceArgumentsQuery,\n  IsBundleResponse,\n  GetBundleResponse,\n  Method,\n  TokenBalanceQuery,\n  TokenBalanceResponse,\n  TokenWithInfoV2Dto,\n  CreateTokenV2ArgsDto,\n  CreateMultipleTokensV2ArgumentsDto,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class Token extends Section implements IToken {\n  readonly setProperties = createMutationEx<\n    SetTokenPropertiesBody,\n    SetTokenPropertiesParsed\n  >(this.client, Method.POST, `${this.path}/properties`, {\n    section: 'unique',\n    method: 'setTokenProperties',\n  });\n\n  readonly deleteProperties = createMutationEx<\n    DeleteTokenPropertiesBody,\n    DeleteTokenPropertiesParsed\n  >(this.client, Method.DELETE, `${this.path}/properties`, {\n    section: 'unique',\n    method: 'deleteTokenProperties',\n  });\n\n  readonly properties = (\n    args: TokenIdQuery,\n  ): Promise<TokenPropertiesResponse> => this.query('properties', args);\n\n  readonly create = createMutationEx<CreateTokenBody, TokenId>(\n    this.client,\n    Method.POST,\n    this.path,\n    {\n      section: 'unique',\n      method: 'createItem',\n    },\n  );\n\n  readonly createV2 = createMutationEx<CreateTokenV2ArgsDto, TokenId>(\n    this.client,\n    Method.POST,\n    `${this.path}/v2`,\n    {\n      section: 'unique',\n      method: 'createItem',\n    },\n  );\n\n  readonly createMultiple = createMutationEx<\n    CreateMultipleTokensBody,\n    TokenId[]\n  >(this.client, Method.POST, `${this.path}/create-multiple`, {\n    section: 'unique',\n    method: 'createMultipleItemsEx',\n  });\n\n  readonly createMultipleV2 = createMutationEx<\n    CreateMultipleTokensV2ArgumentsDto,\n    TokenId[]\n  >(this.client, Method.POST, `${this.path}/create-multiple-v2`, {\n    section: 'unique',\n    method: 'createMultipleItemsEx',\n  });\n\n  readonly accountTokens = (\n    args: AccountTokensQuery,\n  ): Promise<AccountTokensResponse> => this.query('account-tokens', args);\n\n  readonly get = (args: TokenIdQuery): Promise<TokenByIdResponse> =>\n    this.query('', args);\n\n  readonly getV2 = (args: TokenIdQuery): Promise<TokenWithInfoV2Dto> =>\n    this.query('v2', args);\n\n  readonly exists = (args: TokenIdQuery): Promise<TokenExistsResponse> =>\n    this.query('exists', args);\n\n  readonly children = (args: TokenIdQuery): Promise<TokenChildrenResponse> =>\n    this.query('children', args);\n\n  readonly parent = (args: TokenIdQuery): Promise<TokenParentResponse> =>\n    this.query('parent', args);\n\n  readonly owner = (args: TokenIdQuery): Promise<TokenOwnerResponse> =>\n    this.query('owner', args);\n\n  readonly topmostOwner = (\n    args: TokenIdQuery,\n  ): Promise<TopmostTokenOwnerResponse> => this.query('topmost-owner', args);\n\n  readonly nest = createMutationEx<NestTokenBody, TokenId>(\n    this.client,\n    Method.POST,\n    `${this.path}/nest`,\n    MethodNameNull,\n  );\n\n  readonly unnest = createMutationEx<UnnestTokenBody, TokenId>(\n    this.client,\n    Method.POST,\n    `${this.path}/unnest`,\n    MethodNameNull,\n  );\n\n  readonly burn = createMutationEx<BurnTokenBody, BurnTokenParsed>(\n    this.client,\n    Method.DELETE,\n    this.path,\n    {\n      section: 'unique',\n      method: 'burnFrom',\n    },\n  );\n\n  readonly transfer = createMutationEx<TransferTokenBody, TransferTokenParsed>(\n    this.client,\n    Method.PATCH,\n    `${this.path}/transfer`,\n    {\n      section: 'unique',\n      method: 'transferFrom',\n    },\n  );\n\n  readonly approve = createMutationEx<ApproveTokenBody, ApproveTokenParsed>(\n    this.client,\n    Method.POST,\n    `${this.path}/approve`,\n    {\n      section: 'unique',\n      method: 'approve',\n    },\n  );\n\n  readonly allowance = (\n    args: AllowanceArgumentsQuery,\n  ): Promise<AllowanceResultResponse> => this.query('allowance', args);\n\n  readonly isBundle = (args: TokenIdQuery): Promise<IsBundleResponse> =>\n    this.query('is-bundle', args);\n\n  readonly getBundle = (args: TokenIdQuery): Promise<GetBundleResponse> =>\n    this.query('get-bundle', args);\n\n  readonly balance = (args: TokenBalanceQuery): Promise<TokenBalanceResponse> =>\n    this.query('balance', args);\n}\n","import { Section } from '../common';\nimport {\n  BatchingArgumentsBody,\n  BatchingResultParsed,\n  ChainPropertiesResponse,\n  GetNonceQuery,\n  GetNonceResponse,\n  ICommon,\n  Method,\n} from '../types';\nimport { createMutationEx, MethodNameNull } from '../common/mutation';\n\nexport class Common extends Section implements ICommon {\n  readonly chainProperties = (): Promise<ChainPropertiesResponse> =>\n    this.query('chain-properties');\n\n  readonly getNonce = (args: GetNonceQuery): Promise<GetNonceResponse> =>\n    this.query('nonce', args);\n\n  readonly batch = createMutationEx<\n    BatchingArgumentsBody,\n    BatchingResultParsed\n  >(this.client, Method.POST, `${this.path}/batching`, MethodNameNull);\n}\n","import { Section } from '../common';\nimport {\n  ApiGetterParams,\n  ApiRequestParams,\n  ApiRequestBody,\n  Method,\n  IStateQueries,\n} from '../types';\n\nexport class StateQueries extends Section implements IStateQueries {\n  async get<T = any>(args: ApiGetterParams): Promise<T> {\n    const { endpoint, module, method } = args;\n    const url = `${endpoint}/${module}/${method}`;\n    const response = await this.client.instance({\n      method: Method.GET,\n      baseURL: this.baseUrl,\n      url,\n    });\n    return response.data;\n  }\n\n  async execute<T = any>(\n    params: ApiRequestParams,\n    body?: ApiRequestBody,\n  ): Promise<T> {\n    const { endpoint, module, method } = params;\n    const url = `${endpoint}/${module}/${method}`;\n    const response = await this.client.instance({\n      method: Method.POST,\n      baseURL: this.baseUrl,\n      url,\n      data: body || {},\n    });\n    return response.data;\n  }\n}\n","type ChainConfig = {\n  websocketUrl: string;\n  rpcUrl: string;\n  restUrl: string;\n  ss58Prefix: number;\n  currency: {\n    symbol: string;\n    decimals: number;\n  };\n  logo: {\n    color: `#${string}`;\n    ipfsCid: string;\n  };\n};\n\nexport enum Chains {\n  opal = 'opal',\n  sapphire = 'sapphire',\n  quartz = 'quartz',\n  unique = 'unique',\n}\n\nexport const CHAIN_CONFIG: Record<`${Chains}`, ChainConfig> = {\n  opal: {\n    websocketUrl: 'wss://ws-opal.unique.network',\n    rpcUrl: 'https://rpc-opal.unique.network',\n    restUrl: 'https://rest.unique.network/opal/v1',\n    ss58Prefix: 42,\n    currency: {\n      symbol: 'OPL',\n      decimals: 18,\n    },\n    logo: {\n      color: '#0CB6B8',\n      ipfsCid: 'QmYJDpmWyjDa3H6BxweFmQXk4fU8b1GU7M9EqYcaUNvXzc',\n    },\n  },\n  sapphire: {\n    websocketUrl: 'wss://ws-sapphire.unique.network',\n    ss58Prefix: 8883,\n    rpcUrl: 'https://rpc-sapphire.unique.network',\n    restUrl: 'https://rest.unique.network/sapphire/v1',\n    currency: {\n      symbol: 'QTZ',\n      decimals: 18,\n    },\n    logo: {\n      color: '#5D59FF',\n      ipfsCid: 'Qmd1PGt4cDRjFbh4ihP5QKEd4XQVwN1MkebYKdF56V74pf',\n    },\n  },\n  quartz: {\n    websocketUrl: 'wss://ws-quartz.unique.network',\n    ss58Prefix: 255,\n    rpcUrl: 'https://rpc-quartz.unique.network',\n    restUrl: 'https://rest.unique.network/quartz/v1',\n    currency: {\n      symbol: 'QTZ',\n      decimals: 18,\n    },\n    logo: {\n      color: '#FF4D6A',\n      ipfsCid: 'QmaGPdccULQEFcCGxzstnmE8THfac2kSiGwvWRAiaRq4dp',\n    },\n  },\n  unique: {\n    websocketUrl: 'wss://ws.unique.network',\n    ss58Prefix: 7391,\n    rpcUrl: 'https://rpc.unique.network',\n    restUrl: 'https://rest.unique.network/unique/v1',\n    currency: {\n      symbol: 'UNQ',\n      decimals: 18,\n    },\n    logo: {\n      color: '#00BFFF',\n      ipfsCid: 'QmbJ7CGZ2GxWMp7s6jy71UGzRsMe4w3KANKXDAExYWdaFR',\n    },\n  },\n};\n","import { BaseClient } from './common/base-client';\nimport {\n  IBalance,\n  ICollection,\n  ICommon,\n  IERC721,\n  IFungible,\n  IIpfs,\n  IRefungible,\n  IStateQueries,\n  IToken,\n  Options,\n} from './types';\nimport {\n  Balance,\n  Collection,\n  ERC721,\n  Fungible,\n  Ipfs,\n  Refungible,\n  Token,\n} from './sections';\nimport { Common } from './sections/common';\nimport { StateQueries } from './sections/state-queries';\nimport { CHAIN_CONFIG } from './common/constants';\n\nexport class ThinClient extends BaseClient {\n  public readonly common: ICommon;\n\n  public readonly balance: IBalance;\n\n  public readonly fungible: IFungible;\n\n  public readonly refungible: IRefungible;\n\n  public readonly collection: ICollection;\n\n  public readonly token: IToken;\n\n  public readonly erc721: IERC721;\n\n  public readonly ipfs: IIpfs;\n\n  public readonly stateQuery: IStateQueries;\n\n  public readonly defaults: Options = {\n    baseUrl: '',\n  };\n\n  constructor(public readonly options: Options) {\n    super(options);\n\n    this.common = new Common(this, 'common');\n    this.balance = new Balance(this, 'balance');\n    this.fungible = new Fungible(this, 'fungible');\n    this.refungible = new Refungible(this, 'refungible');\n    this.collection = new Collection(this, 'collections');\n    this.token = new Token(this, 'tokens');\n    this.erc721 = new ERC721(this, 'erc721');\n    this.ipfs = new Ipfs(this, 'ipfs');\n    this.stateQuery = new StateQueries(this, 'query');\n  }\n}\n\nexport const Opal = (options?: Options): ThinClient =>\n  new ThinClient({ baseUrl: CHAIN_CONFIG.opal.restUrl, ...options });\n\nexport const Quartz = (options?: Options): ThinClient =>\n  new ThinClient({ baseUrl: CHAIN_CONFIG.quartz.restUrl, ...options });\n\nexport const Sapphire = (options?: Options): ThinClient =>\n  new ThinClient({ baseUrl: CHAIN_CONFIG.sapphire.restUrl, ...options });\n\nexport const Unique = (options?: Options): ThinClient =>\n  new ThinClient({ baseUrl: CHAIN_CONFIG.unique.restUrl, ...options });\n\nexport * from './common/constants';\n","import { ThinClient } from './thin-client';\n\nexport { ThinClient } from './thin-client';\n\nexport default ThinClient;\n\nexport * from './types';\n\nexport * from './common/constants';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
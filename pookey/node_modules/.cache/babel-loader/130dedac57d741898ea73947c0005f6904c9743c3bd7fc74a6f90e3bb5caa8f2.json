{"ast":null,"code":"import { catchError, first, map, mergeMap, of, switchMap, tap } from 'rxjs';\nimport { identity, isBn, isFunction, isNumber, isString, isU8a, objectSpread } from '@polkadot/util';\nimport { filterEvents, isKeyringPair } from '../util/index.js';\nimport { SubmittableResult } from './Result.js';\nfunction makeEraOptions(api, registry, partialOptions, {\n  header,\n  mortalLength,\n  nonce\n}) {\n  if (!header) {\n    if (partialOptions.era && !partialOptions.blockHash) {\n      throw new Error('Expected blockHash to be passed alongside non-immortal era options');\n    }\n    if (isNumber(partialOptions.era)) {\n      // since we have no header, it is immortal, remove any option overrides\n      // so we only supply the genesisHash and no era to the construction\n      delete partialOptions.era;\n      delete partialOptions.blockHash;\n    }\n    return makeSignOptions(api, partialOptions, {\n      nonce\n    });\n  }\n  return makeSignOptions(api, partialOptions, {\n    blockHash: header.hash,\n    era: registry.createTypeUnsafe('ExtrinsicEra', [{\n      current: header.number,\n      period: partialOptions.era || mortalLength\n    }]),\n    nonce\n  });\n}\nfunction makeSignAndSendOptions(partialOptions, statusCb) {\n  let options = {};\n  if (isFunction(partialOptions)) {\n    statusCb = partialOptions;\n  } else {\n    options = objectSpread({}, partialOptions);\n  }\n  return [options, statusCb];\n}\nfunction makeSignOptions(api, partialOptions, extras) {\n  return objectSpread({\n    blockHash: api.genesisHash,\n    genesisHash: api.genesisHash\n  }, partialOptions, extras, {\n    runtimeVersion: api.runtimeVersion,\n    signedExtensions: api.registry.signedExtensions,\n    version: api.extrinsicType\n  });\n}\nfunction optionsOrNonce(partialOptions = {}) {\n  return isBn(partialOptions) || isNumber(partialOptions) ? {\n    nonce: partialOptions\n  } : partialOptions;\n}\nexport function createClass({\n  api,\n  apiType,\n  blockHash,\n  decorateMethod\n}) {\n  // an instance of the base extrinsic for us to extend\n  const ExtrinsicBase = api.registry.createClass('Extrinsic');\n  class Submittable extends ExtrinsicBase {\n    __internal__ignoreStatusCb;\n    __internal__transformResult = identity;\n    constructor(registry, extrinsic) {\n      super(registry, extrinsic, {\n        version: api.extrinsicType\n      });\n      this.__internal__ignoreStatusCb = apiType === 'rxjs';\n    }\n    get hasDryRun() {\n      return isFunction(api.rpc.system?.dryRun);\n    }\n    get hasPaymentInfo() {\n      return isFunction(api.call.transactionPaymentApi?.queryInfo);\n    }\n    // dry run an extrinsic\n    dryRun(account, optionsOrHash) {\n      if (!this.hasDryRun) {\n        throw new Error('The system.dryRun RPC call is not available in your environment');\n      }\n      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n      return decorateMethod(() => this.__internal__observeSign(account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();\n    }\n    // calculate the payment info for this transaction (if signed and submitted)\n    paymentInfo(account, optionsOrHash) {\n      if (!this.hasPaymentInfo) {\n        throw new Error('The transactionPaymentApi.queryInfo runtime call is not available in your environment');\n      }\n      if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n        return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap(callAt => {\n          const u8a = this.toU8a();\n          return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);\n        })));\n      }\n      const [allOptions] = makeSignAndSendOptions(optionsOrHash);\n      const address = isKeyringPair(account) ? account.address : account.toString();\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n      return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap(signingInfo => {\n        // setup our options (same way as in signAndSend)\n        const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);\n        const signOptions = makeSignOptions(api, eraOptions, {});\n        // 1. Don't use the internal objects inside the new tx (hence toU8a)\n        // 2. Don't override the data from existing signed extrinsics\n        // 3. Ensure that this object stays intact, with no new sign after operation\n        const u8a = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();\n        return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);\n      })))();\n    }\n    // send implementation for both immediate Hash and statusCb variants\n    send(statusCb) {\n      const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n      return decorateMethod(isSubscription ? this.__internal__observeSubscribe : this.__internal__observeSend)(statusCb);\n    }\n    /**\n     * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.\n     */\n    signAsync(account, partialOptions) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n      return decorateMethod(() => this.__internal__observeSign(account, partialOptions).pipe(map(() => this)))();\n    }\n    // signAndSend implementation for all 3 cases above\n    signAndSend(account, partialOptions, optionalStatusCb) {\n      const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);\n      const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n      return decorateMethod(() => this.__internal__observeSign(account, options).pipe(switchMap(info => isSubscription ? this.__internal__observeSubscribe(info) : this.__internal__observeSend(info))) // FIXME This is wrong, SubmittableResult is _not_ a codec\n      )(statusCb);\n    }\n    // adds a transform to the result, applied before result is returned\n    withResultTransform(transform) {\n      this.__internal__transformResult = transform;\n      return this;\n    }\n    __internal__observeSign = (account, partialOptions) => {\n      const address = isKeyringPair(account) ? account.address : account.toString();\n      const options = optionsOrNonce(partialOptions);\n      return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async signingInfo => {\n        const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);\n        let updateId = -1;\n        let signedTx = null;\n        if (isKeyringPair(account)) {\n          this.sign(account, eraOptions);\n        } else {\n          const result = await this.__internal__signViaSigner(address, eraOptions, signingInfo.header);\n          updateId = result.id;\n          if (result.signedTransaction) {\n            signedTx = result.signedTransaction;\n          }\n        }\n        return {\n          options: eraOptions,\n          signedTransaction: signedTx,\n          updateId\n        };\n      }));\n    };\n    __internal__observeStatus = (txHash, status) => {\n      if (!status.isFinalized && !status.isInBlock) {\n        return of(this.__internal__transformResult(new SubmittableResult({\n          status,\n          txHash\n        })));\n      }\n      const blockHash = status.isInBlock ? status.asInBlock : status.asFinalized;\n      return api.derive.tx.events(blockHash).pipe(map(({\n        block,\n        events\n      }) => this.__internal__transformResult(new SubmittableResult({\n        ...filterEvents(txHash, block, events, status),\n        status,\n        txHash\n      }))), catchError(internalError => of(this.__internal__transformResult(new SubmittableResult({\n        internalError,\n        status,\n        txHash\n      })))));\n    };\n    __internal__observeSend = info => {\n      return api.rpc.author.submitExtrinsic(info?.signedTransaction || this).pipe(tap(hash => {\n        this.__internal__updateSigner(hash, info);\n      }));\n    };\n    __internal__observeSubscribe = info => {\n      const txHash = this.hash;\n      return api.rpc.author.submitAndWatchExtrinsic(info?.signedTransaction || this).pipe(switchMap(status => this.__internal__observeStatus(txHash, status)), tap(status => {\n        this.__internal__updateSigner(status, info);\n      }));\n    };\n    __internal__signViaSigner = async (address, options, header) => {\n      const signer = options.signer || api.signer;\n      if (!signer) {\n        throw new Error('No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');\n      }\n      const payload = this.registry.createTypeUnsafe('SignerPayload', [objectSpread({}, options, {\n        address,\n        blockNumber: header ? header.number : 0,\n        method: this.method\n      })]);\n      let result;\n      if (isFunction(signer.signPayload)) {\n        result = await signer.signPayload(payload.toPayload());\n        if (result.signedTransaction && !options.withSignedTransaction) {\n          throw new Error('The `signedTransaction` field may not be submitted when `withSignedTransaction` is disabled');\n        }\n        if (result.signedTransaction && options.withSignedTransaction) {\n          const ext = this.registry.createTypeUnsafe('Extrinsic', [result.signedTransaction]);\n          const newSignerPayload = this.registry.createTypeUnsafe('SignerPayload', [objectSpread({}, {\n            address,\n            assetId: ext.assetId ? ext.assetId.toHex() : null,\n            blockHash: payload.blockHash,\n            blockNumber: header ? header.number : 0,\n            era: ext.era.toHex(),\n            genesisHash: payload.genesisHash,\n            metadataHash: ext.metadataHash ? ext.metadataHash.toHex() : null,\n            method: ext.method.toHex(),\n            mode: ext.mode ? ext.mode.toHex() : null,\n            nonce: ext.nonce.toHex(),\n            runtimeVersion: payload.runtimeVersion,\n            signedExtensions: payload.signedExtensions,\n            tip: ext.tip.toHex(),\n            version: payload.version\n          })]);\n          if (!ext.isSigned) {\n            throw new Error(`When using the signedTransaction field, the transaction must be signed. Recieved isSigned: ${ext.isSigned}`);\n          }\n          this.__internal__validateSignedTransaction(payload, ext);\n          // This is only used for signAsync - signAndSend does not need to adjust the super payload or\n          // add the signature.\n          super.addSignature(address, result.signature, newSignerPayload.toPayload());\n          return {\n            id: result.id,\n            signedTransaction: result.signedTransaction\n          };\n        }\n      } else if (isFunction(signer.signRaw)) {\n        result = await signer.signRaw(payload.toRaw());\n      } else {\n        throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');\n      }\n      // Here we explicitly call `toPayload()` again instead of working with an object\n      // (reference) as passed to the signer. This means that we are sure that the\n      // payload data is not modified from our inputs, but the signer\n      super.addSignature(address, result.signature, payload.toPayload());\n      return {\n        id: result.id\n      };\n    };\n    __internal__updateSigner = (status, info) => {\n      if (info && info.updateId !== -1) {\n        const {\n          options,\n          updateId\n        } = info;\n        const signer = options.signer || api.signer;\n        if (signer && isFunction(signer.update)) {\n          signer.update(updateId, status);\n        }\n      }\n    };\n    /**\n     * When a signer includes `signedTransaction` within the SignerResult this will validate\n     * specific fields within the signed extrinsic against the original payload that was passed\n     * to the signer.\n     */\n    __internal__validateSignedTransaction = (signerPayload, signedExt) => {\n      const payload = signerPayload.toPayload();\n      const errMsg = field => `signAndSend: ${field} does not match the original payload`;\n      if (payload.method !== signedExt.method.toHex()) {\n        throw new Error(errMsg('call data'));\n      }\n    };\n  }\n  return Submittable;\n}","map":{"version":3,"names":["catchError","first","map","mergeMap","of","switchMap","tap","identity","isBn","isFunction","isNumber","isString","isU8a","objectSpread","filterEvents","isKeyringPair","SubmittableResult","makeEraOptions","api","registry","partialOptions","header","mortalLength","nonce","era","blockHash","Error","makeSignOptions","hash","createTypeUnsafe","current","number","period","makeSignAndSendOptions","statusCb","options","extras","genesisHash","runtimeVersion","signedExtensions","version","extrinsicType","optionsOrNonce","createClass","apiType","decorateMethod","ExtrinsicBase","Submittable","__internal__ignoreStatusCb","__internal__transformResult","constructor","extrinsic","hasDryRun","rpc","system","dryRun","hasPaymentInfo","call","transactionPaymentApi","queryInfo","account","optionsOrHash","toHex","__internal__observeSign","pipe","paymentInfo","callAt","u8a","toU8a","length","allOptions","address","toString","derive","tx","signingInfo","eraOptions","signOptions","signFake","send","isSubscription","hasSubscriptions","__internal__observeSubscribe","__internal__observeSend","signAsync","signAndSend","optionalStatusCb","info","withResultTransform","transform","updateId","signedTx","sign","result","__internal__signViaSigner","id","signedTransaction","__internal__observeStatus","txHash","status","isFinalized","isInBlock","asInBlock","asFinalized","events","block","internalError","author","submitExtrinsic","__internal__updateSigner","submitAndWatchExtrinsic","signer","payload","blockNumber","method","signPayload","toPayload","withSignedTransaction","ext","newSignerPayload","assetId","metadataHash","mode","tip","isSigned","__internal__validateSignedTransaction","addSignature","signature","signRaw","toRaw","update","signerPayload","signedExt","errMsg","field"],"sources":["C:/Users/khyy4/Documents/Code-Projects/polkahack/pookey/node_modules/@polkadot/api/submittable/createClass.js"],"sourcesContent":["import { catchError, first, map, mergeMap, of, switchMap, tap } from 'rxjs';\nimport { identity, isBn, isFunction, isNumber, isString, isU8a, objectSpread } from '@polkadot/util';\nimport { filterEvents, isKeyringPair } from '../util/index.js';\nimport { SubmittableResult } from './Result.js';\nfunction makeEraOptions(api, registry, partialOptions, { header, mortalLength, nonce }) {\n    if (!header) {\n        if (partialOptions.era && !partialOptions.blockHash) {\n            throw new Error('Expected blockHash to be passed alongside non-immortal era options');\n        }\n        if (isNumber(partialOptions.era)) {\n            // since we have no header, it is immortal, remove any option overrides\n            // so we only supply the genesisHash and no era to the construction\n            delete partialOptions.era;\n            delete partialOptions.blockHash;\n        }\n        return makeSignOptions(api, partialOptions, { nonce });\n    }\n    return makeSignOptions(api, partialOptions, {\n        blockHash: header.hash,\n        era: registry.createTypeUnsafe('ExtrinsicEra', [{\n                current: header.number,\n                period: partialOptions.era || mortalLength\n            }]),\n        nonce\n    });\n}\nfunction makeSignAndSendOptions(partialOptions, statusCb) {\n    let options = {};\n    if (isFunction(partialOptions)) {\n        statusCb = partialOptions;\n    }\n    else {\n        options = objectSpread({}, partialOptions);\n    }\n    return [options, statusCb];\n}\nfunction makeSignOptions(api, partialOptions, extras) {\n    return objectSpread({ blockHash: api.genesisHash, genesisHash: api.genesisHash }, partialOptions, extras, { runtimeVersion: api.runtimeVersion, signedExtensions: api.registry.signedExtensions, version: api.extrinsicType });\n}\nfunction optionsOrNonce(partialOptions = {}) {\n    return isBn(partialOptions) || isNumber(partialOptions)\n        ? { nonce: partialOptions }\n        : partialOptions;\n}\nexport function createClass({ api, apiType, blockHash, decorateMethod }) {\n    // an instance of the base extrinsic for us to extend\n    const ExtrinsicBase = api.registry.createClass('Extrinsic');\n    class Submittable extends ExtrinsicBase {\n        __internal__ignoreStatusCb;\n        __internal__transformResult = (identity);\n        constructor(registry, extrinsic) {\n            super(registry, extrinsic, { version: api.extrinsicType });\n            this.__internal__ignoreStatusCb = apiType === 'rxjs';\n        }\n        get hasDryRun() {\n            return isFunction(api.rpc.system?.dryRun);\n        }\n        get hasPaymentInfo() {\n            return isFunction(api.call.transactionPaymentApi?.queryInfo);\n        }\n        // dry run an extrinsic\n        dryRun(account, optionsOrHash) {\n            if (!this.hasDryRun) {\n                throw new Error('The system.dryRun RPC call is not available in your environment');\n            }\n            if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return decorateMethod(() => api.rpc.system.dryRun(this.toHex(), blockHash || optionsOrHash));\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n            return decorateMethod(() => this.__internal__observeSign(account, optionsOrHash).pipe(switchMap(() => api.rpc.system.dryRun(this.toHex()))))();\n        }\n        // calculate the payment info for this transaction (if signed and submitted)\n        paymentInfo(account, optionsOrHash) {\n            if (!this.hasPaymentInfo) {\n                throw new Error('The transactionPaymentApi.queryInfo runtime call is not available in your environment');\n            }\n            if (blockHash || isString(optionsOrHash) || isU8a(optionsOrHash)) {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n                return decorateMethod(() => api.callAt(blockHash || optionsOrHash).pipe(switchMap((callAt) => {\n                    const u8a = this.toU8a();\n                    return callAt.transactionPaymentApi.queryInfo(u8a, u8a.length);\n                })));\n            }\n            const [allOptions] = makeSignAndSendOptions(optionsOrHash);\n            const address = isKeyringPair(account) ? account.address : account.toString();\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n            return decorateMethod(() => api.derive.tx.signingInfo(address, allOptions.nonce, allOptions.era).pipe(first(), switchMap((signingInfo) => {\n                // setup our options (same way as in signAndSend)\n                const eraOptions = makeEraOptions(api, this.registry, allOptions, signingInfo);\n                const signOptions = makeSignOptions(api, eraOptions, {});\n                // 1. Don't use the internal objects inside the new tx (hence toU8a)\n                // 2. Don't override the data from existing signed extrinsics\n                // 3. Ensure that this object stays intact, with no new sign after operation\n                const u8a = api.tx(this.toU8a()).signFake(address, signOptions).toU8a();\n                return api.call.transactionPaymentApi.queryInfo(u8a, u8a.length);\n            })))();\n        }\n        // send implementation for both immediate Hash and statusCb variants\n        send(statusCb) {\n            const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n            return decorateMethod(isSubscription\n                ? this.__internal__observeSubscribe\n                : this.__internal__observeSend)(statusCb);\n        }\n        /**\n         * @description Signs a transaction, returning `this` to allow chaining. E.g.: `signAsync(...).send()`. Like `.signAndSend` this will retrieve the nonce and blockHash to send the tx with.\n         */\n        signAsync(account, partialOptions) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n            return decorateMethod(() => this.__internal__observeSign(account, partialOptions).pipe(map(() => this)))();\n        }\n        // signAndSend implementation for all 3 cases above\n        signAndSend(account, partialOptions, optionalStatusCb) {\n            const [options, statusCb] = makeSignAndSendOptions(partialOptions, optionalStatusCb);\n            const isSubscription = api.hasSubscriptions && (this.__internal__ignoreStatusCb || !!statusCb);\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return,@typescript-eslint/no-unsafe-call\n            return decorateMethod(() => this.__internal__observeSign(account, options).pipe(switchMap((info) => isSubscription\n                ? this.__internal__observeSubscribe(info)\n                : this.__internal__observeSend(info))) // FIXME This is wrong, SubmittableResult is _not_ a codec\n            )(statusCb);\n        }\n        // adds a transform to the result, applied before result is returned\n        withResultTransform(transform) {\n            this.__internal__transformResult = transform;\n            return this;\n        }\n        __internal__observeSign = (account, partialOptions) => {\n            const address = isKeyringPair(account) ? account.address : account.toString();\n            const options = optionsOrNonce(partialOptions);\n            return api.derive.tx.signingInfo(address, options.nonce, options.era).pipe(first(), mergeMap(async (signingInfo) => {\n                const eraOptions = makeEraOptions(api, this.registry, options, signingInfo);\n                let updateId = -1;\n                let signedTx = null;\n                if (isKeyringPair(account)) {\n                    this.sign(account, eraOptions);\n                }\n                else {\n                    const result = await this.__internal__signViaSigner(address, eraOptions, signingInfo.header);\n                    updateId = result.id;\n                    if (result.signedTransaction) {\n                        signedTx = result.signedTransaction;\n                    }\n                }\n                return { options: eraOptions, signedTransaction: signedTx, updateId };\n            }));\n        };\n        __internal__observeStatus = (txHash, status) => {\n            if (!status.isFinalized && !status.isInBlock) {\n                return of(this.__internal__transformResult(new SubmittableResult({\n                    status,\n                    txHash\n                })));\n            }\n            const blockHash = status.isInBlock\n                ? status.asInBlock\n                : status.asFinalized;\n            return api.derive.tx.events(blockHash).pipe(map(({ block, events }) => this.__internal__transformResult(new SubmittableResult({\n                ...filterEvents(txHash, block, events, status),\n                status,\n                txHash\n            }))), catchError((internalError) => of(this.__internal__transformResult(new SubmittableResult({\n                internalError,\n                status,\n                txHash\n            })))));\n        };\n        __internal__observeSend = (info) => {\n            return api.rpc.author.submitExtrinsic(info?.signedTransaction || this).pipe(tap((hash) => {\n                this.__internal__updateSigner(hash, info);\n            }));\n        };\n        __internal__observeSubscribe = (info) => {\n            const txHash = this.hash;\n            return api.rpc.author.submitAndWatchExtrinsic(info?.signedTransaction || this).pipe(switchMap((status) => this.__internal__observeStatus(txHash, status)), tap((status) => {\n                this.__internal__updateSigner(status, info);\n            }));\n        };\n        __internal__signViaSigner = async (address, options, header) => {\n            const signer = options.signer || api.signer;\n            if (!signer) {\n                throw new Error('No signer specified, either via api.setSigner or via sign options. You possibly need to pass through an explicit keypair for the origin so it can be used for signing.');\n            }\n            const payload = this.registry.createTypeUnsafe('SignerPayload', [objectSpread({}, options, {\n                    address,\n                    blockNumber: header ? header.number : 0,\n                    method: this.method\n                })]);\n            let result;\n            if (isFunction(signer.signPayload)) {\n                result = await signer.signPayload(payload.toPayload());\n                if (result.signedTransaction && !options.withSignedTransaction) {\n                    throw new Error('The `signedTransaction` field may not be submitted when `withSignedTransaction` is disabled');\n                }\n                if (result.signedTransaction && options.withSignedTransaction) {\n                    const ext = this.registry.createTypeUnsafe('Extrinsic', [result.signedTransaction]);\n                    const newSignerPayload = this.registry.createTypeUnsafe('SignerPayload', [objectSpread({}, {\n                            address,\n                            assetId: ext.assetId ? ext.assetId.toHex() : null,\n                            blockHash: payload.blockHash,\n                            blockNumber: header ? header.number : 0,\n                            era: ext.era.toHex(),\n                            genesisHash: payload.genesisHash,\n                            metadataHash: ext.metadataHash ? ext.metadataHash.toHex() : null,\n                            method: ext.method.toHex(),\n                            mode: ext.mode ? ext.mode.toHex() : null,\n                            nonce: ext.nonce.toHex(),\n                            runtimeVersion: payload.runtimeVersion,\n                            signedExtensions: payload.signedExtensions,\n                            tip: ext.tip.toHex(),\n                            version: payload.version\n                        })]);\n                    if (!ext.isSigned) {\n                        throw new Error(`When using the signedTransaction field, the transaction must be signed. Recieved isSigned: ${ext.isSigned}`);\n                    }\n                    this.__internal__validateSignedTransaction(payload, ext);\n                    // This is only used for signAsync - signAndSend does not need to adjust the super payload or\n                    // add the signature.\n                    super.addSignature(address, result.signature, newSignerPayload.toPayload());\n                    return { id: result.id, signedTransaction: result.signedTransaction };\n                }\n            }\n            else if (isFunction(signer.signRaw)) {\n                result = await signer.signRaw(payload.toRaw());\n            }\n            else {\n                throw new Error('Invalid signer interface, it should implement either signPayload or signRaw (or both)');\n            }\n            // Here we explicitly call `toPayload()` again instead of working with an object\n            // (reference) as passed to the signer. This means that we are sure that the\n            // payload data is not modified from our inputs, but the signer\n            super.addSignature(address, result.signature, payload.toPayload());\n            return { id: result.id };\n        };\n        __internal__updateSigner = (status, info) => {\n            if (info && (info.updateId !== -1)) {\n                const { options, updateId } = info;\n                const signer = options.signer || api.signer;\n                if (signer && isFunction(signer.update)) {\n                    signer.update(updateId, status);\n                }\n            }\n        };\n        /**\n         * When a signer includes `signedTransaction` within the SignerResult this will validate\n         * specific fields within the signed extrinsic against the original payload that was passed\n         * to the signer.\n         */\n        __internal__validateSignedTransaction = (signerPayload, signedExt) => {\n            const payload = signerPayload.toPayload();\n            const errMsg = (field) => `signAndSend: ${field} does not match the original payload`;\n            if (payload.method !== signedExt.method.toHex()) {\n                throw new Error(errMsg('call data'));\n            }\n        };\n    }\n    return Submittable;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
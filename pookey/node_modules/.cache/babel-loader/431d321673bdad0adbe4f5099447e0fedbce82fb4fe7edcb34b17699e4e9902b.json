{"ast":null,"code":"import { Account, getAddressFromSubstrate, Provider } from '@unique-nft/accounts/types';\nimport { web3Enable, isWeb3Injected, web3AccountsSubscribe, web3Accounts, web3FromSource } from '@polkadot/extension-dapp';\nclass PolkadotAccount extends Account {\n  constructor(injectedAccount, injector) {\n    super(injectedAccount, injectedAccount.address);\n    this.injectedAccount = injectedAccount;\n    this.injector = injector;\n  }\n  formatAddress(prefix) {\n    return getAddressFromSubstrate(this.injectedAccount.address, prefix);\n  }\n  async sign(unsignedTxPayload) {\n    var _a, _b;\n    const signPayload = (_b = (_a = this.injector) == null ? void 0 : _a.signer) == null ? void 0 : _b.signPayload;\n    if (!signPayload) {\n      throw new Error(\"Failed to sign message; signPayload() method is missing\");\n    }\n    const {\n      signature\n    } = await signPayload(unsignedTxPayload.signerPayloadJSON);\n    return {\n      signature,\n      signatureType: this.injectedAccount.type\n    };\n  }\n}\nasync function createAccount(injectedAccount) {\n  const injector = await web3FromSource(injectedAccount.meta.source);\n  return new PolkadotAccount(injectedAccount, injector);\n}\nclass PolkadotProvider extends Provider {\n  constructor(options = {}) {\n    super();\n    this.options = options;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  async init() {\n    const extensions = await web3Enable(\"@unique-nft/accounts\");\n    if (!extensions.length) {\n      return Promise.resolve();\n    }\n    if (!isWeb3Injected) {\n      return Promise.resolve();\n    }\n    await web3AccountsSubscribe(async injectedAccounts => {\n      const accounts = await Promise.all(injectedAccounts.map(createAccount));\n      this.emit(\"accountsChanged\", accounts);\n    });\n    return Promise.resolve();\n  }\n  async getAccounts() {\n    const injectedAccounts = await web3Accounts(this.options);\n    return Promise.all(injectedAccounts.map(createAccount));\n  }\n  // eslint-disable-next-line class-methods-use-this\n  forgetAccount(account) {\n    throw new Error(\"Can't forget an account from polkadot provider\");\n  }\n}\nexport { PolkadotAccount, PolkadotProvider };","map":{"version":3,"names":["Account","getAddressFromSubstrate","Provider","web3Enable","isWeb3Injected","web3AccountsSubscribe","web3Accounts","web3FromSource","PolkadotAccount","constructor","injectedAccount","injector","address","formatAddress","prefix","sign","unsignedTxPayload","_a","_b","signPayload","signer","Error","signature","signerPayloadJSON","signatureType","type","createAccount","meta","source","PolkadotProvider","options","init","extensions","length","Promise","resolve","injectedAccounts","accounts","all","map","emit","getAccounts","forgetAccount","account"],"sources":["C:/Users/khyy4/Documents/Code-Projects/polkahack/pookey/node_modules/@unique-nft/accounts/polkadot/index.js"],"sourcesContent":["import { Account, getAddressFromSubstrate, Provider } from '@unique-nft/accounts/types';\nimport { web3Enable, isWeb3Injected, web3AccountsSubscribe, web3Accounts, web3FromSource } from '@polkadot/extension-dapp';\n\nclass PolkadotAccount extends Account {\n  constructor(injectedAccount, injector) {\n    super(injectedAccount, injectedAccount.address);\n    this.injectedAccount = injectedAccount;\n    this.injector = injector;\n  }\n  formatAddress(prefix) {\n    return getAddressFromSubstrate(this.injectedAccount.address, prefix);\n  }\n  async sign(unsignedTxPayload) {\n    var _a, _b;\n    const signPayload = (_b = (_a = this.injector) == null ? void 0 : _a.signer) == null ? void 0 : _b.signPayload;\n    if (!signPayload) {\n      throw new Error(\n        \"Failed to sign message; signPayload() method is missing\"\n      );\n    }\n    const { signature } = await signPayload(\n      unsignedTxPayload.signerPayloadJSON\n    );\n    return {\n      signature,\n      signatureType: this.injectedAccount.type\n    };\n  }\n}\n\nasync function createAccount(injectedAccount) {\n  const injector = await web3FromSource(injectedAccount.meta.source);\n  return new PolkadotAccount(injectedAccount, injector);\n}\nclass PolkadotProvider extends Provider {\n  constructor(options = {}) {\n    super();\n    this.options = options;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  async init() {\n    const extensions = await web3Enable(\"@unique-nft/accounts\");\n    if (!extensions.length) {\n      return Promise.resolve();\n    }\n    if (!isWeb3Injected) {\n      return Promise.resolve();\n    }\n    await web3AccountsSubscribe(async (injectedAccounts) => {\n      const accounts = await Promise.all(injectedAccounts.map(createAccount));\n      this.emit(\"accountsChanged\", accounts);\n    });\n    return Promise.resolve();\n  }\n  async getAccounts() {\n    const injectedAccounts = await web3Accounts(this.options);\n    return Promise.all(injectedAccounts.map(createAccount));\n  }\n  // eslint-disable-next-line class-methods-use-this\n  forgetAccount(account) {\n    throw new Error(\"Can't forget an account from polkadot provider\");\n  }\n}\n\nexport { PolkadotAccount, PolkadotProvider };\n"],"mappings":"AAAA,SAASA,OAAO,EAAEC,uBAAuB,EAAEC,QAAQ,QAAQ,4BAA4B;AACvF,SAASC,UAAU,EAAEC,cAAc,EAAEC,qBAAqB,EAAEC,YAAY,EAAEC,cAAc,QAAQ,0BAA0B;AAE1H,MAAMC,eAAe,SAASR,OAAO,CAAC;EACpCS,WAAWA,CAACC,eAAe,EAAEC,QAAQ,EAAE;IACrC,KAAK,CAACD,eAAe,EAAEA,eAAe,CAACE,OAAO,CAAC;IAC/C,IAAI,CAACF,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;EAC1B;EACAE,aAAaA,CAACC,MAAM,EAAE;IACpB,OAAOb,uBAAuB,CAAC,IAAI,CAACS,eAAe,CAACE,OAAO,EAAEE,MAAM,CAAC;EACtE;EACA,MAAMC,IAAIA,CAACC,iBAAiB,EAAE;IAC5B,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAMC,WAAW,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAG,IAAI,CAACN,QAAQ,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGM,EAAE,CAACG,MAAM,KAAK,IAAI,GAAG,KAAK,CAAC,GAAGF,EAAE,CAACC,WAAW;IAC9G,IAAI,CAACA,WAAW,EAAE;MAChB,MAAM,IAAIE,KAAK,CACb,yDACF,CAAC;IACH;IACA,MAAM;MAAEC;IAAU,CAAC,GAAG,MAAMH,WAAW,CACrCH,iBAAiB,CAACO,iBACpB,CAAC;IACD,OAAO;MACLD,SAAS;MACTE,aAAa,EAAE,IAAI,CAACd,eAAe,CAACe;IACtC,CAAC;EACH;AACF;AAEA,eAAeC,aAAaA,CAAChB,eAAe,EAAE;EAC5C,MAAMC,QAAQ,GAAG,MAAMJ,cAAc,CAACG,eAAe,CAACiB,IAAI,CAACC,MAAM,CAAC;EAClE,OAAO,IAAIpB,eAAe,CAACE,eAAe,EAAEC,QAAQ,CAAC;AACvD;AACA,MAAMkB,gBAAgB,SAAS3B,QAAQ,CAAC;EACtCO,WAAWA,CAACqB,OAAO,GAAG,CAAC,CAAC,EAAE;IACxB,KAAK,CAAC,CAAC;IACP,IAAI,CAACA,OAAO,GAAGA,OAAO;EACxB;EACA;EACA,MAAMC,IAAIA,CAAA,EAAG;IACX,MAAMC,UAAU,GAAG,MAAM7B,UAAU,CAAC,sBAAsB,CAAC;IAC3D,IAAI,CAAC6B,UAAU,CAACC,MAAM,EAAE;MACtB,OAAOC,OAAO,CAACC,OAAO,CAAC,CAAC;IAC1B;IACA,IAAI,CAAC/B,cAAc,EAAE;MACnB,OAAO8B,OAAO,CAACC,OAAO,CAAC,CAAC;IAC1B;IACA,MAAM9B,qBAAqB,CAAC,MAAO+B,gBAAgB,IAAK;MACtD,MAAMC,QAAQ,GAAG,MAAMH,OAAO,CAACI,GAAG,CAACF,gBAAgB,CAACG,GAAG,CAACb,aAAa,CAAC,CAAC;MACvE,IAAI,CAACc,IAAI,CAAC,iBAAiB,EAAEH,QAAQ,CAAC;IACxC,CAAC,CAAC;IACF,OAAOH,OAAO,CAACC,OAAO,CAAC,CAAC;EAC1B;EACA,MAAMM,WAAWA,CAAA,EAAG;IAClB,MAAML,gBAAgB,GAAG,MAAM9B,YAAY,CAAC,IAAI,CAACwB,OAAO,CAAC;IACzD,OAAOI,OAAO,CAACI,GAAG,CAACF,gBAAgB,CAACG,GAAG,CAACb,aAAa,CAAC,CAAC;EACzD;EACA;EACAgB,aAAaA,CAACC,OAAO,EAAE;IACrB,MAAM,IAAItB,KAAK,CAAC,gDAAgD,CAAC;EACnE;AACF;AAEA,SAASb,eAAe,EAAEqB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
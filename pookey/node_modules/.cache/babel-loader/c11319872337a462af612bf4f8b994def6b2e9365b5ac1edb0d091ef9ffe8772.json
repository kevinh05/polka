{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Sr25519Account } from \"@unique-nft/sr25519\";\n// import {ThinClient} from \"@unique-nft/sdk\";\n// //import { Sdk } from '@unique-nft/sdk';\n\n// // import { Web3AccountsOptions } from '@polkadot/extension-inject/types';\n// // import { Account } from '@unique-nft/accounts';\n// // import { PolkadotProvider } from '@unique-nft/accounts/polkadot';\n\n// const Poookie = () => {\n//   const [mnemonic, setMnemonic] = useState('');\n//   const [firstNumber, setFirstNumber] = useState(0);\n//   const [secondNumber, setSecondNumber] = useState(0);\n//   const [userAnswer, setUserAnswer] = useState('');\n//   const [score, setScore] = useState(0);\n//   const [feedback, setFeedback] = useState('');\n//   const [sdk, setSdk] = useState(null);\n//   const [accountInfo, setAccountInfo] = useState(null);\n\n//   useEffect(() => {\n//     if (mnemonic) {\n//       const account = Sr25519Account.fromUri(mnemonic);\n//       const sdkInstance = new ThinClient({\n//         baseUrl: 'https://rest.unique.network/opal/v1', \n//         account,\n//       });\n//       setSdk(sdkInstance);\n\n//       const fetchAccountInfo = async () => {\n//         try {\n//           const address = account.address;\n//           const balance = await sdkInstance.balance.get({ address });\n//           setAccountInfo({ address, balance });\n//         } catch (error) {\n//           console.error('Failed to fetch account information:', error);\n//         }\n//       };\n\n//       fetchAccountInfo();\n//     }\n//   }, [mnemonic]);\n\n//   const generateNewQuestion = () => {\n//     const num1 = Math.floor(Math.random() * 10);\n//     const num2 = Math.floor(Math.random() * 10);\n//     setFirstNumber(num1);\n//     setSecondNumber(num2);\n//   };\n\n//   const handleMnemonicSubmit = (e) => {\n//     e.preventDefault();\n//     if (mnemonic) {\n//       generateNewQuestion();\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const correctAnswer = firstNumber + secondNumber;\n//     if (parseInt(userAnswer) === correctAnswer) {\n//       setScore(score + 1);\n//       setFeedback('Correct!');\n\n//       if ((score + 1) % 5 === 0) {\n//         try {\n//           const { parsed, error } = await sdk.collection.create.submitWaitResult({\n//             name: \"Test collection\",\n//             description: \"My test collection\",\n//             tokenPrefix: \"TST\",\n//           });\n\n//           if (error) throw new Error(\"Error occurred while creating a collection\");\n\n//           if (!parsed) throw new Error(\"Cannot parse results\");\n\n//           const { collectionId } = parsed;\n\n//           await sdk.token.create({ collectionId });\n\n//           await sdk.token.transfer({\n//             collectionId,\n//             tokenId: 1, \n//             to: accountInfo.address,\n//           });\n//           setFeedback('Correct! You earned an NFT!');\n//         } catch (error) {\n//           console.error('Failed to mint and transfer NFT:', error);\n//           setFeedback('Correct! But there was an error minting the NFT.');\n//         }\n//       }\n//     } else {\n//       setFeedback(`Incorrect! The correct answer was ${correctAnswer}`);\n//     }\n//     setUserAnswer('');\n//     generateNewQuestion();\n//   };\n\n//   return (\n//     <div className=\"flex flex-col items-center justify-center min-h-screen bg-red-50\">\n//       <div className=\"bg-red-100 shadow-lg rounded-lg p-8\">\n//         <h1 className=\"text-3xl font-bold text-red-700 mb-4\">PookieMath</h1>\n//         {!sdk ? (\n//           <form onSubmit={handleMnemonicSubmit} className=\"flex flex-col items-center\">\n//             <input\n//               type=\"text\"\n//               value={mnemonic}\n//               onChange={(e) => setMnemonic(e.target.value)}\n//               className=\"p-2 border border-red-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500\"\n//               placeholder=\"Enter your mnemonic key\"\n//             />\n//             <button\n//               type=\"submit\"\n//               className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\n//             >\n//               Input Mnemonic\n//             </button>\n//           </form>\n//         ) : (\n//           <>\n//             <div className=\"flex justify-between\">\n//               <div>\n//                 <div className=\"text-2xl mb-4\">\n//                   <span>{firstNumber}</span> + <span>{secondNumber}</span>\n//                 </div>\n//                 <form onSubmit={handleSubmit} className=\"flex flex-col items-center\">\n//                   <input\n//                     type=\"number\"\n//                     value={userAnswer}\n//                     onChange={(e) => setUserAnswer(e.target.value)}\n//                     className=\"p-2 border border-red-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500\"\n//                     placeholder=\"Your answer\"\n//                   />\n//                   <button\n//                     type=\"submit\"\n//                     className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\n//                   >\n//                     Submit\n//                   </button>\n//                 </form>\n//                 <div className=\"mt-4\">\n//                   <p className=\"text-xl\">{feedback}</p>\n//                   <p className=\"text-2xl\">Score: {score}</p>\n//                 </div>\n//               </div>\n//               {accountInfo && (\n//                 <div className=\"ml-8 p-4 border border-red-300 rounded bg-red-50\">\n//                   <h2 className=\"text-xl font-bold\">Account Information</h2>\n//                   <p><strong>Address:</strong> {accountInfo.address}</p>\n//                   <p><strong>Balance:</strong> {accountInfo.balance?.free} UQs</p>\n//                 </div>\n//               )}\n//             </div>\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Poookie;\n\n// import React, { useState, useEffect } from 'react';\n// import { Sr25519Account } from \"@unique-nft/sr25519\";\n// import { ThinClient } from \"@unique-nft/sdk\";\n\n// const Poookie = () => {\n//   const [mnemonic, setMnemonic] = useState('');\n//   const [firstNumber, setFirstNumber] = useState(0);\n//   const [secondNumber, setSecondNumber] = useState(0);\n//   const [userAnswer, setUserAnswer] = useState('');\n//   const [score, setScore] = useState(0);\n//   const [feedback, setFeedback] = useState('');\n//   const [sdk, setSdk] = useState(null);\n//   const [accountInfo, setAccountInfo] = useState(null);\n\n//   useEffect(() => {\n//     if (mnemonic) {\n//       const account = Sr25519Account.fromUri(mnemonic);\n//       const sdkInstance = new ThinClient({\n//         baseUrl: 'https://rest.unique.network/opal/v1', \n//         account,\n//       });\n//       setSdk(sdkInstance);\n\n//       const fetchAccountInfo = async () => {\n//         try {\n//           const address = account.address;\n//           const balance = await sdkInstance.balance.get({ address });\n//           setAccountInfo({ address, balance });\n//         } catch (error) {\n//           console.error('Failed to fetch account information:', error);\n//         }\n//       };\n\n//       fetchAccountInfo();\n//     }\n//   }, [mnemonic]);\n\n//   const generateNewQuestion = () => {\n//     const num1 = Math.floor(Math.random() * 10);\n//     const num2 = Math.floor(Math.random() * 10);\n//     setFirstNumber(num1);\n//     setSecondNumber(num2);\n//   };\n\n//   const handleMnemonicSubmit = (e) => {\n//     e.preventDefault();\n//     if (mnemonic) {\n//       generateNewQuestion();\n//     }\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     const correctAnswer = firstNumber + secondNumber;\n//     if (parseInt(userAnswer) === correctAnswer) {\n//       setScore(score + 1);\n//       setFeedback('Correct!');\n\n//       if ((score + 1) % 5 === 0) {\n//         // Simulate NFT minting\n//         setFeedback('Correct! You earned an NFT!');\n//       }\n//     } else {\n//       setFeedback(`Incorrect! The correct answer was ${correctAnswer}`);\n//     }\n//     setUserAnswer('');\n//     generateNewQuestion();\n//   };\n\n//   return (\n//     <div className=\"flex flex-col items-center justify-center min-h-screen bg-red-50\">\n//       <div className=\"bg-red-100 shadow-lg rounded-lg p-8\">\n//         <h1 className=\"text-3xl font-bold text-red-700 mb-4\">PookieMath</h1>\n//         {!sdk ? (\n//           <form onSubmit={handleMnemonicSubmit} className=\"flex flex-col items-center\">\n//             <input\n//               type=\"text\"\n//               value={mnemonic}\n//               onChange={(e) => setMnemonic(e.target.value)}\n//               className=\"p-2 border border-red-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500\"\n//               placeholder=\"Enter your mnemonic key\"\n//             />\n//             <button\n//               type=\"submit\"\n//               className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\n//             >\n//               Input Mnemonic\n//             </button>\n//           </form>\n//         ) : (\n//           <>\n//             <div className=\"flex justify-between\">\n//               <div>\n//                 <div className=\"text-2xl mb-4\">\n//                   <span>{firstNumber}</span> + <span>{secondNumber}</span>\n//                 </div>\n//                 <form onSubmit={handleSubmit} className=\"flex flex-col items-center\">\n//                   <input\n//                     type=\"number\"\n//                     value={userAnswer}\n//                     onChange={(e) => setUserAnswer(e.target.value)}\n//                     className=\"p-2 border border-red-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500\"\n//                     placeholder=\"Your answer\"\n//                   />\n//                   <button\n//                     type=\"submit\"\n//                     className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\n//                   >\n//                     Submit\n//                   </button>\n//                 </form>\n//                 <div className=\"mt-4\">\n//                   <p className=\"text-xl\">{feedback}</p>\n//                   <p className=\"text-2xl\">Score: {score}</p>\n//                 </div>\n//               </div>\n//               {accountInfo && (\n//                 <div className=\"ml-8 p-4 border border-red-300 rounded bg-red-50\">\n//                   <h2 className=\"text-xl font-bold\">Account Information</h2>\n//                   <p><strong>Address:</strong> {accountInfo.address}</p>\n//                   <p><strong>Balance:</strong> {accountInfo.balance?.free} UQs</p>\n//                 </div>\n//               )}\n//             </div>\n//           </>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Poookie;","map":{"version":3,"names":[],"sources":["C:/Users/khyy4/Documents/Code-Projects/polkahack/pookey/src/main.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import { Sr25519Account } from \"@unique-nft/sr25519\";\r\n// import {ThinClient} from \"@unique-nft/sdk\";\r\n// //import { Sdk } from '@unique-nft/sdk';\r\n\r\n// // import { Web3AccountsOptions } from '@polkadot/extension-inject/types';\r\n// // import { Account } from '@unique-nft/accounts';\r\n// // import { PolkadotProvider } from '@unique-nft/accounts/polkadot';\r\n\r\n// const Poookie = () => {\r\n//   const [mnemonic, setMnemonic] = useState('');\r\n//   const [firstNumber, setFirstNumber] = useState(0);\r\n//   const [secondNumber, setSecondNumber] = useState(0);\r\n//   const [userAnswer, setUserAnswer] = useState('');\r\n//   const [score, setScore] = useState(0);\r\n//   const [feedback, setFeedback] = useState('');\r\n//   const [sdk, setSdk] = useState(null);\r\n//   const [accountInfo, setAccountInfo] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     if (mnemonic) {\r\n//       const account = Sr25519Account.fromUri(mnemonic);\r\n//       const sdkInstance = new ThinClient({\r\n//         baseUrl: 'https://rest.unique.network/opal/v1', \r\n//         account,\r\n//       });\r\n//       setSdk(sdkInstance);\r\n\r\n//       const fetchAccountInfo = async () => {\r\n//         try {\r\n//           const address = account.address;\r\n//           const balance = await sdkInstance.balance.get({ address });\r\n//           setAccountInfo({ address, balance });\r\n//         } catch (error) {\r\n//           console.error('Failed to fetch account information:', error);\r\n//         }\r\n//       };\r\n\r\n//       fetchAccountInfo();\r\n//     }\r\n//   }, [mnemonic]);\r\n\r\n//   const generateNewQuestion = () => {\r\n//     const num1 = Math.floor(Math.random() * 10);\r\n//     const num2 = Math.floor(Math.random() * 10);\r\n//     setFirstNumber(num1);\r\n//     setSecondNumber(num2);\r\n//   };\r\n\r\n//   const handleMnemonicSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (mnemonic) {\r\n//       generateNewQuestion();\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const correctAnswer = firstNumber + secondNumber;\r\n//     if (parseInt(userAnswer) === correctAnswer) {\r\n//       setScore(score + 1);\r\n//       setFeedback('Correct!');\r\n      \r\n//       if ((score + 1) % 5 === 0) {\r\n//         try {\r\n//           const { parsed, error } = await sdk.collection.create.submitWaitResult({\r\n//             name: \"Test collection\",\r\n//             description: \"My test collection\",\r\n//             tokenPrefix: \"TST\",\r\n//           });\r\n\r\n//           if (error) throw new Error(\"Error occurred while creating a collection\");\r\n\r\n//           if (!parsed) throw new Error(\"Cannot parse results\");\r\n\r\n//           const { collectionId } = parsed;\r\n\r\n//           await sdk.token.create({ collectionId });\r\n\r\n//           await sdk.token.transfer({\r\n//             collectionId,\r\n//             tokenId: 1, \r\n//             to: accountInfo.address,\r\n//           });\r\n//           setFeedback('Correct! You earned an NFT!');\r\n//         } catch (error) {\r\n//           console.error('Failed to mint and transfer NFT:', error);\r\n//           setFeedback('Correct! But there was an error minting the NFT.');\r\n//         }\r\n//       }\r\n//     } else {\r\n//       setFeedback(`Incorrect! The correct answer was ${correctAnswer}`);\r\n//     }\r\n//     setUserAnswer('');\r\n//     generateNewQuestion();\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col items-center justify-center min-h-screen bg-red-50\">\r\n//       <div className=\"bg-red-100 shadow-lg rounded-lg p-8\">\r\n//         <h1 className=\"text-3xl font-bold text-red-700 mb-4\">PookieMath</h1>\r\n//         {!sdk ? (\r\n//           <form onSubmit={handleMnemonicSubmit} className=\"flex flex-col items-center\">\r\n//             <input\r\n//               type=\"text\"\r\n//               value={mnemonic}\r\n//               onChange={(e) => setMnemonic(e.target.value)}\r\n//               className=\"p-2 border border-red-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n//               placeholder=\"Enter your mnemonic key\"\r\n//             />\r\n//             <button\r\n//               type=\"submit\"\r\n//               className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\r\n//             >\r\n//               Input Mnemonic\r\n//             </button>\r\n//           </form>\r\n//         ) : (\r\n//           <>\r\n//             <div className=\"flex justify-between\">\r\n//               <div>\r\n//                 <div className=\"text-2xl mb-4\">\r\n//                   <span>{firstNumber}</span> + <span>{secondNumber}</span>\r\n//                 </div>\r\n//                 <form onSubmit={handleSubmit} className=\"flex flex-col items-center\">\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     value={userAnswer}\r\n//                     onChange={(e) => setUserAnswer(e.target.value)}\r\n//                     className=\"p-2 border border-red-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n//                     placeholder=\"Your answer\"\r\n//                   />\r\n//                   <button\r\n//                     type=\"submit\"\r\n//                     className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\r\n//                   >\r\n//                     Submit\r\n//                   </button>\r\n//                 </form>\r\n//                 <div className=\"mt-4\">\r\n//                   <p className=\"text-xl\">{feedback}</p>\r\n//                   <p className=\"text-2xl\">Score: {score}</p>\r\n//                 </div>\r\n//               </div>\r\n//               {accountInfo && (\r\n//                 <div className=\"ml-8 p-4 border border-red-300 rounded bg-red-50\">\r\n//                   <h2 className=\"text-xl font-bold\">Account Information</h2>\r\n//                   <p><strong>Address:</strong> {accountInfo.address}</p>\r\n//                   <p><strong>Balance:</strong> {accountInfo.balance?.free} UQs</p>\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Poookie;\r\n\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import { Sr25519Account } from \"@unique-nft/sr25519\";\r\n// import { ThinClient } from \"@unique-nft/sdk\";\r\n\r\n// const Poookie = () => {\r\n//   const [mnemonic, setMnemonic] = useState('');\r\n//   const [firstNumber, setFirstNumber] = useState(0);\r\n//   const [secondNumber, setSecondNumber] = useState(0);\r\n//   const [userAnswer, setUserAnswer] = useState('');\r\n//   const [score, setScore] = useState(0);\r\n//   const [feedback, setFeedback] = useState('');\r\n//   const [sdk, setSdk] = useState(null);\r\n//   const [accountInfo, setAccountInfo] = useState(null);\r\n\r\n//   useEffect(() => {\r\n//     if (mnemonic) {\r\n//       const account = Sr25519Account.fromUri(mnemonic);\r\n//       const sdkInstance = new ThinClient({\r\n//         baseUrl: 'https://rest.unique.network/opal/v1', \r\n//         account,\r\n//       });\r\n//       setSdk(sdkInstance);\r\n\r\n//       const fetchAccountInfo = async () => {\r\n//         try {\r\n//           const address = account.address;\r\n//           const balance = await sdkInstance.balance.get({ address });\r\n//           setAccountInfo({ address, balance });\r\n//         } catch (error) {\r\n//           console.error('Failed to fetch account information:', error);\r\n//         }\r\n//       };\r\n\r\n//       fetchAccountInfo();\r\n//     }\r\n//   }, [mnemonic]);\r\n\r\n//   const generateNewQuestion = () => {\r\n//     const num1 = Math.floor(Math.random() * 10);\r\n//     const num2 = Math.floor(Math.random() * 10);\r\n//     setFirstNumber(num1);\r\n//     setSecondNumber(num2);\r\n//   };\r\n\r\n//   const handleMnemonicSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (mnemonic) {\r\n//       generateNewQuestion();\r\n//     }\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     const correctAnswer = firstNumber + secondNumber;\r\n//     if (parseInt(userAnswer) === correctAnswer) {\r\n//       setScore(score + 1);\r\n//       setFeedback('Correct!');\r\n\r\n//       if ((score + 1) % 5 === 0) {\r\n//         // Simulate NFT minting\r\n//         setFeedback('Correct! You earned an NFT!');\r\n//       }\r\n//     } else {\r\n//       setFeedback(`Incorrect! The correct answer was ${correctAnswer}`);\r\n//     }\r\n//     setUserAnswer('');\r\n//     generateNewQuestion();\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"flex flex-col items-center justify-center min-h-screen bg-red-50\">\r\n//       <div className=\"bg-red-100 shadow-lg rounded-lg p-8\">\r\n//         <h1 className=\"text-3xl font-bold text-red-700 mb-4\">PookieMath</h1>\r\n//         {!sdk ? (\r\n//           <form onSubmit={handleMnemonicSubmit} className=\"flex flex-col items-center\">\r\n//             <input\r\n//               type=\"text\"\r\n//               value={mnemonic}\r\n//               onChange={(e) => setMnemonic(e.target.value)}\r\n//               className=\"p-2 border border-red-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n//               placeholder=\"Enter your mnemonic key\"\r\n//             />\r\n//             <button\r\n//               type=\"submit\"\r\n//               className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\r\n//             >\r\n//               Input Mnemonic\r\n//             </button>\r\n//           </form>\r\n//         ) : (\r\n//           <>\r\n//             <div className=\"flex justify-between\">\r\n//               <div>\r\n//                 <div className=\"text-2xl mb-4\">\r\n//                   <span>{firstNumber}</span> + <span>{secondNumber}</span>\r\n//                 </div>\r\n//                 <form onSubmit={handleSubmit} className=\"flex flex-col items-center\">\r\n//                   <input\r\n//                     type=\"number\"\r\n//                     value={userAnswer}\r\n//                     onChange={(e) => setUserAnswer(e.target.value)}\r\n//                     className=\"p-2 border border-red-300 rounded mb-4 focus:outline-none focus:ring-2 focus:ring-red-500\"\r\n//                     placeholder=\"Your answer\"\r\n//                   />\r\n//                   <button\r\n//                     type=\"submit\"\r\n//                     className=\"bg-red-500 text-white px-4 py-2 rounded hover:bg-red-600\"\r\n//                   >\r\n//                     Submit\r\n//                   </button>\r\n//                 </form>\r\n//                 <div className=\"mt-4\">\r\n//                   <p className=\"text-xl\">{feedback}</p>\r\n//                   <p className=\"text-2xl\">Score: {score}</p>\r\n//                 </div>\r\n//               </div>\r\n//               {accountInfo && (\r\n//                 <div className=\"ml-8 p-4 border border-red-300 rounded bg-red-50\">\r\n//                   <h2 className=\"text-xl font-bold\">Account Information</h2>\r\n//                   <p><strong>Address:</strong> {accountInfo.address}</p>\r\n//                   <p><strong>Balance:</strong> {accountInfo.balance?.free} UQs</p>\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//           </>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Poookie;\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}